[{"path":"https://vegaalfaro.github.io/geneticMapR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Andrey Vega Alfaro Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Recode Markers","text":"article demonstrates process, clean, recode (phase) SNP markers VCF file generate genotype matrices compatible genetic mapping workflows. use helper functions geneticMapR package well dependencies MapRtools, VariantAnnotation, Rsamtools. example focuses F2 population, genotype recoding based founder descent.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Recode Markers","text":"need series packages, show install needed.","code":"# Load or install packages if needed  if (!requireNamespace(\"BiocManager\", quietly = TRUE)) install.packages(\"BiocManager\", quiet = TRUE) if (!requireNamespace(\"devtools\", quietly = TRUE)) install.packages(\"devtools\", quiet = TRUE)  if (!requireNamespace(\"geneticMapR\", quietly = TRUE)) devtools::install_github(\"vegaalfaro/geneticMapR\", quiet = TRUE) if (!requireNamespace(\"MapRtools\", quietly = TRUE)) devtools::install_github(\"jendelman/MapRtools\", quiet = TRUE)  if (!requireNamespace(\"VariantAnnotation\", quietly = TRUE)) BiocManager::install(\"VariantAnnotation\", quiet = TRUE) if (!requireNamespace(\"Rsamtools\", quietly = TRUE)) BiocManager::install(\"Rsamtools\", quiet = TRUE)  # Load libraries library(geneticMapR) library(MapRtools) library(VariantAnnotation) library(dplyr) library(tidyr) library(tibble) library(ggplot2) library(Rsamtools) library(ggpubr)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"load-and-explore-vcf-file","dir":"Articles","previous_headings":"","what":"Load and Explore VCF File","title":"Recode Markers","text":"VCF file somewhat large (19.8 MB) included system file. geneticMapRFiles data-repository help us save data run examples without much issues. Let’s get local copy VCF file using utils::download.file() code loads vcf file using function readVcf. Let’s explore vcf file. VCF contains several fields including GT (genotype), DP (depth), GQ (genotype quality) PL (sample-level annotations)","code":"# Let's define our URL from the data repository that accompanies this R package vcf_url <- \"https://raw.githubusercontent.com/vegaalfaro/geneticMapRFiles/main/vcf/SNP_updated_IDs_sorted2.vcf.gz\"  # Download file if (!file.exists(\"local_copy.vcf.gz\")) {   download.file(vcf_url, destfile = \"local_copy.vcf.gz\") } # Let's read the vcf into our environment vcf2 <- VariantAnnotation::readVcf(\"local_copy.vcf.gz\", genome = \"unknown\") # Overview sapply(geno(vcf2), class) #>      GT       AD       DP       GQ       PL       #> [1,] \"matrix\" \"matrix\" \"matrix\" \"matrix\" \"matrix\" #> [2,] \"array\"  \"array\"  \"array\"  \"array\"  \"array\""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"extract-genotype-and-coverage-information","dir":"Articles","previous_headings":"","what":"Extract Genotype and Coverage Information","title":"Recode Markers","text":"Let’s extract genotype depth saved GT DP fields using VariantAnnotation’s geno function. extracted, can estimate depth statistics.","code":"GT <- geno(vcf2)$GT DP <- geno(vcf2)$DP summary(as.numeric(DP)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00   19.00   27.00   30.84   39.00 1656.00"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"convert-genotype-call-to-dosage","dir":"Articles","previous_headings":"","what":"Convert Genotype Call to Dosage","title":"Recode Markers","text":"inspect GT object, genotypes coded \"0/0\", \"0/1\", \"1/1\", representing maximum likelihood call: 0 reference (REF) allele 1 alternate (ALT) allele. example: \"0/0\" dosage 0 ALT alleles, \"0/1\" \"1/0\" dosage 1 ALT allele \"1/1\" corresponds dosage 2 ALT alleles. convert_to_dosage family functions geneticMapR handles conversion easily. polyploids (e.g., \"0/0/0/0\"), check convert_to_dosage_advanced convert_to_dosage_flex. Let’s convert genotype calls dosages: Let’s take look conversion. converted dosage allele format call.","code":"GT[1:3, 1:3] #>             7001-F1-Beta-H9 2001-F2-Beta-A10 2002-F2-Beta-B10 #> CHR7_192222 \"1/0\"           \"0/1\"            \"1/1\"            #> CHR7_192239 \"0/0\"           \"0/0\"            \"0/0\"            #> CHR7_192241 \"0/0\"           \"0/0\"            \"0/0\" geno_1629 <- convert_to_dosage_flex(GT) geno_1629[1:3, 1:3] #>             7001-F1-Beta-H9 2001-F2-Beta-A10 2002-F2-Beta-B10 #> CHR7_192222               1                1                2 #> CHR7_192239               0                0                0 #> CHR7_192241               0                0                0"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"filter-markers-and-individuals-by-missing-data","dir":"Articles","previous_headings":"","what":"Filter Markers and Individuals by Missing Data","title":"Recode Markers","text":"function filter_missing_geno() takes genotype matrix rows representing genetic markers columns representing individuals. geno_matrix argument specifies genotype matrix. threshold argument allows specify max proportion missing data individual marker removed. Ranges 0 1 default 0.10. Let’s filter markers first accept 10% missing data. can see marker removed. markers less 10% missing data. can confirm using plot.  can also filter missing data per individuals. function created message letting us know 7 individuals removed data exceeds 0.1 threshold. Let’s see example access results. Let’s see individuals removed can visualize much missing data still kept individuals. greater 7% agreement filtering parameters.","code":"result <- filter_missing_geno(geno_matrix = geno_1629,                                threshold = 0.10,                               filter_by = \"markers\") #> 0 markers removed (Threshold: 0.1)  # Extract our result filtered_geno <- result$filtered_geno # Prepare data missing_values <- base::as.data.frame(result$pct_missing) colnames(missing_values) <- \"missing\"  # Visualize missingness ggplot(missing_values, aes(x = missing)) +   geom_histogram() geno_missing_filtered <- filter_missing_geno(filtered_geno,                                              threshold = 0.10,                                              filter_by = \"individuals\") #> 7 individuals removed (Threshold: 0.1) filtered_geno <- geno_missing_filtered$filtered_geno # Access outputs filtered_geno <- geno_missing_filtered$filtered_geno # Filtered geno matrix missing_values <- base::as.data.frame(geno_missing_filtered$pct_missing) # colnames(missing_values) <- \"missing\"  # Removed individuals removed_individuals <- data.frame(ind = geno_missing_filtered$removed_individuals) print(removed_individuals) #>                 ind #> 1  2055-F2-Gamma-G4 #> 2  2088-F2-Gamma-H8 #> 3 2097-F2-Gamma-A10 #> 4 2099-F2-Gamma-C10 #> 5 2105-F2-Gamma-A11 #> 6 2106-F2-Gamma-B11 #> 7 2107-F2-Gamma-C11 # Visualize missing data ggplot(missing_values, aes(x = missing)) +   geom_histogram()"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"visualize-genotype-data","dir":"Articles","previous_headings":"","what":"Visualize Genotype Data","title":"Recode Markers","text":"can also plot histogram genotypic values using plot_genotype_histogram().  Let’s also take look coverage markers across genome chromosomes. function based MapRtool’s plot_coverage. just added customization. Check . filtered genotype matrix marker names row names format “CHR7_192222” can use function extract_map() geneticMapR easily create physical map columns “marker” “chrom” “position”. function extract_map() flexible row names contain components (chromosome, position) separated symbol (e.g., _, -, .). Use arguments chrom_index pos_index specify positions, split_symbol define delimiter. example “CHR7_192222”, chrom_index = 1 chromosome first field delimiter “_“. markers coded W257B_“CHR7_192222” chrom_index = 2 pos_index = 3 chromosome position second third field respectively. extract_map tested work symbols “_“,”-” “.”. valid separators may also valid Let’s see first lines map Now ready plotting:","code":"plot_genotype_histogram(filtered_geno) # Extract physical map map <- extract_map(genotype_matrix = filtered_geno,                    chrom_index = 1, # Index for Chromosome                     pos_index = 2,                      markers = FALSE,  # If TRUE, includes original marker names                     split_symbol = \"_\") # See map heading head(map) #>   chrom position #> 1  CHR7   192222 #> 2  CHR7   192239 #> 3  CHR7   192241 #> 4  CHR7   192273 #> 5  CHR7   225702 #> 6  CHR7   225710 geneticMapR::plot_coverage(map=map, customize = TRUE)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"genotype-frequency","dir":"Articles","previous_headings":"","what":"Genotype Frequency","title":"Recode Markers","text":"can evaluate genotype frecuency using freq() function. function computes relative frequency genotype (typically coded 0, 1, 2) across markers individuals.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"genotype-frequency-by-marker","dir":"Articles","previous_headings":"Genotype Frequency","what":"Genotype Frequency by Marker","title":"Recode Markers","text":"first calculate genotype frequencies marker: returns relative frequency genotype (0, 1, 2) marker locus across individuals, allowing identification loci high homozygosity heterozygosity. can also help filter markers downstream. Let’s take look","code":"geno.freq.mar <- freq(filtered_geno, input_format = \"numeric\", by = \"markers\") head(geno.freq.mar) #>                 0         1         2 #> CHR7_192222 0.125 0.5288462 0.3461538 #> CHR7_192239 1.000 0.0000000 0.0000000 #> CHR7_192241 1.000 0.0000000 0.0000000 #> CHR7_192273 1.000 0.0000000 0.0000000 #> CHR7_225702 1.000 0.0000000 0.0000000 #> CHR7_225710 1.000 0.0000000 0.0000000"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"genotype-frequency-by-marker-1","dir":"Articles","previous_headings":"Genotype Frequency","what":"Genotype Frequency by Marker","title":"Recode Markers","text":"evaluate genotype frequncies individuals across markers: produces relative frequency genotype every individual, helping pinpoint individuals unusually high low homozygosity levels. Let’s take look","code":"geno.freq.ind <- freq(filtered_geno, input_format = \"numeric\", by = \"individuals\") head(geno.freq.ind) #>                          0          1          2 #> 7001-F1-Beta-H9  0.8822163 0.09591408 0.02186960 #> 2001-F2-Beta-A10 0.8940523 0.07536372 0.03058399 #> 2002-F2-Beta-B10 0.9041417 0.05869674 0.03716160 #> 2003-F2-Beta-C10 0.8998198 0.06497826 0.03520198 #> 2004-F2-Beta-D10 0.9027175 0.05645933 0.04082315 #> 2005-F2-Beta-E10 0.8934391 0.07540088 0.03116000"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"marker-type-analysis","dir":"Articles","previous_headings":"","what":"Marker Type Analysis","title":"Recode Markers","text":"Markers can classified based genotypes two parents: Homozygous: Fixed either one allele (P1 = 0 & P2 = 2 P1 = 2 & P2 = 0:) Non-polymorphic: parents genotype (e.g., P1 = P2 = 0, 1, 2) Heterozygous: One parents heterozygous (e.g., P1 = 1 & P2 = 0) Non-polymorphic markers always removed. Heterozygous markers can optionally excluded depending analysis goals. filter heterozygous markers keep homozygous markers, can use filter_geno_by_parents(). P1 P2 column names parental genotypes. filter_geno_by_parents retains homozygous polymorphic markers two specified parents. Note: recode()function also performs filtering automatically. user can specify also recode()keep het markers . Let’s see.","code":"# Declare the name of the parents as they appear in the column of your geno P1 <- \"P2550-Cylindra-P1-Theta-A9\" P2 <- \"P2493-Mono-P2-Theta-B9\"  # Run our function to fiter out heterozygous markers geno_homozygous <- filter_geno_by_parents(filtered_geno, P1, P2)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"recode-genotypes","dir":"Articles","previous_headings":"","what":"Recode Genotypes","title":"Recode Markers","text":"geneticMapR::recode() heart package. powerful function phases recodes genotype marker data based two parental references (arguments parent1 parent2). Recoding markers one key steps genetic mapping. markers coded way haplotypes coming either parent can tracked F2 progeny.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"typical-representation","dir":"Articles","previous_headings":"Recode Genotypes","what":"Typical representation","title":"Recode Markers","text":"figure panel typical representation intercross derive F2 mapping population. parental lines usually shown fully homozygous: P1.carries reference allele (blue, dosage = 0). P2.b carries alternate allele (orange, dosage = 2). resulting F1 heterozygous (green, dosage = 1) loci. F2 individuals show segregating mix genotypes (0, 1, 2). representation valid one parents reference genome used call SNPs. case recoding needs occur. However, rather rare case.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"alternative-representation","dir":"Articles","previous_headings":"Recode Genotypes","what":"Alternative representation","title":"Recode Markers","text":"representation, parental genotypes, assumed homozygous fixed different alleles across loci, allowing complex realistic representations: P1.b P2.b carry homozygous dosage values (0, 2). Still homozygous fixed different alleles.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"outcrossing-species","dir":"Articles","previous_headings":"Recode Genotypes","what":"Outcrossing species","title":"Recode Markers","text":"often outcrossing species like carrot table beets others high heterozygosity, (inbred) parents may mixed genotypes totally homozygous genotypes. loci lethal either homozygous configuration. P1.c P2.c carry heterozygous markers (1) low proportion, homozygous dosage values 0 2. F1s mostly heterozygous, due genotyping error residual heterozygosity dosages 0 2 typically observed individuals","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"recode-function","dir":"Articles","previous_headings":"","what":"Recode function","title":"Recode Markers","text":"recode() created help task recoding markers reflect “typical representation”. helps user track origin haplotypes F2. Essential genetic mapping. function quite flexible main functionality : Drop markers either parent NA Remove non-polymorphic markers automatically (parents genotype) handle_het_markers = TRUE, allows parental heterozygous markers kept. Note: different types Het markers. Please see function documentation information. example recode() works. based simulated data convenience.","code":"# Retains only homozygous markers hom_phased_geno_1629 <- geneticMapR::recode(geno = filtered_geno,                                 parent1 = P1,                                 parent2 = P2,                                 numeric_output = TRUE,                                 handle_het_markers = FALSE) #> Dropping markers with NA in at least one of the parents. Your genotype matrix contains missing parental genotypes. #> Dropping non-polymorphic markers. Your genotype matrix contains markers that are identical in the two parents.  # Allows for heterozygous markers het_phased_geno_1629 <- geneticMapR::recode(geno = filtered_geno,                                parent1 = P1,                                parent2 = P2,                                numeric_output = TRUE,                                handle_het_markers = TRUE) #> Dropping markers with NA in at least one of the parents. Your genotype matrix contains missing parental genotypes. #> Dropping non-polymorphic markers. Your genotype matrix contains markers that are identical in the two parents. # Load the example dataset data(\"simulated_geno\")  # Check markers previous to recoding print(simulated_geno) #>         Parent1 Parent2 F2_1 F2_2 F2_3 #> Marker1       0       2    0    1    2 #> Marker2       2       0    2    0    1 #> Marker3       0       2    1    2    1 #> Marker4       2       0    2    0    0 #> Marker5       0       2    0    2    1 #> Marker6       2       0    2    0    0  # Recode the markers using the recode() function phased <- geneticMapR::recode(simulated_geno, parent1 = \"Parent1\", parent2 = \"Parent2\")  # Print the output print(phased) #>         Parent1 Parent2 F2_1 F2_2 F2_3 #> Marker1       0       2    0    1    2 #> Marker2       0       2    0    2    1 #> Marker3       0       2    1    2    1 #> Marker4       0       2    0    2    2 #> Marker5       0       2    0    2    1 #> Marker6       0       2    0    2    2"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"tradeoff-between-marker-type-and-genome-coverage","dir":"Articles","previous_headings":"","what":"Tradeoff Between Marker Type and Genome Coverage","title":"Recode Markers","text":"outcrossing species noticed tradeoff coverage quantity heterozygous markers. Including heterozygous markers increases genome coverage compared using homozygous markers, comes tradeoffs. heterozygous markers can improve coverage, especially regions near centromere, loci segregation distortion deleterious alleles, may complicate downstream linkage group estimation due different segregation patterns. following section illustrates tradeoff marker type genome coverage.","code":"a <- plot_coverage(map = extract_map(hom_phased_geno_1629)) + ggtitle(\"Homozygous\") b <- plot_coverage(map = extract_map(het_phased_geno_1629)) + ggtitle(\"Homozygous + heterozygous\") c <- plot_genotype_histogram(hom_phased_geno_1629) d <- plot_genotype_histogram(het_phased_geno_1629)  ggarrange(a, b, c, d,            nrow = 2,           ncol = 2           )"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"genotype-frequencies-and-filtering","dir":"Articles","previous_headings":"","what":"Genotype Frequencies and Filtering","title":"Recode Markers","text":"geneticMapR includes functions estimate frequencies like freq() easy way. function allows estimate genotype frequencies later filtering.  plots see abundance markers frequencies 0 1 across gentoypes (.e., 0, 1, 2). can use function filter_geno_by_freq() filter markers maximum genotype frequency keeping range heterozygous frequencies, say lower 0.1 hiher 0.70. reasonable F2 mapping populations. resulting plot shows filtered marker set overabundance markers frequencies 0 1 filtered .  see filtering paramaters left us typical 1:2:1 segregation ratio even markers included heterozygous markers properly filtered.","code":"# Get Frequencies geno.freq.hom <- freq(hom_phased_geno_1629,  input_format = \"numeric\", by =\"markers\")  geno.freq.het <- freq(het_phased_geno_1629, input_format = \"numeric\", by = \"markers\")  # Plots het_plot <- frequency_plot(geno.freq.het) + ggtitle(\"Het markers, unfiltered\") hom_plot <- frequency_plot(geno.freq.hom) + ggtitle(\"Hom markers, unfiltered\")  # Arrange ggarrange(hom_plot,           het_plot,           nrow = 2) # Heterozygous marker curation het_phased_geno_1629_filt <- filter_geno_by_freq(het_phased_geno_1629,                                                   max_geno_freq = 0.90,                                                   het_freq_range = c(0.1, 0.70)  )  # Create a dataset of frequencies based on the filtered data geno.freq.het.filtered <- freq(het_phased_geno_1629_filt,                                 input_format = \"numeric\",                                 by =\"markers\")    # Create plot frequency_plot(geno.freq.het.filtered) + ggtitle(\"Het markers, filtered\") #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. v <- plot_genotype_histogram(het_phased_geno_1629_filt) +   ggtitle(\"Homozygous + filtered het markers\")  w <-  plot_genotype_histogram(hom_phased_geno_1629) +   ggtitle(\"Homomozygous markers\")  ggarrange(v, w,           nrow = 2)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"save-results","dir":"Articles","previous_headings":"","what":"Save Results","title":"Recode Markers","text":"","code":"save(hom_phased_geno_1629,      het_phased_geno_1629,      het_phased_geno_1629_filt,      file = \"processed_data/R_data/filtered_geno_matrices_1629.RData\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Recode Markers","text":"lot genetic map construction revolves around type markers make good use . many filtering steps taken specially using GBS data make sure curated set markers markers can trust informative. vignette provides workflow preparing phasing genotypic data genetic mapping analyses F2 population using tools geneticMapR bioinformatics packages. Let’s continue next article genetic map construction.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Recode Markers","text":"","code":"sessionInfo() #> R version 4.5.0 (2025-04-11) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] grid      stats4    stats     graphics  grDevices utils     datasets  #> [8] methods   base      #>  #> other attached packages: #>  [1] png_0.1-8                   ggpubr_0.6.0                #>  [3] ggplot2_3.5.2               tibble_3.2.1                #>  [5] tidyr_1.3.1                 dplyr_1.1.4                 #>  [7] VariantAnnotation_1.54.0    Rsamtools_2.24.0            #>  [9] Biostrings_2.76.0           XVector_0.48.0              #> [11] SummarizedExperiment_1.38.0 Biobase_2.68.0              #> [13] GenomicRanges_1.60.0        GenomeInfoDb_1.44.0         #> [15] IRanges_2.42.0              S4Vectors_0.46.0            #> [17] MatrixGenerics_1.20.0       matrixStats_1.5.0           #> [19] BiocGenerics_0.54.0         generics_0.1.3              #> [21] MapRtools_0.36              geneticMapR_0.0.0.9000      #>  #> loaded via a namespace (and not attached): #>   [1] jsonlite_2.0.0           magrittr_2.0.3           GenomicFeatures_1.60.0   #>   [4] farver_2.1.2             rmarkdown_2.29           BiocIO_1.18.0            #>   [7] fs_1.6.6                 ragg_1.4.0               vctrs_0.6.5              #>  [10] splines2_0.5.4           memoise_2.0.1            RCurl_1.98-1.17          #>  [13] rstatix_0.7.2            htmltools_0.5.8.1        S4Arrays_1.8.0           #>  [16] usethis_3.1.0            curl_6.2.2               distributional_0.5.0     #>  [19] broom_1.0.8              SparseArray_1.8.0        Formula_1.2-5            #>  [22] sass_0.4.10              bslib_0.9.0              htmlwidgets_1.6.4        #>  [25] desc_1.4.3               cachem_1.1.0             GenomicAlignments_1.44.0 #>  [28] mime_0.13                lifecycle_1.0.4          iterators_1.0.14         #>  [31] pkgconfig_2.0.3          Matrix_1.7-3             R6_2.6.1                 #>  [34] fastmap_1.2.0            GenomeInfoDbData_1.2.14  shiny_1.10.0             #>  [37] digest_0.6.37            colorspace_2.1-1         AnnotationDbi_1.70.0     #>  [40] pkgload_1.4.0            textshaping_1.0.0        RSQLite_2.3.9            #>  [43] seriation_1.5.7          labeling_0.4.3           httr_1.4.7               #>  [46] abind_1.4-8              mgcv_1.9-1               compiler_4.5.0           #>  [49] remotes_2.5.0            withr_3.0.2              bit64_4.6.0-1            #>  [52] HMM_1.0.1                backports_1.5.0          BiocParallel_1.42.0      #>  [55] carData_3.0-5            DBI_1.2.3                pkgbuild_1.4.7           #>  [58] ggsignif_0.6.4           DelayedArray_0.34.0      sessioninfo_1.2.3        #>  [61] rjson_0.2.23             CVXR_1.0-15              tools_4.5.0              #>  [64] httpuv_1.6.16            glue_1.8.0               restfulr_0.0.15          #>  [67] nlme_3.1-168             promises_1.3.2           BSgenome_1.76.0          #>  [70] gtable_0.3.6             qtl_1.70                 ca_0.71.1                #>  [73] car_3.1-3                foreach_1.5.2            pillar_1.10.2            #>  [76] ggdist_3.3.2             stringr_1.5.1            later_1.4.2              #>  [79] splines_4.5.0            lattice_0.22-6           rtracklayer_1.68.0       #>  [82] gmp_0.7-5                bit_4.6.0                tidyselect_1.2.1         #>  [85] registry_0.5-1           miniUI_0.1.2             knitr_1.50               #>  [88] xfun_0.52                devtools_2.4.5           scam_1.2-18              #>  [91] stringi_1.8.7            UCSC.utils_1.4.0         yaml_2.3.10              #>  [94] evaluate_1.0.3           codetools_0.2-20         BiocManager_1.30.25      #>  [97] cli_3.6.4                xtable_1.8-4             systemfonts_1.2.2        #> [100] munsell_0.5.1            jquerylib_0.1.4          Rcpp_1.0.14              #> [103] XML_3.99-0.18            parallel_4.5.0           ellipsis_0.3.2           #> [106] pkgdown_2.1.1            blob_1.2.4               profvis_0.4.0            #> [109] urlchecker_1.0.1         bitops_1.0-9             Rmpfr_1.0-0              #> [112] scales_1.3.0             purrr_1.0.4              crayon_1.5.3             #> [115] rlang_1.1.6              cowplot_1.1.3            KEGGREST_1.48.0          #> [118] TSP_1.2-4"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/geneticMapR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"geneticMapR","text":"","code":"# Get devtools if needed if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") }  #Install geneticMapR devtools::install_github(\"vegaalfaro/geneticMapR\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/geneticMapR.html","id":"recommendations","dir":"Articles","previous_headings":"","what":"Recommendations","title":"geneticMapR","text":"genotyping, critical include DNA parental lines F1 individuals. Ideally, actual plants used create population, especially outcrossing species like carrot beet. tissue original parents F1 unavailable, use samples plants genotype. However, outcrossing species, even inbred lines may show unexpected intra-genotype diversity. ’ve seen firsthand carrots. Parental genotypes essential recoding phasing markers reflect parental inheritance, core step genetic mapping. ’re also helpful resolving problematic markers understanding residual heterozygosity, common many populations. parents F1 genotyped prove invaluable genetic mapping project.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/geneticMapR.html","id":"using-your-own-data","dir":"Articles","previous_headings":"","what":"Using Your Own Data","title":"geneticMapR","text":"Ther purpose package use data. can use genotype matrix geneticMapR. Functions like convert_to_dosage() convert_to_dosage_flex() help format raw genotype calls phased numeric values compatible package. unfiltered VCF-derived matrices, make sure : Filter bi-allelic SNPs. Remove non-polymorphic markers. Keep SNPs sufficient depth genotype quality scores, varies project population. need help pre-mapping step, check bcftools_tutorial github vegaalfaro/bcftoolsR. Still development.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/geneticMapR.html","id":"where-to-start","dir":"Articles","previous_headings":"","what":"Where to start?","title":"geneticMapR","text":"geneticMapR helps construct genetic maps F2 mapping populations. primarily designed diploid species, functions also support polyploids. get started, ’ll need essential files: Genotype file: matrix individuals scored genotype across multiple loci genome. Phenotype file: One traits measured across individuals, possibly across time environments (multi-environment trials), depending species. geneticMapR provides example data walk mapping process. ’ll start example VCF[https://samtools.github.io/hts-specs/VCFv4.2.pdf] file typical output next generation sequencing platforms like genotyping sequencing (GBS)","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/geneticMapR.html","id":"documentation","dir":"Articles","previous_headings":"","what":"Documentation","title":"geneticMapR","text":"Check articles tab systematic example VCF Effect Plots.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrey Vega Alfaro. Author, maintainer.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vega Alfaro (2025). geneticMapR: Tools Making Genetic Map Construction Easier. R package version 0.0.0.9000, https://github.com/vegaalfaro/geneticMapR.","code":"@Manual{,   title = {geneticMapR: Tools for Making Genetic Map Construction Easier},   author = {Andrey {Vega Alfaro}},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/vegaalfaro/geneticMapR}, }"},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"geneticmapr-","dir":"","previous_headings":"","what":"Tools for Making Genetic Map Construction Easier","title":"Tools for Making Genetic Map Construction Easier","text":"geneticMapR simplifies construction genetic maps. Built top MapRtools R/qtl reproducible analysis. Optimized F2 diploid plant populations. functions generalized different experimental populations polyploids. geneticMapR designed help reproducible genetic map construction quantitative trait loci (QTL) analysis.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Making Genetic Map Construction Easier","text":"can install development version geneticMapR GitHub :","code":"# Get devtools if needed if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") }  #Install geneticMapR devtools::install_github(\"vegaalfaro/geneticMapR\")  # Load library library(geneticMapR)"},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"learn-geneticmapr","dir":"","previous_headings":"","what":"Learn geneticMapR","title":"Tools for Making Genetic Map Construction Easier","text":"Check Articles tab learn detail construct genetic maps F2 mapping populations. populations development. vignettes (articles) systematically designed teach create genetic maps learn functions along way. geneticMapR documentation also provides examples.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for Making Genetic Map Construction Easier","text":"example shows recode markers neither parent reference genome, common GBS data. Molecular markers (SNPs) must phased accurately trace allele inheritance progeny. recode general function can help :","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"recode-markers","dir":"","previous_headings":"Usage","what":"Recode markers","title":"Tools for Making Genetic Map Construction Easier","text":"","code":"# Load the example dataset data(\"simulated_geno\")  # Check markers previous to recoding print(simulated_geno) #>         Parent1 Parent2 F2_1 F2_2 F2_3 #> Marker1       0       2    0    1    2 #> Marker2       2       0    2    0    1 #> Marker3       0       2    1    2    1 #> Marker4       2       0    2    0    0 #> Marker5       0       2    0    2    1 #> Marker6       2       0    2    0    0  # Recode the markers using the recode() function phased <- geneticMapR::recode(simulated_geno, parent1 = \"Parent1\", parent2 = \"Parent2\")  # Print the output print(phased) #>         Parent1 Parent2 F2_1 F2_2 F2_3 #> Marker1       0       2    0    1    2 #> Marker2       0       2    0    2    1 #> Marker3       0       2    1    2    1 #> Marker4       0       2    0    2    2 #> Marker5       0       2    0    2    1 #> Marker6       0       2    0    2    2"},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"visualization-capabilities","dir":"","previous_headings":"Usage","what":"Visualization capabilities","title":"Tools for Making Genetic Map Construction Easier","text":"function generates QTL trace plot visualize significance scores across chromosomes one traits. highlights QTL peaks overlays customizable vertical lines","code":"library(geneticMapR) data(\"qtl_example\")       plot_qtl_trace(qtl_df = qtl_example$qtl_df,                 thresholds_df = qtl_example$thresholds,                   vline_df = qtl_example$vline,                   use_physical_pos = FALSE,                   x_angle = 0,                 trait_colors = qtl_example$colors,                 trait_labels = qtl_example$labels,                 plot_title = \"Population 1\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Tools for Making Genetic Map Construction Easier","text":"detailed documentation examples, visit geneticMapR","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"hexlogo","dir":"","previous_headings":"","what":"Hexlogo","title":"Tools for Making Genetic Map Construction Easier","text":"Credit: Adriana Lopez","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/LD_decay_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot LD vs distance — LD_decay_plot","title":"Plot LD vs distance — LD_decay_plot","text":"Plot LD vs distance using asymptotic regression model.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/LD_decay_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot LD vs distance — LD_decay_plot","text":"","code":"LD_decay_plot(   data,   map,   max.pair = 10000,   max.loci = NULL,   position = \"bp\",   r2_threshold = 0.2,   xlim_range = c(0, 20),   show_vline = TRUE,   show_hline = TRUE,   seed = 123 )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/LD_decay_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot LD vs distance — LD_decay_plot","text":"data Genotype matrix (markers columns, individuals rows). Rownames marker names matcho marker column map. map Data frame columns 'chrom', 'marker', 'position' max.pair Maximum number r² pairs model (default: 1e4) max.loci Maximum number markers use per chromosome (default: NULL) position \"bp\" \"Mb\" (default: \"bp\") r2_threshold r² value decay distance calculation (default: 0.2), xlim_range Zoom range x axis, default c(0, 20). Set NULL see entire plot. show_vline show vertical line intersecting x-axis half-decay distance (default, TRUE) show_hline show horizontal line intersecting y-axis selected r² threshold (default, TRUE) seed Optional integer seed make random sampling reproducible. Default 123.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/LD_decay_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot LD vs distance — LD_decay_plot","text":"list containing: plot ggplot2 object points fitted curve (NULL fit fails) half_decay_dist Distance r² reaches specified threshold (NA estimable) model Fitted nls object (NULL fitting failed)","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/LD_decay_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot LD vs distance — LD_decay_plot","text":"asymptotic regression model fit using SSasymp. distance r² reaches specified threshold (e.g., 0.1 0.2) calculated returned. function calculates r² chromosome  follows general logic MapRtools::LD.plot uses function SSasymp model non-linear LD decay. function give quick simple estimate LD. sophisticated LD functions see David Gerard ldfast() processes chromosome separately compute pairwise r² values within chromosomes, combines results across chromosomes single dataset, fits one global LD decay model pooled data. cross-chromosome marker pairs considered. user interested LD per chromosome, provide map data file data pertaining chromosome interest.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/LD_decay_plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot LD vs distance — LD_decay_plot","text":"number rows (number marker pairs) larger max.pair (default 1e4), proceed random sampling.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert VCF Genotype Format to Dosage for Diploids — convert_to_dosage","title":"Convert VCF Genotype Format to Dosage for Diploids — convert_to_dosage","text":"function converts VCF genotype matrix (format \"0/0\", \"0/1\", \"1/1\") allele dosage values (0, 1, 2) representing count alternative allele. Mostly used within package. Check flexible convert_to_dosage_flex works polyploids.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert VCF Genotype Format to Dosage for Diploids — convert_to_dosage","text":"","code":"convert_to_dosage(GT)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert VCF Genotype Format to Dosage for Diploids — convert_to_dosage","text":"GT character matrix entry represents genotype VCF format (\"0/0\", \"0/1\", \"1/1\").","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert VCF Genotype Format to Dosage for Diploids — convert_to_dosage","text":"numeric matrix dimensions GT, value represents dosage alternate allele (0, 1, 2).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert VCF Genotype Format to Dosage for Diploids — convert_to_dosage","text":"Converts alleles numeric values sums compute alternate allele dosage. Retains original row column names input matrix.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert VCF Genotype Format to Dosage for Diploids — convert_to_dosage","text":"","code":"# Example genotype matrix in VCF format vcf_matrix <- matrix(c(\"0/0\", \"0/1\", \"1/1\",                        \"0/1\", \"0/0\", \"1/1\"),                      nrow = 2, ncol = 3,                      dimnames = list(c(\"Marker1\", \"Marker2\"),                                      c(\"Ind1\", \"Ind2\", \"Ind3\")))  # Convert to dosage dosage_matrix <- convert_to_dosage(vcf_matrix) print(dosage_matrix) #>         Ind1 Ind2 Ind3 #> Marker1    0    2    0 #> Marker2    1    1    2"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_advanced.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert VCF Genotype Format to Dosage (Advanced, Polyploid-Compatible) — convert_to_dosage_advanced","title":"Convert VCF Genotype Format to Dosage (Advanced, Polyploid-Compatible) — convert_to_dosage_advanced","text":"Converts matrix genotype calls VCF-style format (e.g., \"0/1\", \"1/1\", \"0/0/1/1\") numeric dosage values. Supports variable ploidy, multi-allelic variants (e.g., \"2\", \"3\"), includes optional outputs ploidy level, usable allele counts, normalized dosage.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_advanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert VCF Genotype Format to Dosage (Advanced, Polyploid-Compatible) — convert_to_dosage_advanced","text":"","code":"convert_to_dosage_advanced(   GT,   alt_alleles = c(\"1\"),   strict_missing = TRUE,   normalize = FALSE )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_advanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert VCF Genotype Format to Dosage (Advanced, Polyploid-Compatible) — convert_to_dosage_advanced","text":"GT character matrix genotypes VCF format (e.g., \"0/1/1/1\", \"1/1/1/1\"). alt_alleles character vector indicating allele values counted alternate (e.g., c(\"1\") c(\"1\", \"2\")). strict_missing Logical. TRUE (default), missing allele (.e., \".\") causes entire dosage value set NA. normalize Logical. TRUE, dosage values normalized ploidy level (.e., scaled 0-1). Default FALSE.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_advanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert VCF Genotype Format to Dosage (Advanced, Polyploid-Compatible) — convert_to_dosage_advanced","text":"list following elements: dosage: Matrix alternate allele dosage values. ploidy: Matrix number alleles per genotype (excluding NAs). usable_alleles: Matrix number non-missing alleles used dosage calculation.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_advanced.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert VCF Genotype Format to Dosage (Advanced, Polyploid-Compatible) — convert_to_dosage_advanced","text":"found ways generalizing function work complex situations previous versions function. function tested rigorously. Contact author issues.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_advanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert VCF Genotype Format to Dosage (Advanced, Polyploid-Compatible) — convert_to_dosage_advanced","text":"","code":"if (FALSE) { # \\dontrun{ vcf <- matrix(c(\"0/0/0/0\", \"1/1/1/1\", \"0/1/1/1\",                 \"1/1/1/1\", NA, \"0/1/./1\"),               nrow = 2, byrow = TRUE,               dimnames = list(c(\"Marker1\", \"Marker2\"),                               c(\"Ind1\", \"Ind2\", \"Ind3\")))  convert_to_dosage_advanced(vcf, alt_alleles = c(\"1\")) convert_to_dosage_advanced(vcf, alt_alleles = c(\"1\"), strict_missing = FALSE, normalize = TRUE)    set.seed(123)  # for reproducibility  # Function to generate one genotype (VCF-style) generate_genotype <- function(ploidy = 4, missing_rate = 0.05) {   alleles <- sample(c(0, 1, 2, \".\"), size = ploidy,   replace = TRUE,   prob = c(0.40, 0.40, 0.10, missing_rate)) paste(alleles, collapse = \"/\") }  # Parameters n_markers <- 100 n_individuals <- 10 ploidy <- 4  # tetraploid  genotype_matrix <- matrix(   data = replicate(n_markers * n_individuals, generate_genotype(ploidy = ploidy)),   nrow = n_markers,   ncol = n_individuals,   dimnames = list(     paste0(\"Marker\", seq_len(n_markers)),     paste0(\"Ind\", seq_len(n_individuals))   ) )  # Preview head(genotype_matrix)   result <- convert_to_dosage_advanced(genotype_matrix,                                      alt_alleles = c(\"1\", \"2\"),                                      strict_missing = TRUE,                                      normalize = FALSE)  # View dosage matrix head(result$dosage)  # View ploidy matrix head(result$ploidy)  # View number of usable alleles head(result$usable_alleles)  } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_flex.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert VCF Genotype Format to Dosage (Supports Polyploids and Missing Alleles) — convert_to_dosage_flex","title":"Convert VCF Genotype Format to Dosage (Supports Polyploids and Missing Alleles) — convert_to_dosage_flex","text":"Converts VCF genotype matrix (GT format e.g., \"0/0\", poplyplids \"0/0/1/1\") numeric dosage values representing count alternate alleles. Works ploidy (tested haploid hexaploid) allows control missing alleles (\".\") handled.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_flex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert VCF Genotype Format to Dosage (Supports Polyploids and Missing Alleles) — convert_to_dosage_flex","text":"","code":"convert_to_dosage_flex(GT, strict_missing = TRUE)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_flex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert VCF Genotype Format to Dosage (Supports Polyploids and Missing Alleles) — convert_to_dosage_flex","text":"GT character matrix genotypes VCF format (e.g., \"0/1/1/1\", \"1/1/1/1\"). strict_missing Logical. TRUE (default), missing allele (e.g., \".\") causes entire genotype set NA. FALSE, missing alleles ignored dosage calculated available alleles.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_flex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert VCF Genotype Format to Dosage (Supports Polyploids and Missing Alleles) — convert_to_dosage_flex","text":"numeric matrix dimensions names GT, value dosage alternate allele (assumed \"1\").","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_flex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert VCF Genotype Format to Dosage (Supports Polyploids and Missing Alleles) — convert_to_dosage_flex","text":"function flexible ploidy level — simply counts many \"1\" alleles exist genotype. Alleles split using either / |, phased unphased VCF data supported. Missing alleles (\".\") handled based strict_missing argument: TRUE: allele missing genotype, entire dosage returned NA. FALSE: Missing alleles ignored dosage calculated known alleles.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_flex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert VCF Genotype Format to Dosage (Supports Polyploids and Missing Alleles) — convert_to_dosage_flex","text":"","code":"poly_vcf <- matrix(c(\"0/0/0/0\", \"1/1/1/1\", \"0/1/1/1\",                      \"1/1/1/1\", NA, \"0/1/./1\"),                    nrow = 2, byrow = TRUE,                    dimnames = list(c(\"Marker1\", \"Marker2\"),                                    c(\"Ind1\", \"Ind2\", \"Ind3\")))  # Strict handling: missing allele causes full NA convert_to_dosage_flex(poly_vcf, strict_missing = TRUE)   # Set whole cell to NA if \".\" present #>         Ind1 Ind2 Ind3 #> Marker1    0    4    3 #> Marker2    4   NA   NA  # Permissive handling: ignore missing and sum known alleles convert_to_dosage_flex(poly_vcf, strict_missing = FALSE)  # Ignore \".\" and sum what’s there #>         Ind1 Ind2 Ind3 #> Marker1    0    4    3 #> Marker2    4   NA    2"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/drop_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop Parents and F1 Individuals from a Data Frame — drop_parents","title":"Drop Parents and F1 Individuals from a Data Frame — drop_parents","text":"helper function removes specified parental F1 columns genotype dataset.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/drop_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop Parents and F1 Individuals from a Data Frame — drop_parents","text":"","code":"drop_parents(y, parent1 = \"P1\", parent2 = \"P2\", F1 = NULL)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/drop_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop Parents and F1 Individuals from a Data Frame — drop_parents","text":"y data frame individuals (including parents F1s) columns. parent1 Character. name first parent column removed. Default \"P1\". parent2 Character. name second parent column removed. Default \"P2\". F1 (Optional) Character. name F1 hybrid column removed. Default NULL.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/drop_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop Parents and F1 Individuals from a Data Frame — drop_parents","text":"data frame specified parent F1 columns removed.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/drop_parents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop Parents and F1 Individuals from a Data Frame — drop_parents","text":"y must coercible data frame. Checks specified columns exist attempting drop . removes columns present data frame. Preserves columns structure. multiple F1s present can declared using c() function","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/drop_parents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop Parents and F1 Individuals from a Data Frame — drop_parents","text":"","code":"# Example dataset geno_data <- data.frame(   Marker1 = c(0, 1, 2),   P1 = c(0, 0, 0),   P2 = c(2, 2, 2),   F1 = c(1, 1, 1),   Ind1 = c(0, 1, 2),   Ind2 = c(2, 0, 1) )  # Drop parents P1 and P2 filtered_data <- drop_parents(geno_data) print(filtered_data) #>   Marker1 F1 Ind1 Ind2 #> 1       0  1    0    2 #> 2       1  1    1    0 #> 3       2  1    2    1  # Drop parents and F1 filtered_data_f1 <- drop_parents(geno_data, F1 = \"F1\") print(filtered_data_f1) #>   Marker1 Ind1 Ind2 #> 1       0    0    2 #> 2       1    1    0 #> 3       2    2    1  # Example dataset2 geno_data2 <- data.frame(   Marker1 = c(0, 1, 2),   P1 = c(0, 0, 0),   P2 = c(2, 2, 2),   F1a = c(1, 1, 1),   F1b = c(1, 1, 1),   Ind1 = c(0, 1, 2),   Ind2 = c(2, 0, 1) )   # Drop parents and multiple F1s filtered_data_f1 <- drop_parents(geno_data, F1 = c(\"F1a\", \"F1b\")) print(filtered_data_f1) #>   Marker1 F1 Ind1 Ind2 #> 1       0  1    0    2 #> 2       1  1    1    0 #> 3       2  1    2    1"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/effect_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Powerful Effect Plots — effect_plot","title":"Powerful Effect Plots — effect_plot","text":"function generates powerful effect plots show relationship genotype classes marker (QTL) given trait. Works polyploids function computes summary statistics genotype class overlays plot. Optionally, can flip coordinate axes. Shows distributions measures spread individuals simply boxplot.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/effect_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Powerful Effect Plots — effect_plot","text":"","code":"effect_plot(   effects_df,   marker_name,   trait_name,   genotype_levels = c(\"A\", \"H\", \"B\"),   flip = TRUE,   trait_label = NULL )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/effect_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Powerful Effect Plots — effect_plot","text":"effects_df data frame containing least columns marker trait interest. work output format_qtl_inputwith modifications (first two rows removed). marker_name character string specifying name marker column effects_df. trait_name character string specifying name trait column effects_df. genotype_levels character vector indicating levels (genotype categories) marker. Default c(\"\", \"H\", \"B\"). flip Logical; TRUE, plot displayed flipped coordinates (horizontal layout). Default TRUE. trait_label Optional character string use y-axis label. NULL, trait name used.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/effect_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Powerful Effect Plots — effect_plot","text":"list three elements: [[1]] ggplot2 object showing distribution trait values genotype given marker. [[2]] data frame summary statistics (median, max, min, count, standard deviation) genotype. [[3]] data frame population-level summary statistics (mean, median, sd, max) trait.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/effect_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Powerful Effect Plots — effect_plot","text":"function performs following steps: Checks presence specified columns. Calculates summary statistics genotype. Constructs half-eye plot boxplot overlays annotations. uses ggplot2 plotting ggdist half-eye visualization.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/effect_plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Powerful Effect Plots — effect_plot","text":"half-eye visualization inspired work Cedric Scherer","code":""},{"path":[]},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Genotyping Error Rate — estimate_error","title":"Estimate Genotyping Error Rate — estimate_error","text":"function calculates genotyping error rate comparing original genotype matrix HMM-processed genotype matrix. error rate defined proportion genotype mismatches, ignoring missing values. Designed estimate error rate haplotype_reconstruction.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Genotyping Error Rate — estimate_error","text":"","code":"estimate_error(original_geno, processed_geno)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Genotyping Error Rate — estimate_error","text":"original_geno numeric genotype matrix : Rows represent genetic markers. Columns represent individuals. Values expected 0, 1, 2, NA missing data. processed_geno numeric genotype matrix dimensions original_geno, containing genotypes processed. Likely output haplotype_reconstruction. estimated error rate used haplotype_reconstruction accurate estimate ","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Genotyping Error Rate — estimate_error","text":"numeric value representing estimated genotyping error rate.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Genotyping Error Rate — estimate_error","text":"","code":"if (FALSE) { # \\dontrun{ # Example genotype matrices original <- matrix(c(0, 1, 2, NA, 1, 2, 0, 1, 2, 2, NA, 1),                    nrow = 4, ncol = 3) processed <- matrix(c(0, 1, 1, NA, 1, 2, 0, 2, 2, 2, NA, 1),                     nrow = 4, ncol = 3)  # Estimate genotyping error error_rate <- estimate_error(original, processed) print(error_rate) } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Genetic Map Positions — estimate_map","title":"Estimate Genetic Map Positions — estimate_map","text":"Designed work one chromosome time. estimate_map calculates genetic map positions using recombination frequency (RF) LOD scores calculated genotype matrix. applies selected mapping function (Kosambi Haldane) outputs map positions (centi Morgans, cM) multiple resolutions defined user.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Genetic Map Positions — estimate_map","text":"","code":"estimate_map(   geno_matrix,   model = \"Kosambi\",   n_points = seq(10, 20, by = 5),   pop.type = \"F2\" )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Genetic Map Positions — estimate_map","text":"geno_matrix genotype matrix rows represent markers columns represent individuals. matrix must format compatible MapRtools::MLEL markers one chromosome Linkage Group. model Character string specifying mapping function use. Options \"Kosambi\" (default) \"Haldane\". n_points numeric vector indicating different values n.point used estimating genetic positions. Default seq(10, 20, = 5). pop.type Character string specifying population type. Supported options \"DH\", \"BC\", \"F2\" (default), \"S1\", \"RIL.self\", \"RIL.sib\".","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Genetic Map Positions — estimate_map","text":"data frame containing extracted genetic map additional columns (pN) corresponding estimated positions specified n.point value.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Genetic Map Positions — estimate_map","text":"function uses MapRtools::MLEL() compute RF LOD matrices applies specified mapping function via MapRtools::map_fn(). n.point value, function appends new column (pN) map estimated genetic positions.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Genetic Map Positions — estimate_map","text":"","code":"if (FALSE) { # \\dontrun{ # Example genotype matrix  geno_matrix <- chr1_geno_matrix  map <- estimate_map(chr1_geno_matrix, model = \"Kosambi\", n_points = c(10, 15, 20), pop.type = \"F2\")  # Simply genetic_map_chr1 <- estimate_map(chr1_geno_matrix) } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/extract_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Physical Map from Chromosome and Position from Row Names — extract_map","title":"Create a Physical Map from Chromosome and Position from Row Names — extract_map","text":"function extracts chromosome position information row names genotype matrix. row names expected follow format components (example chromosome, position) separated symbol (e.g., \"_\", \"-\", \".\"). user can specify part row name corresponds chromosome position using chrom_index pos_index, can customize delimiter using split_symbol.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/extract_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Physical Map from Chromosome and Position from Row Names — extract_map","text":"","code":"extract_map(   genotype_matrix,   chrom_index = 1,   pos_index = 2,   markers = FALSE,   split_symbol = \"_\" )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/extract_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Physical Map from Chromosome and Position from Row Names — extract_map","text":"genotype_matrix matrix : Rows correspond genetic markers. Row names contain marker identifiers multiple components separated delimiter (e.g., \"A_1_200\", \"B-2-300\", \"C.3.400\"). Columns correspond individuals (used function part input structure). chrom_index Integer. index chromosome identifier split row name. Default 1 (first element). pos_index Integer. index position identifier split row name. Default 2 (second element). markers Logical. TRUE,  includes original marker names input output data frame. Default FALSE. split_symbol Character. delimiter used split row names. Default \"_\". Can changed \"-\", \".\", valid delimiters.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/extract_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Physical Map from Chromosome and Position from Row Names — extract_map","text":"data frame columns: \"chrom\": Chromosome identifier extracted row names. \"position\": Numeric genomic position extracted row names. \"marker\" (optional): Marker names (markers = TRUE).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/extract_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Physical Map from Chromosome and Position from Row Names — extract_map","text":"Row names split using specified split_symbol extract chromosome position. user defines components extract using chrom_index pos_index. Ensures position column numeric. markers = TRUE, includes marker names output.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/extract_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Physical Map from Chromosome and Position from Row Names — extract_map","text":"","code":"if (FALSE) { # \\dontrun{ # Example genotype matrix with different delimiters geno_matrix <- matrix(nrow = 3, ncol = 2) rownames(geno_matrix) <- c(\"A_1_200\", \"B_2_300\", \"C_3_400\")  # Default delimiter \"_\" extract_map(geno_matrix)  # Using \"-\" as delimiter rownames(geno_matrix) <- c(\"A-1-200\", \"B-2-300\", \"C-3-400\") extract_map(geno_matrix, chrom_index = 1, pos_index = 3, split_symbol = \"-\") } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Genotype Matrix by Allele Frequency — filter_geno_by_freq","title":"Filter Genotype Matrix by Allele Frequency — filter_geno_by_freq","text":"Filters genotype matrix applying constraints maximum minimum genotype frequency per marker, well heterozygous frequency. filtering based allele frequency calculations using freq() function internally.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Genotype Matrix by Allele Frequency — filter_geno_by_freq","text":"","code":"filter_geno_by_freq(   geno_matrix,   max_geno_freq = NULL,   het_freq_range = NULL,   min_geno_freq = NULL,   input_format = \"numeric\" )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Genotype Matrix by Allele Frequency — filter_geno_by_freq","text":"geno_matrix numeric genotype matrix data frame : Rows represent genetic markers. Columns represent individuals. Values either 0, 1, 2 (numeric format) \"\", \"H\", \"B\" (genotype format). max_geno_freq Numeric. provided, removes markers frequent genotype exceeds threshold. het_freq_range Numeric vector length 2. provided, retains markers heterozygosity frequency within specified range (c(min, max)). min_geno_freq Numeric. provided, removes markers least frequent genotype falls threshold. input_format Character. Specifies whether genotype matrix \"numeric\" (0, 1, 2) \"genotype\" (\"\", \"H\", \"B\") format. Default \"numeric\".","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Genotype Matrix by Allele Frequency — filter_geno_by_freq","text":"filtered genotype matrix markers meet specified frequency criteria.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Genotype Matrix by Allele Frequency — filter_geno_by_freq","text":"Computes genotype frequencies using freq() function. Retains markers meet specified frequency constraints. filtering parameters (max_geno_freq, het_freq_range, min_geno_freq) NULL, function returns original matrix.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Genotype Matrix by Allele Frequency — filter_geno_by_freq","text":"","code":"# Example genotype matrix geno_data <- matrix(sample(0:2, 30, replace = TRUE),                     nrow = 10, ncol = 3,                     dimnames = list(paste0(\"Marker\", 1:10), paste0(\"Ind\", 1:3)))  # Filter markers with max genotype frequency < 0.95, heterozygosity between 0.1 and 0.8, # and minimum genotype frequency >= 0.05 filtered_data <- filter_geno_by_freq(geno_data, max_geno_freq = 0.95,                                      het_freq_range = c(0.1, 0.80), min_geno_freq = 0.05)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq_poly.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","title":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","text":"Filters polyploid genotype matrix based dosage frequencies across markers. Allows users define dosages count heterozygous apply constraints maximum/ minimum genotype frequencies heterozygous frequency ranges.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq_poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","text":"","code":"filter_geno_by_freq_poly(   geno_matrix,   max_geno_freq = NULL,   het_freq_range = NULL,   min_geno_freq = NULL,   het_dosages = c(1, 2, 3) )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq_poly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","text":"geno_matrix numeric genotype matrix data frame : Rows markers Columns individuals Values dosage values (e.g., 0 4 tetraploids) max_geno_freq Numeric. provided, removes markers frequent dosage exceeds value. het_freq_range Numeric vector length 2. Keeps markers heterozygosity frequency within range. min_geno_freq Numeric. provided, removes markers least frequent dosage falls value. het_dosages Integer vector dosage values treat \"heterozygous\" (e.g., c(1, 2, 3)).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq_poly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","text":"filtered genotype matrix containing markers meet criteria.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq_poly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","text":"Designed polyploid dosage matrices (raw genotype strings). Computes dosage frequencies per marker (row-wise). het_dosages used define heterozygosity generalizable way. diploids, simple: 0 = homozygous reference (e.g., \"AA\") 1 = heterozygous (e.g., \"AB\") 2 = homozygous alternate (e.g., \"BB\") \"1\" always heterozygous state. polyploids (e.g., tetraploids, hexaploids), can intermediate states. example, tetraploid: 0 = \"AAAA\" → homozygous ref 1 = \"AAAB\" 2 = \"AABB\" 3 = \"ABBB\" 4 = \"BBBB\" → homozygous alt","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq_poly.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","text":"function tested rigorously please contact author issues.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq_poly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(123) test_geno <- matrix(sample(0:4, 1000, replace = TRUE), nrow = 100, ncol = 10) rownames(test_geno) <- paste0(\"Marker\", 1:100) colnames(test_geno) <- paste0(\"Ind\", 1:10)  # Filter markers with max dosage freq < 0.7 and heterozygote freq between 0.2 and 0.8 filtered <- filter_geno_by_freq_poly(   test_geno,   max_geno_freq = 0.7,   het_freq_range = c(0.2, 0.8),   min_geno_freq = 0.05,   het_dosages = c(1, 2, 3) )  dim(filtered)  # Number of markers retained } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Genotype Matrix Based on Parental Genotype — filter_geno_by_parents","title":"Filter Genotype Matrix Based on Parental Genotype — filter_geno_by_parents","text":"filter_geno_by_parents filters genotype matrix retain homozygous polymorphic markers two specified parents. removes markers meet homozygous polymorphism criteria (P1 = 0 & P2 = 2 P1 = 2 & P2 = 0).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Genotype Matrix Based on Parental Genotype — filter_geno_by_parents","text":"","code":"filter_geno_by_parents(geno, parent1, parent2)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Genotype Matrix Based on Parental Genotype — filter_geno_by_parents","text":"geno genotype matrix data frame markers rows individuals columns. Must coercible data frame. parent1 Character. name column representing first parent. parent2 Character. name column representing second parent.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Genotype Matrix Based on Parental Genotype — filter_geno_by_parents","text":"filtered data frame containing markers homozygous polymorphic two parents.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_parents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Genotype Matrix Based on Parental Genotype — filter_geno_by_parents","text":"Retains markers parent1 0 parent2 2 (× B) parent1 2 parent2 0 (B × ). See methods section Braun et al. 2017  info marker types. Plant Genome Vol. 10 . 3.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_parents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Genotype Matrix Based on Parental Genotype — filter_geno_by_parents","text":"","code":"# Example genotype matrix geno_data <- data.frame(   Marker1 = c(0, 1, 2, 0, 2),   Marker2 = c(2, 0, 2, 1, 0),   Parent1 = c(0, 2, 2, 0, 2),   Parent2 = c(2, 0, 0, 2, 0) )  # Filter markers based on parents filtered_geno <- filter_geno_by_parents(geno_data, \"Parent1\", \"Parent2\") print(filtered_geno) #>   Marker1 Marker2 Parent1 Parent2 #> 1       0       2       0       2 #> 2       1       0       2       0 #> 3       2       2       2       0 #> 4       0       1       0       2 #> 5       2       0       2       0"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_missing_geno.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Markers or Individuals Based on Missing Genotype Data — filter_missing_geno","title":"Filter Markers or Individuals Based on Missing Genotype Data — filter_missing_geno","text":"helper function helps filter genotype matrix removing markers individuals exceed specified threshold. returns summary removed markers individuals filtered genotype matrix along missing data proportions.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_missing_geno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Markers or Individuals Based on Missing Genotype Data — filter_missing_geno","text":"","code":"filter_missing_geno(   geno_matrix,   threshold = 0.1,   filter_by = c(\"markers\", \"individuals\") )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_missing_geno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Markers or Individuals Based on Missing Genotype Data — filter_missing_geno","text":"geno_matrix numeric matrix : Rows represent genetic markers. Columns represent individuals. NA values indicate missing genotype data. threshold Numeric. maximum proportion missing data allowed marker individual removed. Default 0.10 (10% missing data). filter_by Character. Specifies whether filter \"markers\" (rows) \"individuals\" (columns). Must either \"markers\" \"individuals\". Default \"markers\".","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_missing_geno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Markers or Individuals Based on Missing Genotype Data — filter_missing_geno","text":"list following objects: \"filtered_geno\": genotype matrix filtering. \"pct_missing\": named numeric vector containing missing data proportions remaining markers individuals. \"removed_individuals\": log removed individuals (filter_by = \"individuals\"). \"removed_markers\": log removed markers (filter_by = \"markers\").","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_missing_geno.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Markers or Individuals Based on Missing Genotype Data — filter_missing_geno","text":"Ensures output retains matrix structure. Prints summary message showing many markers individuals removed.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_missing_geno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Markers or Individuals Based on Missing Genotype Data — filter_missing_geno","text":"","code":"# Example genotype matrix with missing values geno_data <- matrix(c(0, 1, NA, 2, 0, 1, NA, 2, NA, NA, 0, 1),                     nrow = 4, ncol = 3,                     dimnames = list(c(\"Marker1\", \"Marker2\", \"Marker3\", \"Marker4\"),                                     c(\"Ind1\", \"Ind2\", \"Ind3\")))  # Filter markers with more than 10% missing data result_markers <- filter_missing_geno(geno_data, threshold = 0.10, filter_by = \"markers\") #> 3 markers removed (Threshold: 0.1) print(result_markers$filtered_geno) #>         Ind1 Ind2 Ind3 #> Marker4    2    2    1  # Filter individuals with more than 10% missing data result_individuals <- filter_missing_geno(geno_data, threshold = 0.10, filter_by = \"individuals\") #> 3 individuals removed (Threshold: 0.1) print(result_individuals$filtered_geno) #>         #> Marker1 #> Marker2 #> Marker3 #> Marker4  # Example use # result <- filter_missing_geno(geno_data, threshold = 0.10, filter_by = \"individuals\")  # Access output # filtered_geno <- result$filtered_geno # missing_values <- result$missing_vector # removed <- result$removed"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/format_qtl_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Input Data for R/qtl package — format_qtl_input","title":"Format Input Data for R/qtl package — format_qtl_input","text":"function part heart package. format_qtl_input formats genotype, map, phenotype data QTL analysis R/qtl. allows user specify whether genotype data converted dosage ABH format used .","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/format_qtl_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Input Data for R/qtl package — format_qtl_input","text":"","code":"format_qtl_input(geno, map, pheno, numeric = TRUE)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/format_qtl_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Input Data for R/qtl package — format_qtl_input","text":"geno dataframe containing genotype data markers rows individuals columns. map dataframe containing genetic map columns: marker, chrom, position. pheno dataframe containing phenotype data ID column corresponding individual/sample names. numeric logical value (TRUE FALSE) indicating whether convert dosages R/qtl ABH format (default = TRUE).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/format_qtl_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Input Data for R/qtl package — format_qtl_input","text":"dataframe combining genotype, map, phenotype data R/qtl format  ready read.cross saving csv.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/format_qtl_input.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Format Input Data for R/qtl package — format_qtl_input","text":"Formats input data read.cross function R/qtl.","code":""},{"path":[]},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/format_qtl_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Input Data for R/qtl package — format_qtl_input","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage:  result <- format_qtl_input(geno2, map2, pheno2, numeric = TRUE)  # Write as CSV write.csv(result, file = \"formatted_qtl_data.csv\", row.names = FALSE)  # Read into a cross object (R/qtl) library(qtl) cross_data <- read.cross(format = \"csv\",                          file = \"formatted_qtl_data.csv\",                          genotypes = c(\"A\", \"H\", \"B\"),                          estimate.map = FALSE) } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Between Character (A, H, B) and Numeric dosage (0, 1, 2) Formats — formater","title":"Convert Between Character (A, H, B) and Numeric dosage (0, 1, 2) Formats — formater","text":"function converts genotype data character (\"\", \"H\", \"B\") numeric (0, 1, 2) formats. conversion direction controlled numeric_output argument.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Between Character (A, H, B) and Numeric dosage (0, 1, 2) Formats — formater","text":"","code":"formater(geno, numeric_output = TRUE)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Between Character (A, H, B) and Numeric dosage (0, 1, 2) Formats — formater","text":"geno data frame containing genotype data, values either \"\", \"H\", \"B\" 0, 1, 2. function assumes dataset consists entirely genotypic numeric values. numeric_output Logical. TRUE, converts \"\" → 0, \"H\" → 1, \"B\" → 2. FALSE, converts 0 → \"\", 1 → \"H\", 2 → \"B\". Default TRUE.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Between Character (A, H, B) and Numeric dosage (0, 1, 2) Formats — formater","text":"data frame structure geno, values converted based numeric_output parameter.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Between Character (A, H, B) and Numeric dosage (0, 1, 2) Formats — formater","text":"Preserves NA values conversion. Unexpected values (anything \"\", \"H\", \"B\", 0, 1, 2) converted NA.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Between Character (A, H, B) and Numeric dosage (0, 1, 2) Formats — formater","text":"","code":"# Example genotype data in character format geno_char <- data.frame(   Marker1 = c(\"A\", \"H\", \"B\"),   Marker2 = c(\"B\", \"A\", \"H\") )  # Convert character to numeric format geno_numeric <- formater(geno_char, numeric_output = TRUE) print(geno_numeric) #>   Marker1 Marker2 #> 1       0       2 #> 2       1       0 #> 3       2       1  # Convert numeric format back to character format geno_char_reversed <- formater(geno_numeric, numeric_output = FALSE) print(geno_char_reversed) #>   Marker1 Marker2 #> 1       A       B #> 2       H       A #> 3       B       H"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater_flex.html","id":null,"dir":"Reference","previous_headings":"","what":"Flexible Genotype Format Converter (Supports Polyploid Dosage) — formater_flex","title":"Flexible Genotype Format Converter (Supports Polyploid Dosage) — formater_flex","text":"Converts genotype data character string formats (e.g., \"AABB\", \"ABBB\") numeric dosage values (e.g., 0, 1, 2, 3) based user-defined reference alternative alleles. function designed handle diploid polyploid genotypes interpreting number occurrences alternative allele. especially useful genotype encodings represent dosage via string repetition (e.g., \"AAAB\" → 1 alt allele), reconstruct genotype strings numeric dosage values (e.g., 0 → \"AAAA\").","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater_flex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flexible Genotype Format Converter (Supports Polyploid Dosage) — formater_flex","text":"","code":"formater_flex(   geno,   to_numeric = TRUE,   ref_allele = \"A\",   alt_allele = \"B\",   ploidy = 2 )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater_flex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flexible Genotype Format Converter (Supports Polyploid Dosage) — formater_flex","text":"geno data frame containing genotype values. Values must either character strings representing genotypes (e.g., \"AAAA\", \"AAAB\", \"BBBB\"), numeric dosage values (e.g., 0 ploidy). to_numeric Logical. TRUE, converts character genotypes numeric dosage counting number alt_allele occurrences. FALSE, reconstructs genotype strings numeric dosage values using specified ref_allele alt_allele. ref_allele Character. reference allele. used define \"zero dosage\" baseline reconstructing character genotypes numeric dosage (e.g., \"\" \"AAAB\"). alt_allele Character. alternative allele. Dosage computed count allele genotype string (e.g., \"B\" \"AAAB\" → dosage = 1). ploidy Integer. Ploidy level organism. used to_numeric = FALSE determine many reference alternative alleles paste together reconstructing genotype strings.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater_flex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flexible Genotype Format Converter (Supports Polyploid Dosage) — formater_flex","text":"data frame structure geno, genotypes converted according to_numeric setting.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater_flex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flexible Genotype Format Converter (Supports Polyploid Dosage) — formater_flex","text":"to_numeric = TRUE, values geno must character strings, function count number occurrences alt_allele using stringr::str_count(). Missing values (NA) preserved. to_numeric = FALSE, values geno must numeric dosages 0 ploidy, inclusive. function reconstruct character genotype strings repeating ref_allele alt_allele appropriate number times. example, ploidy = 4, dosage 2 becomes \"AABB\". Values outside expected range (e.g., dosage > ploidy unknown characters) converted NA.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater_flex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flexible Genotype Format Converter (Supports Polyploid Dosage) — formater_flex","text":"","code":"# Example 1: Character to numeric (tetraploid) if (FALSE) { # \\dontrun{ geno <- data.frame(   Marker1 = c(\"AAAA\", \"AAAB\", \"AABB\", \"ABBB\", \"BBBB\"),   Marker2 = c(\"AAAB\", \"AABB\", \"ABBB\", \"BBBB\", NA) ) formater_flex(geno, to_numeric = TRUE, ref_allele = \"A\", alt_allele = \"B\") } # } # Example 2: Numeric to character (tetraploid)  if (FALSE) { # \\dontrun{ dosage <- data.frame(   Marker1 = c(0, 1, 2, 3, 4),   Marker2 = c(1, 2, 3, 4, NA) ) formater_flex(dosage, to_numeric = FALSE, ref_allele = \"A\", alt_allele = \"B\", ploidy = 4) } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Genotype Frequency Per Individual or Marker — freq","title":"Calculate Genotype Frequency Per Individual or Marker — freq","text":"freq calculates relative frequency genotype classes (usually \"\", \"H\", \"B\" \"0\", \"1\", \"2\") individual marker genotype matrix. function transposes matrix process individuals markers needed, computes relative frequency genotype, fills missing genotype categories frequent genotype. Proportions calculated based non-missing values. Results may biased missing data high. Use filter_missing_geno previously data high proportion missingness.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Genotype Frequency Per Individual or Marker — freq","text":"","code":"freq(x, input_format = \"numeric\", by = \"markers\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Genotype Frequency Per Individual or Marker — freq","text":"x genotype matrix markers rows individuals columns. input_format Character. Specifies genotype format. Options: \"numeric\" (default): Uses 0, 1, 2 genotype categories. \"genotype\": Uses \"\", \"H\", \"B\" genotype categories. Character. Specifies whether calculate genotype frequencies \"markers\" (rows) \"individuals\" (columns). Default \"markers\".","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Genotype Frequency Per Individual or Marker — freq","text":"data frame rows correspond markers individuals, columns correspond genotype categories. Values represent relative genotype frequencies, calculated based non-missing values.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Genotype Frequency Per Individual or Marker — freq","text":"","code":"# Example genotype matrix (numeric format) geno_matrix <- matrix(c(0,1,2,1,0,2,1,2,0,1,1,1,2,0,2),                       nrow = 5, ncol = 3,                       dimnames = list(c(\"M1\", \"M2\", \"M3\", \"M4\", \"M5\"),                                       c(\"Ind1\", \"Ind2\", \"Ind3\")))  # Compute genotype frequency by markers freq(geno_matrix, input_format = \"numeric\", by = \"markers\") #>            0         1         2 #> M1 0.3333333 0.3333333 0.3333333 #> M2 0.0000000 1.0000000 0.0000000 #> M3 0.0000000 0.0000000 1.0000000 #> M4 0.6666667 0.3333333 0.0000000 #> M5 0.3333333 0.3333333 0.3333333  # Compute genotype frequency by individuals freq(geno_matrix, input_format = \"numeric\", by = \"individuals\") #>        0   1   2 #> Ind1 0.4 0.4 0.2 #> Ind2 0.2 0.4 0.4 #> Ind3 0.2 0.4 0.4"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/frequency_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Histogram of Genotype Frequencies — frequency_plot","title":"Generate a Histogram of Genotype Frequencies — frequency_plot","text":"function creates histogram genotype frequencies genotype category (e.g., \"0\", \"1\", \"2\") based frequency data frame. function also returns processed long-format data attribute. work data , H, B format. Use formater change dosage using frequency_plot.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/frequency_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Histogram of Genotype Frequencies — frequency_plot","text":"","code":"frequency_plot(freq_df)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/frequency_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Histogram of Genotype Frequencies — frequency_plot","text":"freq_df Usually output freq. data frame rows represent markers individuals, columns represent genotype categories frequencies.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/frequency_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Histogram of Genotype Frequencies — frequency_plot","text":"ggplot2 histogram visualizing distribution genotype frequencies. processed long-format data attached attribute (attr(output, \"data\")).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/frequency_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Histogram of Genotype Frequencies — frequency_plot","text":"Converts input data frame long format using pivot_longer(). Ensures correct ordering genotype categories. Generates faceted histogram panel represents genotype category. Stores generated plot processed data returns plot default.","code":""},{"path":[]},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/frequency_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Histogram of Genotype Frequencies — frequency_plot","text":"","code":"# Example frequency data frame freq_data <- data.frame(   `0` = c(0.2, 0.3, 0.4),   `1` = c(0.5, 0.4, 0.4),   `2` = c(0.3, 0.3, 0.2),   row.names = c(\"Marker1\", \"Marker2\", \"Marker3\") )  # Generate the frequency histogram p <- frequency_plot(freq_data) print(p)  # Display the plot #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Access the processed long-format data attr(p, \"data\") #> # A tibble: 9 × 3 #>   Marker  Dosage Frequency #>   <chr>   <fct>      <dbl> #> 1 Marker1 NA           0.2 #> 2 Marker1 NA           0.5 #> 3 Marker1 NA           0.3 #> 4 Marker2 NA           0.3 #> 5 Marker2 NA           0.4 #> 6 Marker2 NA           0.3 #> 7 Marker3 NA           0.4 #> 8 Marker3 NA           0.4 #> 9 Marker3 NA           0.2"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/get_LOD_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Get LOD Support Intervals for QTL Peaks (Single or Multiple Traits) — get_LOD_int","title":"Get LOD Support Intervals for QTL Peaks (Single or Multiple Traits) — get_LOD_int","text":"Computes LOD support intervals detected QTLs scanone cim.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/get_LOD_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get LOD Support Intervals for QTL Peaks (Single or Multiple Traits) — get_LOD_int","text":"","code":"get_LOD_int(cross_obj, model_obj, results_obj, trait = NULL, drop = 1.5)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/get_LOD_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get LOD Support Intervals for QTL Peaks (Single or Multiple Traits) — get_LOD_int","text":"cross_obj cross object qtl package. Usually output read.cross calc.genoprob. model_obj Either scanone/CIM object (class \"scanone\") named list objects. Usuall output cim scanone qtl. results_obj Either data frame QTL results (\"chr\" \"pos\") named list data frames. trait Optional. Name trait analyze. Required model_obj results_obj lists (.e., working multiple traits). drop Numeric. LOD drop define support interval (default = 1.5).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/get_LOD_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get LOD Support Intervals for QTL Peaks (Single or Multiple Traits) — get_LOD_int","text":"named list QTL interval summaries, flanking markers, peak marker (pseudo marker physical marker), usable marker (closest physical marker peak pseudo marker).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/get_LOD_int.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get LOD Support Intervals for QTL Peaks (Single or Multiple Traits) — get_LOD_int","text":"Works either single model qtl results list models results multiple traits.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/get_LOD_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get LOD Support Intervals for QTL Peaks (Single or Multiple Traits) — get_LOD_int","text":"","code":"if (FALSE) { # \\dontrun{ # Multiple traits: # For the length-width trait lw_result_pop1 <- get_LOD_int(   cross_obj = M1,   model_obj = cim_qtl_results1,   results_obj = results_pop1,   trait = \"length_width_ratio\",   drop = 1.5 )  # Single traits: mod <- cim_qtl_results1[[\"length_width_ratio\"]] res <- results_pop1[[\"length_width_ratio\"]]  single <- get_LOD_int(   cross_obj = M1,   model_obj = mod,   results_obj = res ) } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/haplotype_reconstruction.html","id":null,"dir":"Reference","previous_headings":"","what":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","title":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","text":"function performs haplotype reconstruction using Hidden Markov Model (HMM). applies Viterbi algorithm infer likely sequence true genotypic states, accounting genotyping errors missing data.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/haplotype_reconstruction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","text":"","code":"haplotype_reconstruction(geno_matrix, error_rate = 0.05, r = 0.01)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/haplotype_reconstruction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","text":"geno_matrix numeric genotype matrix : Rows represent genetic markers. Columns represent progeny (individuals). Values expected 0, 1, 2, NA missing data. error_rate Numeric. assumed genotyping error rate. Default 0.05 (5% error rate). r Numeric. recombination rate used transition probability matrix (T.mat). Default 0.01. user can use MLEL function MapRtools get estimate recombination frequency adjacent argument set TRUE result <- MLEL(geno = geno_matrix, pop.type = \"f2\", LOD = FALSE, adjacent = TRUE) case geno_matrix one chromosome. r estimated mean(result$value, na.rm = TRUE)","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/haplotype_reconstruction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","text":"genotype matrix inferred haplotypes based HMM correction.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/haplotype_reconstruction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","text":"Estimates missing data rate input genotype matrix. Initializes HMM using: Three hidden states (\"0\", \"1\", \"2\"). Four observable symbols (\"0\", \"1\", \"2\", \"NA\" missing data). Transition probabilities generated via T.mat(r = r), using user-defined recombination rate. Emission probabilities computed using E.mat(error = error_rate, missing = missing).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/haplotype_reconstruction.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","text":"Works F2 populations experimental crosses. Based 615 Genetic Mapping Class notes Prof. Jeffrey Endelman. Spring 2021.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/haplotype_reconstruction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","text":"","code":"if (FALSE) { # \\dontrun{ # Example genotype matrix with missing values geno_data <- matrix(c(0, 1, NA, 2, 0, 1, NA, 2, NA, NA, 0, 1),                     nrow = 4, ncol = 3,                     dimnames = list(c(\"Marker1\", \"Marker2\", \"Marker3\", \"Marker4\"),                                     c(\"Ind1\", \"Ind2\", \"Ind3\")))  # Perform haplotype reconstruction with default parameters reconstructed_geno <- haplotype_reconstruction(geno_data) print(reconstructed_geno)  # Perform haplotype reconstruction with a modified recombination rate reconstructed_geno_custom_r <- haplotype_reconstruction(geno_data, error_rate = 0.05, r = 0.02) print(reconstructed_geno_custom_r) } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/melt_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert (Melt) Genotype Frequency Data to Long Format — melt_freq","title":"Convert (Melt) Genotype Frequency Data to Long Format — melt_freq","text":"Transforms genotype frequency data frame wide format (genotype categories columns) long format, making easier use ggplot2 tidyverse functions. Works well freq data visualization.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/melt_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert (Melt) Genotype Frequency Data to Long Format — melt_freq","text":"","code":"melt_freq(freq_df)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/melt_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert (Melt) Genotype Frequency Data to Long Format — melt_freq","text":"freq_df Usually output freq. data frame rows represent markers individuals,  columns represent genotype categories frequencies.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/melt_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert (Melt) Genotype Frequency Data to Long Format — melt_freq","text":"data frame long format three columns: \"Marker\": marker individual ID. \"Dosage\": genotype category. \"Frequency\": relative frequency genotype category.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/melt_freq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert (Melt) Genotype Frequency Data to Long Format — melt_freq","text":"Uses tibble::rownames_to_column() preserve marker individual names. Reshapes data using pivot_longer() tidyverse. Ideal visualization ggplot2 data analysis genotype frequencies marker individual.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/melt_freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert (Melt) Genotype Frequency Data to Long Format — melt_freq","text":"","code":"# Example frequency data frame freq_data <- data.frame(   `0` = c(0.2, 0.3, 0.4),   `1` = c(0.5, 0.4, 0.4),   `2` = c(0.3, 0.3, 0.2),   row.names = c(\"Marker1\", \"Marker2\", \"Marker3\") )  # Convert to long format melt_freq(freq_data) #> # A tibble: 9 × 3 #>   Marker  Dosage Frequency #>   <chr>   <chr>      <dbl> #> 1 Marker1 X0           0.2 #> 2 Marker1 X1           0.5 #> 3 Marker1 X2           0.3 #> 4 Marker2 X0           0.3 #> 5 Marker2 X1           0.4 #> 6 Marker2 X2           0.3 #> 7 Marker3 X0           0.4 #> 8 Marker3 X1           0.4 #> 9 Marker3 X2           0.2"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/order_and_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize Marker Order — order_and_plot","title":"Optimize Marker Order — order_and_plot","text":"order_and_plot optimizes marker order (trimmed) genotype matrix using recombination frequency (RF) matrices. performs multiple iterations marker ordering, selects best order based smallest Sum Adjusted Recombination Fractions (SARF), generates visualizations marker order. function uses MLEL() order_markers() Professor Jeffrey Endelman's MapRtools streamlines process. workflow easier user dealing multiple chromosomes. MapRtools.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/order_and_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize Marker Order — order_and_plot","text":"","code":"order_and_plot(   trimmed_geno,   pop.type = \"F2\",   CHR = NULL,   n.iter = 6,   prop = NULL )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/order_and_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize Marker Order — order_and_plot","text":"trimmed_geno genotype matrix : Rows represent markers. Columns represent individuals. output trim_LG genotype matrix. pop.type Character. population type used ordering markers. Default \"F2\". order_and_plot work following \"DH\",\"BC\",\"F2\",\"S1\",\"RIL.self\",\"RIL.sib\". Based MapRtools::MLEL() CHR Character (optional). chromosome identifier labeling plots. n.iter Integer. number iterations marker ordering. Default 6. prop Numeric. proportion individuals include genotype plot. Must 0 1. Default 0.20 (20% individuals). individuals included visualization quality drops.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/order_and_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize Marker Order — order_and_plot","text":"list containing: \"original_geno\": original genotype matrix. \"ordered_geno\": optimized genotype matrix markers reordered. \"order_plot\": ggplot2 object displaying original vs. optimized marker order. \"haplotype_plot\": ggplot2 object showing genotype haplotype plot.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/order_and_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimize Marker Order — order_and_plot","text":"Computes RF matrix using MLEL(), orders markers iteratively. Runs order_markers() n.iter times selects order smallest SARF. order_markers() Order markers solving traveling salesperson problem. Plots original vs. optimized marker order. Generates genotype haplotype plot subset individuals (prop). CHR provided, adds chromosome label plots.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/order_and_plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Optimize Marker Order — order_and_plot","text":"function refined assistance ChatGPT improve clarity, efficiency, visualization formatting.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plotMap_gg.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Genetic Map Using ggplot2 in R/qtl data environment — plotMap_gg","title":"Plot Genetic Map Using ggplot2 in R/qtl data environment — plotMap_gg","text":"function generates genetic linkage map visualization using ggplot2. plots chromosomes vertical horizontal lines displays markers colored segments along chromosome using data structure built R/qtl. Replaces plotMap uses base R.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plotMap_gg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Genetic Map Using ggplot2 in R/qtl data environment — plotMap_gg","text":"","code":"plotMap_gg(map, horizontal = FALSE, color = NULL)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plotMap_gg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Genetic Map Using ggplot2 in R/qtl data environment — plotMap_gg","text":"map cross object representing genetic map. output R/qtl's read.cross(), jittermap() calc.genoprob() cross object, function extracts map using pull.map(). horizontal Logical. TRUE, map plotted chromosomes arranged horizontally. Default FALSE (vertical layout). color Character. color marker segments. Default \"red\" NULL.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plotMap_gg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Genetic Map Using ggplot2 in R/qtl data environment — plotMap_gg","text":"ggplot2 object displaying genetic map.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plotMap_gg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Genetic Map Using ggplot2 in R/qtl data environment — plotMap_gg","text":"","code":"# Default plot (vertical) # plotMap_gg(example_map)  # Horizontal plot with custom color # plotMap_gg(example_map, horizontal = TRUE, color = \"blue\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Genome-wide Coverage — plot_coverage","title":"Plot Genome-wide Coverage — plot_coverage","text":"Generates genome-wide coverage plot, displaying positions markers across chromosomes. customized version plot_coverage MapRtools allows additional aesthetic modifications.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Genome-wide Coverage — plot_coverage","text":"","code":"plot_coverage(map, limits = NULL, customize = TRUE)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Genome-wide Coverage — plot_coverage","text":"map data frame two columns: \"chrom\": Chromosome identifier (e.g., \"CHR1\", \"CHR2\", ...\"). \"position\": genomic position markers (base pairs). limits (Optional) data frame specifying maximum position chromosome. NULL (default), function computes chromosome limits map. customize Logical. TRUE, applies additional visual customizations. Default TRUE.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Genome-wide Coverage — plot_coverage","text":"ggplot2 object representing genome-wide coverage.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_coverage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Genome-wide Coverage — plot_coverage","text":"Converts genomic positions base pairs megabases (Mb). limits provided, function calculates maximum position chromosome map. Orders chromosomes positions correctly visualization. Uses geom_segment() generate chromosome-wide coverage plot. customize = TRUE, applies minimalistic theme enhanced visualization.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_coverage.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot Genome-wide Coverage — plot_coverage","text":"Inspired functions Professor Jeffrey Endelman's MapRtools","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_coverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Genome-wide Coverage — plot_coverage","text":"","code":"# Example dataset map_data <- data.frame(   chrom = c(\"CHR1\", \"CHR1\", \"CHR2\", \"CHR2\", \"CHR3\"),   position = c(500000, 1200000, 800000, 1600000, 2000000) )  # Basic coverage plot plot_coverage(map_data)   # Coverage plot with custom aesthetics plot_coverage(map_data, customize = TRUE)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_genotype_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Histogram of Genotypic Values — plot_genotype_histogram","title":"Plot a Histogram of Genotypic Values — plot_genotype_histogram","text":"Generates histogram genotypic values (0, 1, 2) genotype matrix shows distribution genotypic classes.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_genotype_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Histogram of Genotypic Values — plot_genotype_histogram","text":"","code":"plot_genotype_histogram(ans)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_genotype_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Histogram of Genotypic Values — plot_genotype_histogram","text":"ans genotype matrix data frame : Rows correspond markers. Columns correspond individuals. Values numeric genotypes (0, 1, 2).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_genotype_histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Histogram of Genotypic Values — plot_genotype_histogram","text":"ggplot2 histogram object.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_genotype_histogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Histogram of Genotypic Values — plot_genotype_histogram","text":"","code":"# Example genotype matrix geno_matrix <- matrix(   sample(0:2, 30, replace = TRUE),   nrow = 10, ncol = 3,   dimnames = list(paste0(\"Marker\", 1:10), paste0(\"Ind\", 1:3)) )  # Generate and display the histogram hist_plot <- plot_genotype_histogram(geno_matrix) print(hist_plot)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_marey.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Marey Plot for one Chromosome — plot_marey","title":"Generate a Marey Plot for one Chromosome — plot_marey","text":"function creates Marey plot, visualizes relationship physical position (megabases) genetic distance (centimorgans) single chromosome.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_marey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Marey Plot for one Chromosome — plot_marey","text":"","code":"plot_marey(map, chrom)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_marey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Marey Plot for one Chromosome — plot_marey","text":"map data frame containing marker mapping information least following columns: \"position_Mb\": Physical position markers (base pairs). \"position_cM\": Genetic distance centimorgans (cM). chrom Character numeric. chromosome identifier displayed plot title.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_marey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Marey Plot for one Chromosome — plot_marey","text":"ggplot2 scatter plot showing Marey plot.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_marey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Marey Plot for one Chromosome — plot_marey","text":"","code":"if (FALSE) { # \\dontrun{ # Example map data example_map <- data.frame(   position = c(1000000, 5000000, 10000000, 20000000, 30000000),   p20 = c(0, 5, 10, 20, 30) )  # Generate Marey plot for Chromosome 1 plot_marey(example_map, chrom = 1) } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_qtl_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a line plot showing QTL traces (LOD scores) across chromosomes for one or more traits. Supports customization of visual appearance and annotations such as significance thresholds and vertical lines. — plot_qtl_trace","title":"Generates a line plot showing QTL traces (LOD scores) across chromosomes for one or more traits. Supports customization of visual appearance and annotations such as significance thresholds and vertical lines. — plot_qtl_trace","text":"Generates line plot showing QTL traces (LOD scores) across chromosomes one traits. Supports customization visual appearance annotations significance thresholds vertical lines.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_qtl_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a line plot showing QTL traces (LOD scores) across chromosomes for one or more traits. Supports customization of visual appearance and annotations such as significance thresholds and vertical lines. — plot_qtl_trace","text":"","code":"plot_qtl_trace(   qtl_df,   thresholds_df,   vline_df = NULL,   use_physical_pos = FALSE,   x_angle = 0,   trait_colors = NULL,   trait_labels = NULL,   x_label = \"Position (cM)\",   y_label = \"LOD\",   plot_title = NULL,   show_legend = TRUE,   facet_nrow = 1 )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_qtl_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a line plot showing QTL traces (LOD scores) across chromosomes for one or more traits. Supports customization of visual appearance and annotations such as significance thresholds and vertical lines. — plot_qtl_trace","text":"qtl_df data frame containing QTL mapping results. Must include columns: pos (genetic position cM), lod (LOD score), response_var (trait name), chr (chromosome). Optional phys.pos (physical position Mb). thresholds_df data frame LOD score thresholds per trait. Must include columns: chr, hline, response_var. vline_df Optional. data frame specifying positions vertical lines. Must include chr vline columns. Can also include label column text annotation vertical line. use_physical_pos Logical. TRUE, use physical position (phys.pos) x-axis. FALSE (default), use genetic position (pos). x_angle Integer. Angle x-axis text labels (default 0). trait_colors Optional. named vector colors trait. NULL (default), colors automatically assigned. trait_labels Optional. named vector human-readable trait labels (can include expressions) use legend. x_label Character. Label x-axis (default \"Position (cM)\"). y_label Character. Label y-axis (default \"LOD\"). plot_title Optional. Title plot (default NULL). show_legend Logical. Whether display legend (defaults TRUE). facet_nrow Integer. Number rows facet layout (defaults 1).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_qtl_trace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a line plot showing QTL traces (LOD scores) across chromosomes for one or more traits. Supports customization of visual appearance and annotations such as significance thresholds and vertical lines. — plot_qtl_trace","text":"ggplot object displaying QTL traces per trait chromosome, optional custom styling.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_reconstructed_haplo.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Haplotype Reconstruction Results Before and After HMM — plot_reconstructed_haplo","title":"Plot Haplotype Reconstruction Results Before and After HMM — plot_reconstructed_haplo","text":"plot_reconstructed_haplo visualizes genotype data HMM-based haplotype reconstruction specified set individuals. uses MapRtools::plot_geno() visualization appends informative titles based chromosome name.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_reconstructed_haplo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Haplotype Reconstruction Results Before and After HMM — plot_reconstructed_haplo","text":"","code":"plot_reconstructed_haplo(original, processed, individuals = 1:50)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_reconstructed_haplo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Haplotype Reconstruction Results Before and After HMM — plot_reconstructed_haplo","text":"original genotype matrix haplotype reconstruction. Rows represent markers, columns represent individuals. processed genotype matrix HMM-based haplotype reconstruction. must dimensions original. individuals numeric vector specifying indices individuals (columns) plot. Default 1:50. values must within column range input matrices.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_reconstructed_haplo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Haplotype Reconstruction Results Before and After HMM — plot_reconstructed_haplo","text":"list two ggplot objects: p1 Genotype plot HMM, titled chromosome name \"HMM\". p2 Genotype plot HMM, titled chromosome name \"HMM\".","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_reconstructed_haplo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Haplotype Reconstruction Results Before and After HMM — plot_reconstructed_haplo","text":"function uses extract_map() geneticMapR infer chromosome name original genotype matrix, used annotate plots. matrices expected compatible MapRtools::plot_geno().","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_reconstructed_haplo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Haplotype Reconstruction Results Before and After HMM — plot_reconstructed_haplo","text":"","code":"if (FALSE) { # \\dontrun{ original_geno <- example_original processed_geno <- example_processed plots <- plot_reconstructed_haplo(original = original_geno,                                   processed = processed_geno,                                   individuals = 1:30) plots$p1  # View plot before HMM plots$p2  # View plot after HMM } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/qtl_example.html","id":null,"dir":"Reference","previous_headings":"","what":"QTL Dataset Example — qtl_example","title":"QTL Dataset Example — qtl_example","text":"list containing QTL LOD scores, thresholds, vline (annotation) data demonstrating functions geneticMapR. also include colors character vector labels publication ready plots.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/qtl_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTL Dataset Example — qtl_example","text":"","code":"qtl_example"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/qtl_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"QTL Dataset Example — qtl_example","text":"list elements: qtl_df scanone data.frame class object containing LOD scores loci map 7 trauts thresholds scanone dara.frame class object containing significant thresholds variable vline data frame information plot annotation colors vector custom colors plot customization labes vector publication ready labels plot customization","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/qtl_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"QTL Dataset Example — qtl_example","text":"author's QTL analysis using R/qtl Table beet shape mapping population (F2).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/recode.html","id":null,"dir":"Reference","previous_headings":"","what":"Phase Genotype Marker Data Based on Parental References — recode","title":"Phase Genotype Marker Data Based on Parental References — recode","text":"recode heart package. powerful function phases genotype marker data based two parental references (parent1 parent2). phases markers according parental allele inheritance. Optionally, can code phased markers numeric (0, 1, 2) character (\"\", \"B\", \"H\") formats. Numeric coding recommended downstream analyses.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phase Genotype Marker Data Based on Parental References — recode","text":"","code":"recode(   geno,   parent1,   parent2,   numeric_output = TRUE,   handle_het_markers = FALSE,   het_marker_types = NULL )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/recode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Phase Genotype Marker Data Based on Parental References — recode","text":"geno genotype matrix data frame markers rows individuals columns. parent1 Character. name column representing first parent. parent2 Character. name column representing second parent. numeric_output Logical. TRUE, converts phased markers numeric dosage values (= 0, H = 1, B = 2). Default TRUE. handle_het_markers Logical. TRUE, allows heterozygous parent markers included. Default FALSE. het_marker_types Character vector. Specifies heterozygous markers keep handle_het_markers = TRUE. Options include \"AxH\", \"HxB\", \"HxA\", \"BxH\". Default NULL, meaning homozygous markers kept. See details.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/recode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Phase Genotype Marker Data Based on Parental References — recode","text":"data frame containing phased genotype markers : \"0\" represents alleles inherited parent1. \"2\" represents alleles inherited parent2. \"1\" represents heterozygous alleles. numeric_output = FALSE,   0, 2, 1, replaced \"\", \"B\", \"H\" respectively. numeric_output = TRUE recommended.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/recode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Phase Genotype Marker Data Based on Parental References — recode","text":"Drops markers either parent NA. Removes non-polymorphic markers (markers parents genotype). handle_het_markers = FALSE, retains homozygous marker dosages follows: (P1 = 0 & P2 = 2 P1 = 2 & P2 = 0) handle_het_markers = TRUE, allows heterozygous markers kept. Ensures parent1 always 0 specific heterozygous markers kept. Ensures parent1 always 0 parent2 always 2 standardization. Returns numeric matrix numeric_output = TRUE, otherwise returns phased \"\", \"B\", \"H\" values. details heterozygous F2 marker types (\"AxH\", \"HxB\", \"HxA\", \"BxH\") Braun et al. (2017).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/recode.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Phase Genotype Marker Data Based on Parental References — recode","text":"function refined assistance ChatGPT improve clarity, efficiency, visualization formatting. Extensive testing performed author verify outputs.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/recode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Phase Genotype Marker Data Based on Parental References — recode","text":"","code":"# Example genotype data geno_data <- data.frame(   Marker1 = c(0, 1, 2, 0, 2),   Marker2 = c(2, 0, 2, 1, 0),   Parent1 = c(0, 2, 2, 0, 2),   Parent2 = c(2, 0, 0, 2, 0) )  # Recode genotype markers (default: numeric output) phased_geno <- recode(geno_data, \"Parent1\", \"Parent2\") print(phased_geno) #>   Marker1 Marker2 Parent1 Parent2 #> 1       0       2       0       2 #> 2       1       2       0       2 #> 3       0       0       0       2 #> 4       0       1       0       2 #> 5       0       2       0       2  # Recode genotype markers with heterozygous marker handling phased_geno_het <- recode(geno_data, \"Parent1\", \"Parent2\",                           handle_het_markers = TRUE,                           het_marker_types = c(\"AxH\", \"HxB\")) print(phased_geno_het) #>   Marker1 Marker2 Parent1 Parent2 #> 1       0       2       0       2 #> 2       1       2       0       2 #> 3       0       0       0       2 #> 4       0       1       0       2 #> 5       0       2       0       2"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/rename_geno_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Parents, F1, and F2 Individuals in a Genotype Matrix — rename_geno_matrix","title":"Rename Parents, F1, and F2 Individuals in a Genotype Matrix — rename_geno_matrix","text":"function standardizes column names genotype matrix renaming parental genotypes (P1, P2), F1 individuals (F1.1, F1.2, ...), F2 individuals (F2.1, F2.2, ...). renaming helps reduce name size exchange consistent labeling system dendrogram visualization constrains","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/rename_geno_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename Parents, F1, and F2 Individuals in a Genotype Matrix — rename_geno_matrix","text":"","code":"rename_geno_matrix(geno, parent1, parent2, f1)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/rename_geno_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename Parents, F1, and F2 Individuals in a Genotype Matrix — rename_geno_matrix","text":"geno genotype matrix data frame : Rows represent genetic markers. Columns represent individuals (parents, F1, F2). parent1 Character. column name corresponding first parent. parent2 Character. column name corresponding second parent. f1 Character vector. column names corresponding F1 individuals.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/rename_geno_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename Parents, F1, and F2 Individuals in a Genotype Matrix — rename_geno_matrix","text":"genotype matrix updated column names: \"P1\" parent1. \"P2\" parent2. \"F1.1\", \"F1.2\", ... F1 individuals. \"F2.1\", \"F2.2\", ... individuals.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/rename_geno_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename Parents, F1, and F2 Individuals in a Genotype Matrix — rename_geno_matrix","text":"","code":"# Example genotype matrix geno_matrix <- matrix(sample(0:2, 30, replace = TRUE),                       nrow = 5, ncol = 6,                       dimnames = list(                         paste0(\"Marker\", 1:5),                         c(\"ParentA-Plate1-WellAH\", \"ParentB-Plate2-WellAJ\",                         \"F1abc\", \"F1bcd\", \"Ind1\", \"Ind2\")                       ))  # Rename genotype matrix renamed_geno <- rename_geno_matrix(geno_matrix,                                     parent1 = \"ParentA\",                                     parent2 = \"ParentB\",                                     f1 = c(\"F1abc\", \"F1bcd\"))  # Print renamed genotype matrix print(colnames(renamed_geno)) #> [1] \"F2.1\" \"F2.2\" \"F1.1\" \"F1.2\" \"F2.3\" \"F2.4\""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simple_effect_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Effect Plot — simple_effect_plot","title":"Simple Effect Plot — simple_effect_plot","text":"Generates clean simple effect plot. Shows relationship genotype classes marker trait. Optionally includes annotation medians sample sizes, allows flipping axes. Works polyploids.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simple_effect_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Effect Plot — simple_effect_plot","text":"","code":"simple_effect_plot(   effects_df,   marker_name,   trait_name,   genotype_levels = c(\"A\", \"H\", \"B\"),   annotate = TRUE,   flip = FALSE,   trait_label = NULL )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simple_effect_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Effect Plot — simple_effect_plot","text":"effects_df data frame containing least columns marker genotypes trait values. Usually output format_qtl_inputwith modifications (first two rows removed). marker_name character string specifying name marker column effects_df. trait_name character string specifying name trait column effects_df. genotype_levels character vector indicating expected genotype categories (factor levels). Default c(\"\", \"H\", \"B\"). annotate Logical; TRUE, plot includes annotations median values sample sizes per genotype. Default TRUE. flip Logical; TRUE, coordinates plot flipped (horizontal layout). Default FALSE. trait_label Optional character string use y-axis label. NULL, trait name used.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simple_effect_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Effect Plot — simple_effect_plot","text":"ggplot2 object displaying distribution trait values across genotype classes (alleles) specified marker.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simple_effect_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple Effect Plot — simple_effect_plot","text":"function performs following: Verifies presence marker trait columns input data frame. Removes rows missing genotype data. Converts marker column factor specified genotype levels. Creates boxplot optional annotations median values counts. Optionally flips plot horizontally.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simple_effect_plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simple Effect Plot — simple_effect_plot","text":"Inspired  Fig. 2  Caraza-Harter & Endelman","code":""},{"path":[]},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simulated_geno.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Simple Genotype Matrix Dataset — simulated_geno","title":"Simulated Simple Genotype Matrix Dataset — simulated_geno","text":"dataset contains sample genotype matrix demonstration geneticMapR functions.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simulated_geno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Simple Genotype Matrix Dataset — simulated_geno","text":"","code":"simulated_geno"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simulated_geno.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Simple Genotype Matrix Dataset — simulated_geno","text":"data frame 6 rows 5 variables: Parent1 Parent1 genotype dosage ALT allele (numeric) Parent2 Parent2 genotype dosage ALT allele (numeric) F2_1 Progeny genotype dosage ALT allele (numeric) F2_2 Genotype F2 individual 2 F2_3 Genotype F2 individual 3","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simulated_geno.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated Simple Genotype Matrix Dataset — simulated_geno","text":"Simulated data internal use.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/trim_LG.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim Linkage Groups Based on LOD Thresholds — trim_LG","title":"Trim Linkage Groups Based on LOD Thresholds — trim_LG","text":"trim_LG  interactive function helps user filter markers within specified chromosome based linkage group (LG) assignment using LOD score thresholds. trim_LG  make process easy allowing user choose thresholds interactively, visualize haplotype frequency filtering,  remove outliers. Inspired functions Professor Jeffrey B. Endelman's MapRtools available Github. trim_LG provides simple interphase trimming LGs easily.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/trim_LG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim Linkage Groups Based on LOD Thresholds — trim_LG","text":"","code":"trim_LG(   chromosome,   map,   geno,   pop_type = \"F2\",   drop_outliers = TRUE,   n_cores = NULL )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/trim_LG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim Linkage Groups Based on LOD Thresholds — trim_LG","text":"chromosome Character. chromosome ID processed. map data frame containing marker map information least following columns: \"marker\": Marker names. \"chrom\": Chromosome identifier. \"position\": Physical position markers. geno genotype matrix : Rows represent genetic markers. Columns represent individuals. Values represent genotype calls. Preferably, binned genotype matrix. Binning can performed using MapRtools::LDbin. pop_type Character. population type used linkage estimation. Default \"F2\". work following \"DH\",\"BC\",\"F2\",\"S1\",\"RIL.self\",\"RIL.sib\". Based MapRtools::MLEL() drop_outliers Logical. TRUE, removes markers identified outliers based haplotype frequency. Default TRUE. n_cores Integer. number CPU cores use linkage estimation. NULL, function selects maximum available minus one.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/trim_LG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim Linkage Groups Based on LOD Thresholds — trim_LG","text":"list containing: \"trimmed_genotype\": filtered genotype matrix. \"final_map\": updated marker map filtering. \"initial_haplo_plot\": ggplot2 object showing initial haplotype plot. \"filtered_freq_plot\": ggplot2 object showing haplotype plot filtering. \"final_freq_plot\": ggplot2 object showing haplotype frequency removing outliers. \"starting_LOD\": record user-specified initial LOD threshold. \"ending_LOD\": record user-specified final LOD threshold. \"step\": record LOD sequence step size. \"selected_LOD_thresh\": final LOD threshold used filtering markers. \"outliers\": Markers removed outliers saved character vector.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/trim_LG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trim Linkage Groups Based on LOD Thresholds — trim_LG","text":"Computes LOD scores marker pairs using MapRtools::MLEL(), parallelized multiple cores. Displays interactive \"candy stripe\" plot visualizing linkage groups using MapRtools::LG(). Asks user define LOD range final LOD threshold marker filtering. drop_outliers = TRUE, removes markers identified outliers based haplotype frequency.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/trim_LG.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Trim Linkage Groups Based on LOD Thresholds — trim_LG","text":"Requires previous installation MapRtools.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/trim_LG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trim Linkage Groups Based on LOD Thresholds — trim_LG","text":"","code":"if (FALSE) { # \\dontrun{ # Example dataset (user should provide actual data) map_data <- data.frame(   marker = c(\"M1\", \"M2\", \"M3\", \"M4\"),   chrom = c(\"CHR1\", \"CHR1\", \"CHR1\", \"CHR1\"),   position = c(10, 20, 30, 40) ) geno_matrix <- matrix(sample(0:1, 16, replace = TRUE),                       nrow = 4, ncol = 4,                       dimnames = list(c(\"M1\", \"M2\", \"M3\", \"M4\"),                                       c(\"Ind1\", \"Ind2\", \"Ind3\", \"Ind4\")))  # Run trimming function (with user input required for LOD selection) result <- trim_LG(chromosome = \"CHR1\",                   map = map_data,                   geno = geno_matrix,                   pop_type = \"F2\",                   drop_outliers = TRUE,                   n_cores = 2)  # Access trimmed genotype matrix print(result$trimmed_genotype) } # }"}]
