[{"path":"https://vegaalfaro.github.io/geneticMapR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Andrey Vega Alfaro Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Genetic Map","text":"vignette outlines process haplotype reconstruction genetic map estimation F2 population, using Hidden Markov Models (HMM) recombination frequency (RF) data. approach applied across multiple chromosomes, using reference genome order optimized marker order.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"libraries","dir":"Articles","previous_headings":"","what":"Libraries","title":"Genetic Map","text":"","code":"library(ggplot2) library(geneticMapR) library(MapRtools) library(tidyr) library(tidyverse) library(HMM)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load Data","title":"Genetic Map","text":"","code":"# Ordered Markers url1 <- \"https://raw.githubusercontent.com/vegaalfaro/geneticMapRFiles/main/R_data/ordered_markers.RData\"  # Download file if (!file.exists(\"ordered_markers.RData\")) {   download.file(url1, destfile = \"local_copy.ordered_markers.RData\")}  # Load load(\"local_copy.ordered_markers.RData\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"reconstruction-and-genetic-map-pipeline","dir":"Articles","previous_headings":"","what":"Reconstruction and genetic Map pipeline","title":"Genetic Map","text":"now apply full reconstruction map estimation pipeline chromosome. includes: Estimating recombination frequency error rate haplotype reconstruction. Performing haplotype reconstruction using Hidden Markov Model (HMM). Estimating genetic map. Generating diagnostic plots including haplotype patterns Marey maps. final output stored list maps_ordered, contains: reconstructed genotype matrix (geno_hmm) estimated genetic map (genetic_map) Plots haplotypes (haplo_plots) Marey plots (marey_plot) loop allows us automate map construction across chromosomes principle (CHR1 CHR9). show example works three chromosomes. prefer work chromosome independently, code still helpful, take code loop make sure work one chromosome time renaming properly work.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"optimized-order","dir":"Articles","previous_headings":"","what":"Optimized order","title":"Genetic Map","text":"value creating pipeline automates process haplotype reconstruction using tools available MapRtools. allows user researchers reproduce results. Genetic maps usually “manually curated” best practice although many cases acceptable. step towards reproducible genetic map construction. Let’s look output. First two similar plots show dosage (genotype) different positions (SNPs loci). ’d like highlight even quality control SNP marker filtering, still genotyping errors. shows case GBS really genotyping technology prone erros. worries! can reconstruct haplotypes. experimental populations like F2s, common observe genotyping errors missing data. issues can preclude us observing underlying true haplotypes. Also, haplotypes supposed vary smoothly, quick haplotype switches likely true biology. Think , chromosome can recombine many times. address , implement haplotype reconstruction step using Hidden Markov Model (HMM), infers likely sequence underlying genotypes (states) observed marker data.","code":"#--- Execution Loop for several Chromosomes ----  # First 3 chromosomes as an example:  chromosomes <- paste0(\"CHR\", 1:3)  # List of chromosome names modify the number of chromosomes here. maps_ordered <- list()  # Store results for each chromosome  # Using optimized order of markers  # Ordered markers----   for (chr in chromosomes) {   cat(\"\\nProcessing\", chr, \"...\\n\")      # Extract genotype data   geno_data <- ordered_results[[chr]]$ordered_geno      # Estimate adjacent recombination frequency   resulti <- MLEL(geno_data,                    LOD = FALSE,                    pop.type = \"F2\",                   adjacent = TRUE,                    n.core = 4)      mean_rf <- mean(resulti$value, na.rm = TRUE)   cat(\"Mean Adjacent Recombination Frequency for\", chr, \":\", mean_rf, \"\\n\")      # Run haplotype reconstruction using estimated RF as transition probability   geno_hmm <- haplotype_reconstruction(geno_data, r = mean_rf)         # Estimate genotyping error   error_rate <- estimate_error(geno_data, geno_hmm)   cat(\"Estimated Genotyping Error for\", chr, \":\", error_rate, \"\\n\")      # Generate genetic map   genetic_map <- estimate_map(geno_hmm)      # Plot results   haplo_plots <- plot_reconstructed_haplo(geno_data, geno_hmm)   print(haplo_plots$p1)   print(haplo_plots$p2)      # Marey Plots   marey <- plot_marey(genetic_map, chr) #  print(marey)      # Store results   maps_ordered[[chr]] <- list(geno_hmm = geno_hmm,                                genetic_map = genetic_map,                       haplo_plots = haplo_plots,                         marey_plot = marey)       } #>  #> Processing CHR1 ... #> Mean Adjacent Recombination Frequency for CHR1 : 0.01714311  #> Estimated Genotyping Error for CHR1 : 0.0107 #>  #> Processing CHR2 ... #> Mean Adjacent Recombination Frequency for CHR2 : 0.02049571  #> Estimated Genotyping Error for CHR2 : 0.01113924 #>  #> Processing CHR3 ... #> Mean Adjacent Recombination Frequency for CHR3 : 0.01617712  #> Estimated Genotyping Error for CHR3 : 0.01"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"how-do-haplotype-reconstruction-work","dir":"Articles","previous_headings":"Optimized order","what":"How do haplotype reconstruction work?","title":"Genetic Map","text":"nutshell haplotype_reconstruction function performs haplotype reconstruction using HMM model. applies Viterbi algorithm infer likely sequence true genotypic states, accounting genotyping errors missing data. function haplotype_reconstruction() uses HMM following key components: States: “0”, “1”, “2” represent homozygous reference, heterozygous, homozygous alternate genotypes, respectively. Symbols: “0”, “1”, “2”, “NA” correspond observed marker values, including missing data. Start Probabilities: Initial probabilities state (e.g., 1:2:1 F2 segregation). Transition Matrix: Defines probability moving states, based recombination frequency r. Emission Matrix: Defines probability observing symbol given true state, adjusted user-specified genotyping error rate overall proportion missing data. Currently function works F2 populations experimental crosses. developing function work broadly types populations.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"why-it-matters","dir":"Articles","previous_headings":"Optimized order","what":"Why it matters?","title":"Genetic Map","text":"can clearly see reconstructing haplotypes using HMM approach haplotypes better reflect biology. Look example green line position 62.5 chromosome 1 likely genotyping error. HMM recognizes fixes returning smooth haplotype switch.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"other-considerations","dir":"Articles","previous_headings":"Optimized order","what":"Other considerations","title":"Genetic Map","text":"example, chromosome 2 around position 18, rapid haplotype switches corrected, cluster remains. may reflect genotyping errors remain. Increasing manually error rate calculated parameter can help resolve . Plots like powerful visualizing segments parental genome progeny inherited identifying problematic regions. Marey plot chromosome 2 also shows markers may potentially order reference genome.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"reference-genome-order","dir":"Articles","previous_headings":"","what":"Reference genome order","title":"Genetic Map","text":"pipeline applied using marker order reference genome. discrepancies appear compared optimized order, suggesting W357B genome may require refinement. Future improvements, long-read sequencing T2T assemblies, help resolve inconsistencies.","code":"# Reference genome order---- chromosomes <- paste0(\"CHR\", 1:3)   maps_ref_genome <- list()  # Store results for each chromosome # Using reference genome order or markers  for (chr in chromosomes) {   cat(\"\\nProcessing\", chr, \"...\\n\")      # Extract genotype data   geno_data <- ordered_results[[chr]]$original_geno      # Estimate adjacent recombination frequency   resulti <- MLEL(geno_data,                    LOD = FALSE,                    pop.type = \"F2\",                   adjacent = TRUE,                    n.core = 4)       # Run haplotype reconstruction again with estimated error rate   geno_hmm <- haplotype_reconstruction(geno_data, error_rate = error_rate)        # Estimate genotyping error   error_rate <- estimate_error(geno_data, geno_hmm)   cat(\"Estimated Genotyping Error for\", chr, \":\", error_rate, \"\\n\")         # Generate genetic map   genetic_map <- estimate_map(geno_hmm)      # Plot results   haplo_plots <- plot_reconstructed_haplo(geno_data, geno_hmm)   print(haplo_plots$p1)   print(haplo_plots$p2)      # Marey Plots   marey <- plot_marey(genetic_map, chr)   #  print(marey)      # Store results   maps_ref_genome[[chr]] <- list(geno_hmm = geno_hmm,                                                     genetic_map = genetic_map,                           haplo_plots = haplo_plots,                          marey_plot = marey)       } #>  #> Processing CHR1 ... #> Estimated Genotyping Error for CHR1 : 0.0113 #>  #> Processing CHR2 ... #> Estimated Genotyping Error for CHR2 : 0.01468354 #>  #> Processing CHR3 ... #> Estimated Genotyping Error for CHR3 : 0.009"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"map-visualization","dir":"Articles","previous_headings":"","what":"Map Visualization","title":"Genetic Map","text":"Now going visualize maps. examples showing 3 chromosomes keep simple idea visualize map better exemplified using 9 chromosomes Beta vulgaris.","code":"# Get the chromosome names  chromosomes <- names(maps_ordered)  # Combine all genetic maps into a single data frame for Ref Genome Ordered Markers MAP_Ref_Genome_Order <- do.call(rbind, lapply(chromosomes, function(chr) maps_ref_genome[[chr]]$genetic_map))  # Combine all genetic maps into a single data frame for  Order Optimized Markers MAP_Optimized_Order <- do.call(rbind, lapply(chromosomes, function(chr) maps_ordered[[chr]]$genetic_map))"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"example-with-optimized-order-map","dir":"Articles","previous_headings":"","what":"Example with optimized-order map","title":"Genetic Map","text":"chromosomes 2 8, optimized genotype matrix (ordered using SALOD previous steps) shows inversion first half. discrepancy observed using reference genome order, markers arranged compared according reference, deviations expected. definitive prove optimized order real order linkage mapping used genome assemblies confirm reference genome order.","code":"# Order-optimized map p_order <- ggplot(MAP_Optimized_Order, aes(position_Mb, position_cM))+   geom_point(shape = 21,               size = 1.8,              fill = \"#A680B8\", # Use purple color               color = \"#2C3E50\")+   labs(     x = \"Physical Position\",     y = \"Genetic distance (cM)\"   )+    theme(     plot.title = element_text(size = 13),     axis.text.y = element_text(size = 12),     axis.text.x = element_text(size = 12),     axis.title.y = element_text(size = 12.5),     axis.title.x = element_text(size = 12.5),     panel.background = element_rect(fill = \"#FAF3E0\", color = NA),     panel.grid.major = element_line(color = \"#D5DBDB\", size = 0.1),     panel.grid.minor = element_blank()   ) +   facet_wrap(~chrom) +   ggtitle(\"Optimized Order\")  print(p_order)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"example-with-reference-genome-order","dir":"Articles","previous_headings":"","what":"Example with reference genome order","title":"Genetic Map","text":"","code":"# Reference Genome Order map p_ref <- ggplot(MAP_Ref_Genome_Order, aes(position_Mb, position_cM))+   geom_point(shape = 21,               size = 1.8,              fill = \"#A680B8\", # Use purple color               color = \"#2C3E50\")+   labs(     x = \"Physical Position\",     y = \"Genetic distance (cM)\"   )+    theme(     plot.title = element_text(size = 13),     axis.text.y = element_text(size = 12),     axis.text.x = element_text(size = 12),     axis.title.y = element_text(size = 12.5),     axis.title.x = element_text(size = 12.5),     panel.background = element_rect(fill = \"#FAF3E0\", color = NA),     panel.grid.major = element_line(color = \"#D5DBDB\", size = 0.1),     panel.grid.minor = element_blank()   ) +   facet_wrap(~chrom) +   ggtitle(\"Reference Genome Order\")  print(p_ref)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"recover-genotype-matrix-and-plot-the-coverage","dir":"Articles","previous_headings":"","what":"Recover genotype matrix and plot the coverage","title":"Genetic Map","text":"code extracts names chromosomes maps_ordered, builds two genotype matrices combines chromosomes: one using reference genome order (geno_genome_order) another using optimized order (geno_optimized_order). Additionally visualize coverage combined genotype reference genome order.","code":"#--- Recover Genotype Matrix----  #  Ref Genome Ordered Markers chromosomes <- names(maps_ordered) # get names geno_genome_order <- do.call(rbind, lapply(chromosomes,                                            function(chr) maps_ref_genome[[chr]]$geno_hmm))  # Combine all genotypes data frame for Ref Genome Ordered Markers Order Optimized Markers geno_optimized_order <- do.call(rbind, lapply(chromosomes,                                               function(chr) maps_ordered[[chr]]$geno_hmm))"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"visualize-the-coverage","dir":"Articles","previous_headings":"Recover genotype matrix and plot the coverage","what":"Visualize the coverage","title":"Genetic Map","text":"code plots genome-wide marker coverage based reference genome order, showing marker distribution across chromosomes.","code":"# coverage map of ordered map coverage_map_ordered <- plot_cover(extract_map(geno_genome_order), customize = TRUE)   coverage_map_ordered"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"optional","dir":"Articles","previous_headings":"","what":"Optional","title":"Genetic Map","text":"want can visuzlice subset (first 50 individuals) reference genome-ordered data using plot_geno() inspect haplotype structure across individuals chromosomes","code":"haplo_ordered <- plot_geno(geno = as.matrix(geno_genome_order[, 1:50])) +    ggtitle(paste(\"\", \"\"))  haplo_ordered"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Haplotype_and_Map.html","id":"save","dir":"Articles","previous_headings":"","what":"Save","title":"Genetic Map","text":"save progress continue genetic mapping.","code":"#--- Save genotypes   save(geno_genome_order,       geno_optimized_order, file = \"../data/genotype_matrices_hmm_pop2-2025-06-06.RData\")  #--- Save Maps  save(MAP_Ref_Genome_Order,       MAP_Optimized_Order, file = \"../data/genetic_maps_pop2-2025-06-06.RData\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/LD_binning.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Binning SNP Markers","text":"vignette demonstrates bin SNP markers based linkage disequilibrium (LD) detect genetic duplicates linkage map F2 table beet population using geneticMapR package dependencies. Specially useful MapRtools.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/LD_binning.html","id":"setup","dir":"Articles","previous_headings":"Introduction","what":"Setup","title":"Binning SNP Markers","text":"case need install packages, ’s ! package includes helper functions check install CRAN GitHub. Feel free use shown need install packages needed following along article.","code":"# Ensure devtools is available for GitHub installs load_or_install_cran(\"devtools\")  # Install/load GitHub packages load_or_install_github(\"MapRtools\", \"jendelman/MapRtools\") load_or_install_github(\"geneticMapR\", \"vegaalfaro/geneticMapR\")  # Install/load CRAN packages load_or_install_cran(\"ggdendro\") load_or_install_cran(\"stringr\") load_or_install_cran(\"ggplot2\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/LD_binning.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load Libraries","title":"Binning SNP Markers","text":"","code":"library(geneticMapR) library(MapRtools) library(dplyr) library(tidyr) library(tibble) library(ggplot2) library(ggdendro) library(stringr)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/LD_binning.html","id":"load-data","dir":"Articles","previous_headings":"Load Libraries","what":"Load Data","title":"Binning SNP Markers","text":"begin loading preprocessed genotype dataset data repository geneticMapRFiles","code":"geno_matrices_url <- \"https://raw.githubusercontent.com/vegaalfaro/geneticMapRFiles/main/R_data/filtered_geno_matrices_1629.RData\"  # Download file if (!file.exists(\"local_copy.filtered_geno_matrices_1629.RData\")) {   download.file(geno_matrices_url,                  destfile = \"local_copy.filtered_geno_matrices_1629.RData\") }  load(\"local_copy.filtered_geno_matrices_1629.RData\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/LD_binning.html","id":"identify-genetic-duplicates","dir":"Articles","previous_headings":"","what":"Identify Genetic Duplicates","title":"Binning SNP Markers","text":"’s often useful include known duplicates dataset assess GBS quality. Generally ’s good system allows figure inadvertently included genetic duplicate. data, included duplicate F1 individual. Occasionally, human error genetic duplicates included experiment inadvertently. convenience code , search assign name F1 parental individuals. rename_geno_matrix() standardizes column names genotype matrix renaming parental genotypes (P1, P2), F1 individuals (F1.1, F1.2, …), F2 individuals (F2.1, F2.2, …). shortens names quite large real data example get way visualization. ’ll change names temporarily visualization purposes. use dendrogram determine genetic duplicates. closer two samples lowest branches dedrogram, related likely duplicates. case, can see two identical F1s (far right hand side) second-lowest branches. addition, F24 F25 appear even closely related likely duplicates included experiment human error. projects worked , surprises like uncommon.","code":"# Assign names P1 <- \"P2550-Cylindra-P1-Theta-A9\" P2 <- \"P2493-Mono-P2-Theta-B9\" F1s <- c(\"7001-F1-Beta-H9\", \"7002-F1-Gamma-F11\") # First make copy of geno geno <- het_phased_geno_1629_filt # Rename geno <- rename_geno_matrix(geno, P1, P2, F1s) # Estimate distance matrix using  genotype matrix distance_matrix <- dist(t(geno))  # Perform hierarchical clustering hclust_result <- hclust(distance_matrix, method = \"single\")  # Convert hclust object to dendrogram data for better visualization dendro_data <- ggdendro::dendro_data(hclust_result)  # Plot dendrogram using ggplot2 dendro <- ggplot() +   geom_segment(data = dendro_data$segments,                 aes(x = x, y = y, xend = xend, yend = yend),                 color = \"blue\") +   geom_text(data = dendro_data$labels,              aes(x = x, y = y, label = label),              hjust = 1, angle = 90, size = 2) +   labs(title = \"Hierarchical Clustering Dendrogram\",        x = \"Samples\", y = \"Distance\") +   theme_test() +   theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())  dendro"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/LD_binning.html","id":"filter-parents-and-f1-from-the-dataset","dir":"Articles","previous_headings":"Identify Genetic Duplicates","what":"Filter Parents and F1 from the Dataset","title":"Binning SNP Markers","text":"avoid bias LD binning, remove parents F1 individuals. ’ll keep two F2s seem genetic duplicates now.","code":"hom_phased_geno_1629 <- drop_parents(hom_phased_geno_1629, P1, P2, F1 = F1s) het_phased_geno_1629_filt <- drop_parents(het_phased_geno_1629_filt, P1, P2, F1 = F1s)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/LD_binning.html","id":"bin-homozygous-markers","dir":"Articles","previous_headings":"","what":"Bin Homozygous Markers","title":"Binning SNP Markers","text":"begin cleaning homozygous matrix removing non-informative markers.","code":"# Identify monomorphic markers mono_markers <- apply(hom_phased_geno_1629, 1, function(x) length(unique(na.omit(x))) == 1) # Identify zero variance markers hom_phased_geno_1629 <- hom_phased_geno_1629[apply(hom_phased_geno_1629, 1, var) > 0, ] # Filter them out from matrix hom_phased_geno_1629 <- hom_phased_geno_1629[!mono_markers, ] # If genotype matrix contains missing genotypes, remove them hom_phased_geno_1629 <- hom_phased_geno_1629[complete.cases(hom_phased_geno_1629), ]  # bin markers using MapRtools::LDbin LDbin_hom <- LDbin(hom_phased_geno_1629, r2.thresh = 0.99) # Extract binned genotype matrix geno.hom.bin <- LDbin_hom$geno  # Check dimensions of binned genotype dim(geno.hom.bin) #> [1] 998 100"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/LD_binning.html","id":"visualize-binned-homozygous-markers","dir":"Articles","previous_headings":"Bin Homozygous Markers","what":"Visualize Binned Homozygous Markers","title":"Binning SNP Markers","text":"","code":"map_hom <- extract_map(geno.hom.bin) geneticMapR::plot_cover(map = map_hom, customize = TRUE) +    ggtitle(\"Binned Homozygous Markers\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/LD_binning.html","id":"bin-heterozygous-markers","dir":"Articles","previous_headings":"","what":"Bin Heterozygous Markers","title":"Binning SNP Markers","text":"now repeat binning process heterozygous markers.","code":"LDbin_het <- LDbin(het_phased_geno_1629_filt, r2.thresh = 0.99) geno.het.bin <- LDbin_het$geno dim(geno.het.bin) #> [1] 2480  100"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/LD_binning.html","id":"visualize-binned-heterozygous-markers","dir":"Articles","previous_headings":"Bin Heterozygous Markers","what":"Visualize Binned Heterozygous Markers","title":"Binning SNP Markers","text":"","code":"map_het <- extract_map(geno.het.bin) geneticMapR::plot_cover(map = map_het, customize = TRUE) +    ggtitle(\"Binned Heterozygous Markers\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/LD_binning.html","id":"mrker-filtering-tradeoff","dir":"Articles","previous_headings":"","what":"Mrker Filtering Tradeoff","title":"Binning SNP Markers","text":"real-data example shows filtering homozygous vs. heterozygous markers affects genome coverage. balance marker type map resolution.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/LD_binning.html","id":"save-results","dir":"Articles","previous_headings":"","what":"Save Results","title":"Binning SNP Markers","text":"","code":"save(geno.het.bin,       geno.hom.bin,        dendro,      file = \"processed_data/R_data/binned_geno_1629.RData\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/LD_binning.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Binning SNP Markers","text":"vignette illustrates identify duplicate individuals dataset perform LD-based marker binning using tools available geneticMapR workflow.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/LD_binning.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Binning SNP Markers","text":"","code":"sessionInfo() #> R version 4.5.0 (2025-04-11) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] stringr_1.5.1          ggdendro_0.2.0         ggplot2_3.5.2          #> [4] tibble_3.3.0           tidyr_1.3.1            dplyr_1.1.4            #> [7] MapRtools_0.36         geneticMapR_0.0.0.9000 #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.6         xfun_0.52            bslib_0.9.0          #>  [4] htmlwidgets_1.6.4    rstatix_0.7.2        lattice_0.22-6       #>  [7] vctrs_0.6.5          tools_4.5.0          generics_0.1.4       #> [10] parallel_4.5.0       ca_0.71.1            pkgconfig_2.0.3      #> [13] Matrix_1.7-3         RColorBrewer_1.1-3   desc_1.4.3           #> [16] distributional_0.5.0 lifecycle_1.0.4      scam_1.2-18          #> [19] splines2_0.5.4       compiler_4.5.0       farver_2.1.2         #> [22] CVXR_1.0-15          textshaping_1.0.1    codetools_0.2-20     #> [25] carData_3.0-5        seriation_1.5.7      htmltools_0.5.8.1    #> [28] sass_0.4.10          yaml_2.3.10          gmp_0.7-5            #> [31] Formula_1.2-5        pillar_1.10.2        pkgdown_2.1.3        #> [34] car_3.1-3            ggpubr_0.6.0         jquerylib_0.1.4      #> [37] MASS_7.3-65          cachem_1.1.0         iterators_1.0.14     #> [40] foreach_1.5.2        TSP_1.2-4            abind_1.4-8          #> [43] nlme_3.1-168         tidyselect_1.2.1     digest_0.6.37        #> [46] stringi_1.8.7        purrr_1.0.4          labeling_0.4.3       #> [49] splines_4.5.0        fastmap_1.2.0        grid_4.5.0           #> [52] cli_3.6.5            magrittr_2.0.3       broom_1.0.8          #> [55] withr_3.0.2          Rmpfr_1.1-0          scales_1.4.0         #> [58] backports_1.5.0      bit64_4.6.0-1        registry_0.5-1       #> [61] rmarkdown_2.29       bit_4.6.0            HMM_1.0.2            #> [64] ggsignif_0.6.4       ragg_1.4.0           evaluate_1.0.3       #> [67] knitr_1.50           ggdist_3.3.3         mgcv_1.9-1           #> [70] rlang_1.1.6          Rcpp_1.0.14          glue_1.8.0           #> [73] jsonlite_2.0.0       R6_2.6.1             systemfonts_1.2.3    #> [76] fs_1.6.6"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Linkage Groups and Marker Order","text":"vignette provides overview estimate linkage groups, order markers using functions geneticMapR MapRtools packages. continue use genotype data biparental F2 table beet population.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Linkage Groups and Marker Order","text":"package includes helper functions check install CRAN GitHub. Feel free use shown need install packages needed following along article.","code":"# Ensure devtools is available for GitHub installs load_or_install_cran(\"devtools\")  # Install/load GitHub packages load_or_install_github(\"MapRtools\", \"jendelman/MapRtools\") load_or_install_github(\"geneticMapR\", \"vegaalfaro/geneticMapR\")  # Install/load CRAN packages load_or_install_cran(\"ggplot2\") load_or_install_cran(\"tidyr\") load_or_install_cran(\"tidyverse\") load_or_install_cran(\"parallel\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load Libraries","title":"Linkage Groups and Marker Order","text":"","code":"library(geneticMapR) library(MapRtools) library(dplyr) library(tidyr) library(tibble) library(ggplot2) library(ggdendro) library(stringr)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"data","dir":"Articles","previous_headings":"","what":"1. Data","title":"Linkage Groups and Marker Order","text":"avoid long runtimes, precomputed genotype data LOD matrices loaded geneticMapRFiles. two genotype files loaded geno.het.bin geno.hom.bin. geno.het.bin genotype matrix 2480 marker bins 100 individuals. Includes heterozygous homozygous markers. Rows markers rows named (e.g.,CHR7_192222). Columns individuals columns named (e.g., 2002-F2-Beta-B10). geno.hom.bin genotype matrix 998 marker bins 100 individuals. Includes homozygous markers . Rows markers rownames (e.g.,CHR7_192222) individuals columns column names (e.g., 2002-F2-Beta-B10)..","code":"# Binned Genotype url1 <- \"https://raw.githubusercontent.com/vegaalfaro/geneticMapRFiles/main/R_data/binned_geno_1629.RData\"  # Download file if (!file.exists(\"binned_geno_1629.RData\")) {   download.file(url1, destfile = \"local_copy.binned_geno_1629.RData\")}  # Load load(\"local_copy.binned_geno_1629.RData\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"lod-matrices","dir":"Articles","previous_headings":"1. Data","what":"LOD matrices","title":"Linkage Groups and Marker Order","text":"Precomputed LOD matrices loaded take run. uploaded LOD matrices : LODmat.het Large matrix containing LOD scores marker pair. Includes Heterozygous markers Homozygous markers. LODmat.hom Large matrix containing LOD scores marker pair. Includes Homozygous markers . (info marker typesSee marker type analysis article “Recode Markers” Articles tab)","code":"# LOD matrices url2 <- \"https://raw.githubusercontent.com/vegaalfaro/geneticMapRFiles/main/R_data/LODmats_1629-2025-03-12.RData\"  # Download file if (!file.exists(\"binned_geno_1629.RData\")) {   download.file(url2, destfile = \"LODmats_1629-2025-03-12.RData\")}  # Load load(\"LODmats_1629-2025-03-12.RData\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"your-own-lod-matrix","dir":"Articles","previous_headings":"1. Data > LOD matrices","what":"Your own LOD matrix","title":"Linkage Groups and Marker Order","text":"need run LOD matrices, show example using MapRtools MLEL function. Make sure check many cores available machine. example F2 population two (inbred) parents. However, MLEL supports several population types.","code":"# Geno matrix with only homozygous markers LODmat.hom <- MLEL(geno = geno.hom.bin, pop.type = \"F2\", LOD=TRUE, n.core = 7)  # Geno matrix with homozygous and heterozygous markers LODmat.het <- MLEL(geno = geno.het.bin, pop.type = \"F2\", LOD=TRUE, n.core = 7)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"linkage-groups","dir":"Articles","previous_headings":"","what":"2. Linkage Groups","title":"Linkage Groups and Marker Order","text":"objective determining linkage groups identify smallest LOD (logarithm odds) threshold chromosomes correctly separated linkage groups. Linkage groups clusters genetic markers inherited together correspond physical chromosomes. goal identify groups assessing often markers co-inherited across progeny , case, F2 mapping population. : Markers : Close together chromosome tend inherited together (low recombination → high linkage). Far apart different chromosomes inherited independently (high recombination → low linkage).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"lod-threshold-tradeoffs","dir":"Articles","previous_headings":"2. Linkage Groups","what":"LOD threshold tradeoffs","title":"Linkage Groups and Marker Order","text":"LOD threshold determines stringently connect markers groups: low: Spurious linkage → falsely merges different chromosomes. high: Real linkage missed → splits chromosomes, especially : long arms low marker density (low resolution), recombination hotspots create perceived gaps. , beet (2n=18; 9 chromosomes), ’re trying tune LOD threshold exactly 9 linkage groups emerge, matching known number chromosomes. often done empirically: Estimate pairwise LOD scores markers. Build graph figure visualize linked markers. Adjust threshold get correct number groups (example, counting connected components graph). get shortly, let show theory behind .","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"some-math-behind-lod-scores","dir":"Articles","previous_headings":"2. Linkage Groups","what":"Some math behind LOD scores","title":"Linkage Groups and Marker Order","text":"LOD score compares two hypotheses: H1: two markers linked certain recombination frequency (θ < 0.5). H0: two markers linked (θ = 0.5, .e., independent assortment). formula : LOD=log10(P(data∣linked)P(data∣unlinked))LOD=log_{10}\\left(\\frac{P(data∣linked)}{P(data∣unlinked)}\\right) higher LOD means stronger evidence markers belong group. Usually treshold set define linkage groups. visualize linkage group separation, can use MapRtools package generate candy stripe bar plot. plot helps assess whether chromosomes cleanly split.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"linkage-group-separation","dir":"Articles","previous_headings":"2. Linkage Groups","what":"Linkage group separation","title":"Linkage Groups and Marker Order","text":"Let’s use MapRtools LG function estimate linkage group separation. can toggle threshold. can try different thresholds example start 2 20 move iteratively. counting stripes can figure threshold appropriate. black line top represent misplaced markers markers Linkage Groups outside largest first 9.   homozygous markers, nine linkage groups first formed LOD score 12. configuration remains stable LOD 18, support grouping structure suggests reliable marker clustering. heterozygous markers included alongside homozygous markers, pattern shifts slightly. combined dataset, nine linkage groups formed higher LOD score 19. However, grouping less clear-cut homozygous-scenario.","code":"LG(LODmat.hom, thresh = seq(5, 30, by = 1)) + ggtitle(\"Homozygous markers only\") LG(LODmat.het, thresh = seq(5, 30, by = 1)) + ggtitle(\"Heterozygous + Homozygous SNPs\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"linkage-group-separation-1","dir":"Articles","previous_headings":"","what":"3. Linkage Group Separation","title":"Linkage Groups and Marker Order","text":"’re going demonstrate next steps set homozygous markers convenience. reality may combination homozygous heterozygous markers. depends marker set steps took filter . articles package show ways filter markers. Make sure check . thresh argument MapRtools::LG() function provided single numeric value, function returns data frame assigned linkage group marker. Small groups markers likely artifacts sparse coverage noise. example chromosome 1 markers linkage group 6, however, linkage group 6 also encompasses markers chromosomes 2, 7 9. focus biologically meaningful results, subset largest nine linkage groups, correspond expected number chromosomes beet.","code":"map <- extract_map(geno.hom.bin, markers = TRUE) # Extracts physical map LGhom <- LG(LODmat.hom, thresh = 12) # Returns assiged linkage group LGhom$chrom <- map$chrom  LGhom <- LGhom[LGhom$LG <= 9, ] # Keeps largest 9 linkage groups map <- merge(LGhom, map, by = c(\"marker\", \"chrom\")) # Merge to connect CHR to LGs tab <- table(map$chrom, map$LG) # Make a table of CHR and LGs tab <- tab[, order(max.col(t(tab), ties.method = \"first\"))] # Order table knitr::kable(tab) # Print table"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"linkage-trimming-with-trim_lg","dir":"Articles","previous_headings":"","what":"4. Linkage Trimming with trim_LG()","title":"Linkage Groups and Marker Order","text":"working high-density genotype datasets, ’s important identify remove markers belong linkage group (LG) majority. Take example example LG 6 contain markers belonging chromosome 1. process, called linkage trimming, helps improve accuracy genetic map construction. developed function trim_LG() streamline process. builds MapRtools allows : Filter markers based LOD score thresholds LG assignment Visualize haplotype frequencies trimming Interactively define LOD parameters, automate providing values directly Remove outlier markers based haplotype frequencies ’re working several chromosomes, populations, already reference genome provides marker order, function helps trim away spurious markers without need re-order . However, reference available, recommend ordering markers first (e.g., order_markers() MapRtools). code chunk : Estimate LOD scores markers CHR1 Plot initial haplotype frequency Generate plot across LOD range (5 35, steps 1) Apply final threshold 18 assign markers primary LG Optionally remove outlier markers Return trimmed genotype matrix, filtered map, LOD parameters used, plots   function also interactive! set argument interactive = TRUE function requests input user can type console initial LOD, end LOD step. show plot can select threshold linkage grouping. goal select threshold represents markers one linkage group pushes away spurious markers belong.","code":"# CHR1 result_chr1 <- trim_LG(chromosome = \"CHR1\",                                    map = map,                                    pop_type = \"F2\",                                   geno = geno.hom.bin, # geno from the ordering step                        interactive = FALSE,                        drop_outliers = TRUE,                        n_cores = 6,                        initial_LOD = 5,                        end_LOD = 35,                        step_LOD = 1,                        selected_thresh = 18                                                           ) #> Processing chromosome: CHR1 #> Plotting initial haplotype frequency... #> Estimating LOD matrix using 3 cores... #> Generating linkage group plot... #> Filtering markers at LOD threshold = 18 #> Removing outliers..."},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"ordering-markers-with-order_and_plot","dir":"Articles","previous_headings":"","what":"5. Ordering Markers with order_and_plot()","title":"Linkage Groups and Marker Order","text":"trimming spurious markers chromosome, ’s important optimize order based recombination frequencies. function order_and_plot() helps streamline step combining marker ordering haplotype visualization single workflow. function: Estimates recombination frequency (RF) matrix MapRtools::MLEL() Performs multiple iterations MapRtools::order_markers() Selects best marker order based smallest Sum Adjusted Recombination Fractions (SARF) Generates faceted plot ordering attempts visual inspection Displays haplotype plot subset individuals ordered matrix designed operate trimmed genotype matrices, typically one chromosome time.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"example-ordering-markers-in-a-single-chromosome","dir":"Articles","previous_headings":"5. Ordering Markers with order_and_plot()","what":"Example: Ordering markers in a single chromosome","title":"Linkage Groups and Marker Order","text":"code chunk : Attempt 6 marker orderings CHR1 Plot original vs. optimized order iteration Select best order (lowest SARF)  can observe correspondence original marker order optimized order. Occasionally, order may appear reversed. plots help identify potential inversions chromosomal features. section, focus demonstrating process marker ordering. biological interpretation depends crop’s genome structure quality reference genome. Use intuition understanding underlying biology interpret patterns plots. order_and_plot() uses MapRtools order_markers() based solving traveling salesperson problem.","code":"# Chromosome 1 chr1_order <- order_and_plot(result_chr1$trimmed_genotype,                               n.iter = 6,                              CHR = \"CHR1\"                              )"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"efficient-multiple-chromosome-ordering","dir":"Articles","previous_headings":"5. Ordering Markers with order_and_plot()","what":"Efficient multiple chromosome ordering","title":"Linkage Groups and Marker Order","text":"’ve trimmed stored genotype matrices chromosome named list, can apply order_and_plot() loop: approach allows efficient reproducible marker ordering across entire genome.","code":"result_list <- list(   CHR1 = result_chr1$trimmed_genotype,   CHR2 = result_chr2$trimmed_genotype,   # ...   CHR9 = result_chr9$trimmed_genotype )  ordered_results <- lapply(names(result_list), function(chr) {   order_and_plot(result_list[[chr]], n.iter = 6, CHR = chr, prop = 0.25) })  names(ordered_results) <- names(result_list)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"save-progress","dir":"Articles","previous_headings":"","what":"Save progress","title":"Linkage Groups and Marker Order","text":"","code":"# Save results as RDA save(ordered_results, file = \"processed_data/R_data/ordered_markers_pop2_list-2025-03-12.RData\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Linkage_Groups.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Linkage Groups and Marker Order","text":"vignette outlines complete workflow LOD estimation, linkage group assignment, marker ordering F2 population using SNPs.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Recode Markers","text":"article demonstrates process, clean, recode (phase) SNP markers VCF file generate genotype matrices compatible genetic mapping workflows. use helper functions geneticMapR package well dependencies MapRtools, VariantAnnotation, Rsamtools. example focuses F2 population, genotype recoding based founder descent.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Recode Markers","text":"need series packages, show install needed. (geneticMapR needs installed)","code":"# Ensure devtools is available for GitHub installs load_or_install_cran(\"devtools\")  # Install/load GitHub packages load_or_install_github(\"MapRtools\", \"jendelman/MapRtools\")  # Install/load CRAN packages load_or_install_cran(\"ggplot2\") load_or_install_cran(\"tidyr\") load_or_install_cran(\"tidyverse\") load_or_install_cran(\"parallel\") load_or_install_cran(\"BiocManager\")  # Variant Annotation Package BiocManager::install(\"VariantAnnotation\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load Libraries","title":"Recode Markers","text":"","code":"# Load libraries library(geneticMapR) library(MapRtools) library(VariantAnnotation) library(dplyr) library(tidyr) library(tibble) library(ggplot2) library(Rsamtools) library(ggpubr)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"load-and-explore-vcf-file","dir":"Articles","previous_headings":"","what":"Load and Explore VCF File","title":"Recode Markers","text":"VCF file somewhat large (19.8 MB) included system file. geneticMapRFiles data-repository help us save data run examples without much issues. Let’s get local copy VCF file using utils::download.file() code loads vcf file using function readVcf. Let’s explore vcf file. VCF contains several fields including GT (genotype), DP (depth), GQ (genotype quality) PL (sample-level annotations)","code":"# Let's define our URL from the data repository that accompanies this R package vcf_url <- \"https://raw.githubusercontent.com/vegaalfaro/geneticMapRFiles/main/vcf/SNP_updated_IDs_sorted2.vcf.gz\"  # Download file if (!file.exists(\"local_copy.vcf.gz\")) {   download.file(vcf_url, destfile = \"local_copy.vcf.gz\") } # Let's read the vcf into our environment vcf2 <- VariantAnnotation::readVcf(\"local_copy.vcf.gz\", genome = \"unknown\") # Overview sapply(geno(vcf2), class) #>      GT       AD       DP       GQ       PL       #> [1,] \"matrix\" \"matrix\" \"matrix\" \"matrix\" \"matrix\" #> [2,] \"array\"  \"array\"  \"array\"  \"array\"  \"array\""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"extract-genotype-and-coverage-information","dir":"Articles","previous_headings":"","what":"Extract Genotype and Coverage Information","title":"Recode Markers","text":"Let’s extract genotype depth saved GT DP fields using VariantAnnotation’s geno function. extracted, can estimate depth statistics.","code":"GT <- geno(vcf2)$GT DP <- geno(vcf2)$DP summary(as.numeric(DP)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00   19.00   27.00   30.84   39.00 1656.00"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"convert-genotype-call-to-dosage","dir":"Articles","previous_headings":"","what":"Convert Genotype Call to Dosage","title":"Recode Markers","text":"inspect GT object, genotypes coded \"0/0\", \"0/1\", \"1/1\", representing maximum likelihood call: 0 reference (REF) allele 1 alternate (ALT) allele. example: \"0/0\" dosage 0 ALT alleles, \"0/1\" \"1/0\" dosage 1 ALT allele \"1/1\" corresponds dosage 2 ALT alleles. convert_to_dosage family functions geneticMapR handles conversion easily. polyploids (e.g., \"0/0/0/0\"), check convert_to_dosage_advanced convert_to_dosage_flex. Let’s convert genotype calls dosages: Let’s take look conversion. converted dosage allele format call.","code":"GT[1:3, 1:3] #>             7001-F1-Beta-H9 2001-F2-Beta-A10 2002-F2-Beta-B10 #> CHR7_192222 \"1/0\"           \"0/1\"            \"1/1\"            #> CHR7_192239 \"0/0\"           \"0/0\"            \"0/0\"            #> CHR7_192241 \"0/0\"           \"0/0\"            \"0/0\" geno_1629 <- convert_to_dosage_flex(GT) geno_1629[1:3, 1:3] #>             7001-F1-Beta-H9 2001-F2-Beta-A10 2002-F2-Beta-B10 #> CHR7_192222               1                1                2 #> CHR7_192239               0                0                0 #> CHR7_192241               0                0                0"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"filter-markers-and-individuals-by-missing-data","dir":"Articles","previous_headings":"","what":"Filter Markers and Individuals by Missing Data","title":"Recode Markers","text":"function filter_missing_geno() takes genotype matrix rows representing genetic markers columns representing individuals. geno_matrix argument specifies genotype matrix. threshold argument allows specify max proportion missing data individual marker removed. Ranges 0 1 default 0.10. Let’s filter markers first accept 10% missing data. can see marker removed. markers less 10% missing data. can confirm using plot.  can also filter missing data per individuals. function created message letting us know 7 individuals removed data exceeds 0.1 threshold. Let’s see example access results. Let’s see individuals removed can visualize much missing data still kept individuals. greater 7% agreement filtering parameters.","code":"result <- filter_missing_geno(geno_matrix = geno_1629,                                threshold = 0.10,                               filter_by = \"markers\") #> 0 markers removed (Threshold: 0.1)  # Extract our result filtered_geno <- result$filtered_geno # Prepare data missing_values <- base::as.data.frame(result$pct_missing) colnames(missing_values) <- \"missing\"  # Visualize missingness ggplot(missing_values, aes(x = missing)) +   geom_histogram() geno_missing_filtered <- filter_missing_geno(filtered_geno,                                              threshold = 0.10,                                              filter_by = \"individuals\") #> 7 individuals removed (Threshold: 0.1) filtered_geno <- geno_missing_filtered$filtered_geno # Access outputs filtered_geno <- geno_missing_filtered$filtered_geno # Filtered geno matrix missing_values <- base::as.data.frame(geno_missing_filtered$pct_missing) # colnames(missing_values) <- \"missing\"  # Removed individuals removed_individuals <- data.frame(ind = geno_missing_filtered$removed_individuals) print(removed_individuals) #>                 ind #> 1  2055-F2-Gamma-G4 #> 2  2088-F2-Gamma-H8 #> 3 2097-F2-Gamma-A10 #> 4 2099-F2-Gamma-C10 #> 5 2105-F2-Gamma-A11 #> 6 2106-F2-Gamma-B11 #> 7 2107-F2-Gamma-C11 # Visualize missing data ggplot(missing_values, aes(x = missing)) +   geom_histogram()"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"visualize-genotype-data","dir":"Articles","previous_headings":"","what":"Visualize Genotype Data","title":"Recode Markers","text":"can also plot histogram genotypic values using plot_genotype_histogram().  Let’s also take look coverage markers across genome chromosomes. function based MapRtool’s plot_coverage. just added customization. Check . filtered genotype matrix marker names row names format “CHR7_192222” can use function extract_map() geneticMapR easily create physical map columns “marker” “chrom” “position”. function extract_map() flexible row names contain components (chromosome, position) separated symbol (e.g., _, -, .). Use arguments chrom_index pos_index specify positions, split_symbol define delimiter. example “CHR7_192222”, chrom_index = 1 chromosome first field delimiter “_“. markers coded W257B_“CHR7_192222” chrom_index = 2 pos_index = 3 chromosome position second third field respectively. extract_map tested work symbols “_“,”-” “.”. valid separators may also valid Let’s see first lines map Now ready plotting:","code":"plot_genotype_histogram(filtered_geno) # Extract physical map map <- extract_map(genotype_matrix = filtered_geno,                    chrom_index = 1, # Index for Chromosome                     pos_index = 2,                      markers = FALSE,  # If TRUE, includes original marker names                     split_symbol = \"_\") # See map heading head(map) #>   chrom position #> 1  CHR7   192222 #> 2  CHR7   192239 #> 3  CHR7   192241 #> 4  CHR7   192273 #> 5  CHR7   225702 #> 6  CHR7   225710 geneticMapR::plot_cover(map=map, customize = TRUE)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"genotype-frequency","dir":"Articles","previous_headings":"","what":"Genotype Frequency","title":"Recode Markers","text":"can evaluate genotype frecuency using freq() function. function computes relative frequency genotype (typically coded 0, 1, 2) across markers individuals.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"genotype-frequency-by-marker","dir":"Articles","previous_headings":"Genotype Frequency","what":"Genotype Frequency by Marker","title":"Recode Markers","text":"first calculate genotype frequencies marker: returns relative frequency genotype (0, 1, 2) marker locus across individuals, allowing identification loci high homozygosity heterozygosity. can also help filter markers downstream. Let’s take look","code":"geno.freq.mar <- freq(filtered_geno, input_format = \"numeric\", by = \"markers\") head(geno.freq.mar) #>                 0         1         2 #> CHR7_192222 0.125 0.5288462 0.3461538 #> CHR7_192239 1.000 0.0000000 0.0000000 #> CHR7_192241 1.000 0.0000000 0.0000000 #> CHR7_192273 1.000 0.0000000 0.0000000 #> CHR7_225702 1.000 0.0000000 0.0000000 #> CHR7_225710 1.000 0.0000000 0.0000000"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"genotype-frequency-by-marker-1","dir":"Articles","previous_headings":"Genotype Frequency","what":"Genotype Frequency by Marker","title":"Recode Markers","text":"evaluate genotype frequncies individuals across markers: produces relative frequency genotype every individual, helping pinpoint individuals unusually high low homozygosity levels. Let’s take look","code":"geno.freq.ind <- freq(filtered_geno, input_format = \"numeric\", by = \"individuals\") head(geno.freq.ind) #>                          0          1          2 #> 7001-F1-Beta-H9  0.8822163 0.09591408 0.02186960 #> 2001-F2-Beta-A10 0.8940523 0.07536372 0.03058399 #> 2002-F2-Beta-B10 0.9041417 0.05869674 0.03716160 #> 2003-F2-Beta-C10 0.8998198 0.06497826 0.03520198 #> 2004-F2-Beta-D10 0.9027175 0.05645933 0.04082315 #> 2005-F2-Beta-E10 0.8934391 0.07540088 0.03116000"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"marker-type-analysis","dir":"Articles","previous_headings":"","what":"Marker Type Analysis","title":"Recode Markers","text":"Markers can classified based genotypes two parents: Homozygous: Fixed either one allele (P1 = 0 & P2 = 2 P1 = 2 & P2 = 0:) Non-polymorphic: parents genotype (e.g., P1 = P2 = 0, 1, 2) Heterozygous: One parents heterozygous (e.g., P1 = 1 & P2 = 0) Non-polymorphic markers always removed. Heterozygous markers can optionally excluded depending analysis goals. filter heterozygous markers keep homozygous markers, can use filter_geno_by_parents(). P1 P2 column names parental genotypes. filter_geno_by_parents retains homozygous polymorphic markers two specified parents. Note: recode_markers()function also performs filtering automatically. user can specify also recode_markers()keep het markers . Let’s see.","code":"# Declare the name of the parents as they appear in the column of your geno P1 <- \"P2550-Cylindra-P1-Theta-A9\" P2 <- \"P2493-Mono-P2-Theta-B9\"  # Run our function to fiter out heterozygous markers geno_homozygous <- filter_geno_by_parents(filtered_geno, P1, P2)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"recode-genotypes","dir":"Articles","previous_headings":"","what":"Recode Genotypes","title":"Recode Markers","text":"geneticMapR::recode_markers() heart package. powerful function phases recodes genotype marker data based two parental references (arguments parent1 parent2). Recoding markers one key steps genetic mapping. markers coded way haplotypes coming either parent can tracked F2 progeny.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"typical-representation","dir":"Articles","previous_headings":"Recode Genotypes","what":"Typical representation","title":"Recode Markers","text":"figure panel typical representation intercross derive F2 mapping population. parental lines usually shown fully homozygous: P1.carries reference allele (blue, dosage = 0). P2.b carries alternate allele (orange, dosage = 2). resulting F1 heterozygous (green, dosage = 1) loci. F2 individuals show segregating mix genotypes (0, 1, 2). representation valid one parents reference genome used call SNPs. case recoding needs occur. However, rather rare case.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"alternative-representation","dir":"Articles","previous_headings":"Recode Genotypes","what":"Alternative representation","title":"Recode Markers","text":"representation, parental genotypes, assumed homozygous fixed different alleles across loci, allowing complex realistic representations: P1.b P2.b carry homozygous dosage values (0, 2). Still homozygous fixed different alleles.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"outcrossing-species","dir":"Articles","previous_headings":"Recode Genotypes","what":"Outcrossing species","title":"Recode Markers","text":"often outcrossing species like carrot table beets others high heterozygosity, (inbred) parents may mixed genotypes totally homozygous genotypes. loci lethal either homozygous configuration. P1.c P2.c carry heterozygous markers (1) low proportion, homozygous dosage values 0 2. F1s mostly heterozygous, due genotyping error residual heterozygosity dosages 0 2 typically observed individuals","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"recode-function","dir":"Articles","previous_headings":"","what":"Recode function","title":"Recode Markers","text":"recode_markers() created help task recoding markers reflect “typical representation”. helps user track origin haplotypes F2. Essential genetic mapping. function quite flexible main functionality : Drop markers either parent NA Remove non-polymorphic markers automatically (parents genotype) handle_het_markers = TRUE, allows parental heterozygous markers kept. Note: different types Het markers. Please see function documentation information. example recode_markers() works. based simulated data convenience.","code":"# Retains only homozygous markers hom_phased_geno_1629 <- geneticMapR::recode_markers(geno = filtered_geno,                                 parent1 = P1,                                 parent2 = P2,                                 numeric_output = TRUE,                                 handle_het_markers = FALSE) #> Dropping markers with NA in at least one of the parents. Your genotype matrix contains missing parental genotypes. #> Dropping non-polymorphic markers. Your genotype matrix contains markers that are identical in the two parents.  # Allows for heterozygous markers het_phased_geno_1629 <- geneticMapR::recode_markers(geno = filtered_geno,                                parent1 = P1,                                parent2 = P2,                                numeric_output = TRUE,                                handle_het_markers = TRUE) #> Dropping markers with NA in at least one of the parents. Your genotype matrix contains missing parental genotypes. #> Dropping non-polymorphic markers. Your genotype matrix contains markers that are identical in the two parents. # Load the example dataset data(\"simulated_geno\")  # Check markers previous to recoding print(simulated_geno) #>         Parent1 Parent2 F2_1 F2_2 F2_3 #> Marker1       0       2    0    1    2 #> Marker2       2       0    2    0    1 #> Marker3       0       2    1    2    1 #> Marker4       2       0    2    0    0 #> Marker5       0       2    0    2    1 #> Marker6       2       0    2    0    0  # Recode the markers using the recode_markers() function phased <- geneticMapR::recode_markers(simulated_geno, parent1 = \"Parent1\", parent2 = \"Parent2\")  # Print the output print(phased) #>         Parent1 Parent2 F2_1 F2_2 F2_3 #> Marker1       0       2    0    1    2 #> Marker2       0       2    0    2    1 #> Marker3       0       2    1    2    1 #> Marker4       0       2    0    2    2 #> Marker5       0       2    0    2    1 #> Marker6       0       2    0    2    2"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"tradeoff-between-marker-type-and-genome-coverage","dir":"Articles","previous_headings":"","what":"Tradeoff Between Marker Type and Genome Coverage","title":"Recode Markers","text":"outcrossing species noticed tradeoff coverage quantity heterozygous markers. Including heterozygous markers increases genome coverage compared using homozygous markers, comes tradeoffs. heterozygous markers can improve coverage, especially regions near centromere, loci segregation distortion deleterious alleles, may complicate downstream linkage group estimation due different segregation patterns. following section illustrates tradeoff marker type genome coverage.","code":"a <- plot_cover(map = extract_map(hom_phased_geno_1629)) + ggtitle(\"Homozygous\") b <- plot_cover(map = extract_map(het_phased_geno_1629)) + ggtitle(\"Homozygous + heterozygous\") c <- plot_genotype_histogram(hom_phased_geno_1629) d <- plot_genotype_histogram(het_phased_geno_1629)  ggarrange(a, b, c, d,            nrow = 2,           ncol = 2           )"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"genotype-frequencies-and-filtering","dir":"Articles","previous_headings":"","what":"Genotype Frequencies and Filtering","title":"Recode Markers","text":"geneticMapR includes functions estimate frequencies like freq() easy way. function allows estimate genotype frequencies later filtering.  plots see abundance markers frequencies 0 1 across gentoypes (.e., 0, 1, 2). can use function filter_geno_by_freq() filter markers maximum genotype frequency keeping range heterozygous frequencies, say lower 0.1 hiher 0.70. reasonable F2 mapping populations. resulting plot shows filtered marker set overabundance markers frequencies 0 1 filtered .  see filtering paramaters left us typical 1:2:1 segregation ratio even markers included heterozygous markers properly filtered.","code":"# Get Frequencies geno.freq.hom <- freq(hom_phased_geno_1629,  input_format = \"numeric\", by =\"markers\")  geno.freq.het <- freq(het_phased_geno_1629, input_format = \"numeric\", by = \"markers\")  # Plots het_plot <- frequency_plot(geno.freq.het) + ggtitle(\"Het markers, unfiltered\") hom_plot <- frequency_plot(geno.freq.hom) + ggtitle(\"Hom markers, unfiltered\")  # Arrange ggarrange(hom_plot,           het_plot,           nrow = 2) # Heterozygous marker curation het_phased_geno_1629_filt <- filter_geno_by_freq(het_phased_geno_1629,                                                   max_geno_freq = 0.90,                                                   het_freq_range = c(0.1, 0.70)  )  # Create a dataset of frequencies based on the filtered data geno.freq.het.filtered <- freq(het_phased_geno_1629_filt,                                 input_format = \"numeric\",                                 by =\"markers\")    # Create plot frequency_plot(geno.freq.het.filtered) + ggtitle(\"Het markers, filtered\") #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. v <- plot_genotype_histogram(het_phased_geno_1629_filt) +   ggtitle(\"Homozygous + filtered het markers\")  w <-  plot_genotype_histogram(hom_phased_geno_1629) +   ggtitle(\"Homomozygous markers\")  ggarrange(v, w,           nrow = 2)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"save-results","dir":"Articles","previous_headings":"","what":"Save Results","title":"Recode Markers","text":"","code":"save(hom_phased_geno_1629,      het_phased_geno_1629,      het_phased_geno_1629_filt,      file = \"processed_data/R_data/filtered_geno_matrices_1629.RData\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Recode Markers","text":"lot genetic map construction revolves around type markers make good use . many filtering steps taken specially using GBS data make sure curated set markers markers can trust informative. vignette provides workflow preparing phasing genotypic data genetic mapping analyses F2 population using tools geneticMapR bioinformatics packages. Let’s continue next article genetic map construction.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/Recode.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Recode Markers","text":"","code":"sessionInfo() #> R version 4.5.0 (2025-04-11) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] grid      stats4    stats     graphics  grDevices utils     datasets  #> [8] methods   base      #>  #> other attached packages: #>  [1] png_0.1-8                   ggpubr_0.6.0                #>  [3] ggplot2_3.5.2               tibble_3.3.0                #>  [5] tidyr_1.3.1                 dplyr_1.1.4                 #>  [7] VariantAnnotation_1.54.1    Rsamtools_2.24.0            #>  [9] Biostrings_2.76.0           XVector_0.48.0              #> [11] SummarizedExperiment_1.38.1 Biobase_2.68.0              #> [13] GenomicRanges_1.60.0        GenomeInfoDb_1.44.0         #> [15] IRanges_2.42.0              S4Vectors_0.46.0            #> [17] MatrixGenerics_1.20.0       matrixStats_1.5.0           #> [19] BiocGenerics_0.54.0         generics_0.1.4              #> [21] MapRtools_0.36              geneticMapR_0.0.0.9000      #>  #> loaded via a namespace (and not attached): #>  [1] DBI_1.2.3                bitops_1.0-9             rlang_1.1.6              #>  [4] magrittr_2.0.3           RSQLite_2.3.11           compiler_4.5.0           #>  [7] GenomicFeatures_1.60.0   mgcv_1.9-1               systemfonts_1.2.3        #> [10] vctrs_0.6.5              stringr_1.5.1            pkgconfig_2.0.3          #> [13] crayon_1.5.3             fastmap_1.2.0            backports_1.5.0          #> [16] CVXR_1.0-15              labeling_0.4.3           ca_0.71.1                #> [19] rmarkdown_2.29           UCSC.utils_1.4.0         ragg_1.4.0               #> [22] purrr_1.0.4              bit_4.6.0                xfun_0.52                #> [25] cachem_1.1.0             Rmpfr_1.1-0              jsonlite_2.0.0           #> [28] splines2_0.5.4           blob_1.2.4               gmp_0.7-5                #> [31] DelayedArray_0.34.1      BiocParallel_1.42.0      broom_1.0.8              #> [34] parallel_4.5.0           R6_2.6.1                 bslib_0.9.0              #> [37] stringi_1.8.7            RColorBrewer_1.1-3       rtracklayer_1.68.0       #> [40] car_3.1-3                jquerylib_0.1.4          Rcpp_1.0.14              #> [43] iterators_1.0.14         knitr_1.50               Matrix_1.7-3             #> [46] splines_4.5.0            tidyselect_1.2.1         abind_1.4-8              #> [49] yaml_2.3.10              TSP_1.2-4                codetools_0.2-20         #> [52] curl_6.3.0               lattice_0.22-6           withr_3.0.2              #> [55] KEGGREST_1.48.0          evaluate_1.0.3           desc_1.4.3               #> [58] ggdist_3.3.3             pillar_1.10.2            carData_3.0-5            #> [61] foreach_1.5.2            distributional_0.5.0     RCurl_1.98-1.17          #> [64] scales_1.4.0             glue_1.8.0               tools_4.5.0              #> [67] BiocIO_1.18.0            BSgenome_1.76.0          GenomicAlignments_1.44.0 #> [70] ggsignif_0.6.4           registry_0.5-1           XML_3.99-0.18            #> [73] fs_1.6.6                 cowplot_1.1.3            seriation_1.5.7          #> [76] AnnotationDbi_1.70.0     nlme_3.1-168             GenomeInfoDbData_1.2.14  #> [79] restfulr_0.0.15          Formula_1.2-5            cli_3.6.5                #> [82] HMM_1.0.2                textshaping_1.0.1        S4Arrays_1.8.0           #> [85] scam_1.2-18              gtable_0.3.6             rstatix_0.7.2            #> [88] sass_0.4.10              digest_0.6.37            SparseArray_1.8.0        #> [91] rjson_0.2.23             htmlwidgets_1.6.4        farver_2.1.2             #> [94] memoise_2.0.1            htmltools_0.5.8.1        pkgdown_2.1.3            #> [97] lifecycle_1.0.4          httr_1.4.7               bit64_4.6.0-1"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/geneticMapR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"geneticMapR","text":"","code":"# Get devtools if needed if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") }  #Install geneticMapR devtools::install_github(\"vegaalfaro/geneticMapR\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/geneticMapR.html","id":"recommendations","dir":"Articles","previous_headings":"","what":"Recommendations","title":"geneticMapR","text":"genotyping, critical include DNA parental lines F1 individuals. Ideally, actual plants used create population, especially outcrossing species like carrot beet. tissue original parents F1 unavailable, use samples plants genotype. However, outcrossing species, even inbred lines may show unexpected intra-genotype diversity. ’ve seen firsthand carrots. Parental genotypes essential recoding phasing markers reflect parental inheritance, core step genetic mapping. ’re also helpful resolving problematic markers understanding residual heterozygosity, common many populations. parents F1 genotyped prove invaluable genetic mapping project.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/geneticMapR.html","id":"using-your-own-data","dir":"Articles","previous_headings":"","what":"Using Your Own Data","title":"geneticMapR","text":"Ther purpose package use data. can use genotype matrix geneticMapR. Functions like convert_to_dosage() convert_to_dosage_flex() help format raw genotype calls phased numeric values compatible package. unfiltered VCF-derived matrices, make sure : Filter bi-allelic SNPs. Remove non-polymorphic markers. Keep SNPs sufficient depth genotype quality scores, varies project population. need help pre-mapping step, check bcftools_tutorial github vegaalfaro/bcftoolsR. Still development.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/geneticMapR.html","id":"where-to-start","dir":"Articles","previous_headings":"","what":"Where to start?","title":"geneticMapR","text":"geneticMapR helps construct genetic maps F2 mapping populations. primarily designed diploid species, functions also support polyploids. get started, ’ll need essential files: Genotype file: matrix individuals scored genotype across multiple loci genome. Phenotype file: One traits measured across individuals, possibly across time environments (multi-environment trials), depending species. geneticMapR provides example data walk mapping process. ’ll start example VCF[https://samtools.github.io/hts-specs/VCFv4.2.pdf] file typical output next generation sequencing platforms like genotyping sequencing (GBS)","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/geneticMapR.html","id":"documentation","dir":"Articles","previous_headings":"","what":"Documentation","title":"geneticMapR","text":"Check articles tab systematic example VCF Effect Plots.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Phenotypic Data Part I","text":"script analyzes prepares phenotype data genetic mapping. Like phenotypic dataset errors go fix. Notes: IDs 5053–5060 missing values Geno field; assign “Program-Round-2”. Geno value “P1-OG-Mcgregor” “OG-Mcgregor”—actual parent identity irrelevant stage. ID column numeric; append “-F2” entry (e.g., “1001-F2”) match genotype file formatting. Phenotype IDs match genotype entries, though latter include extra well/plate info (e.g., “1001-F2-Alpha-A1”). visualization, remove Parents, F1s, population 1633 format phenotype file R/qtl.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno.html","id":"libraries","dir":"Articles","previous_headings":"","what":"Libraries","title":"Phenotypic Data Part I","text":"","code":"library(geneticMapR) library(stringr) library(dplyr) library(ggdist) library(ggplot2) library(rlang) library(ggpubr) library(readxl)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Phenotypic Data Part I","text":"Feel free explore phenotype file. file need contains data 3 populations working one.","code":"# Phenotype url1 <- \"https://raw.githubusercontent.com/vegaalfaro/geneticMapRFiles/refs/heads/main/phenotype/phenotypes-binary.csv\"  # Download file if (!file.exists(\"local_copy_phenotypes-binary.csv\")) {   download.file(url1, destfile = \"local_copy_phenotypes-binary.csv\")}  # Read pheno <- read.csv(\"local_copy_phenotypes-binary.csv\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno.html","id":"curation","dir":"Articles","previous_headings":"","what":"Curation","title":"Phenotypic Data Part I","text":"","code":"#--- Data curation ----  # 1. Populate correctly the Geno columns for IDs 5053:5060 pheno$Geno[pheno$ID %in% 5053:5060] <- \"Program-Round2\"  # 2. Rename parents OGMacgregor and Program Round1 pheno$Geno <- str_remove(pheno$Geno, \"P1-|P2-\")  # 3. Change the ID column pheno$IDs <- paste(pheno$ID, pheno$Gen, sep = \"-\")   # Most important variables vars <- names(pheno)[c(9, 10, 16, 22, 23, 24, 26)] response_vars <- vars #make a copy  # Print variables we'll be keeping or working with vars #> [1] \"biomass\"            \"max_width\"          \"width_50\"           #> [4] \"length\"             \"length_width_ratio\" \"shoulder_top\"       #> [7] \"tip_angle_top\""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno.html","id":"data-exploration","dir":"Articles","previous_headings":"","what":"Data Exploration","title":"Phenotypic Data Part I","text":"begin calculating basic statistics. Geno column indicates group individual belongs. three groups 107 individuals, correspond F2 populations. addition, dataset includes entries parents F1s segregating F2 populations.","code":"# Means by the column genotype for one variable means_LW <- pheno %>%    group_by(Geno) %>%    summarize(mean = mean(length_width_ratio),             sd = sd(length_width_ratio),             min = min(length_width_ratio),             max = max(length_width_ratio),             n = n()             ) head(means_LW, n=10) #> # A tibble: 10 × 6 #>    Geno                       mean     sd   min   max     n #>    <chr>                     <dbl>  <dbl> <dbl> <dbl> <int> #>  1 1592-ConicalxRound-F2     2.08  0.462   1.09  3.55   166 #>  2 1629-CylindricalxFlat-F2  1.52  0.407   0.79  2.56   107 #>  3 1633-RoundxCylindrical-F2 1.48  0.279   0.97  2.52   358 #>  4 Cylindra                  2.63  0.456   1.91  3.28    11 #>  5 F1-1592                   1.04  0.174   0.91  1.34     5 #>  6 F1-1633                   1.44  0.212   1.19  1.73     8 #>  7 Mono                      0.692 0.0897  0.59  0.88     8 #>  8 OG-Mcgregor               3.50  0.896   2.17  4.59     6 #>  9 Program-Round1            0.975 0.124   0.83  1.14     6 #> 10 Program-Round2            1.44  0.802   0.95  3.35     8"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno.html","id":"multiple-traits","dir":"Articles","previous_headings":"Data Exploration","what":"Multiple traits","title":"Phenotypic Data Part I","text":"multiple traits, loop help estimate statistics trait save list.","code":"# List of columns/traits to compute statistics response_vars <- vars  # Create empty vector to store results  response_var_stats <- list()  # Iterate for each column  for (col in response_vars){   # compute statistics    stats <- pheno %>%     group_by(Geno) %>%     summarize(across({{ col }}, list(       mean = mean,       sd = sd,       min = min,       max = max,        n = ~sum(!is.na(.))     )),     .groups = \"drop\")      # Add to the results list   response_var_stats[[col]] <- stats    }  print(response_var_stats) #> $biomass #> # A tibble: 10 × 6 #>    Geno                biomass_mean biomass_sd biomass_min biomass_max biomass_n #>    <chr>                      <dbl>      <dbl>       <dbl>       <dbl>     <int> #>  1 1592-ConicalxRound…        3648.      2573.        321.      14046.       166 #>  2 1629-CylindricalxF…        7140.      3633.       1119.      16989.       107 #>  3 1633-RoundxCylindr…        4440.      2830.        715.      15780.       358 #>  4 Cylindra                   6107.      2326.       2644.       9417.        11 #>  5 F1-1592                    4787.      2458.       2121.       8134.         5 #>  6 F1-1633                    7574.      4118.       2751.      14791.         8 #>  7 Mono                       4633.      1241.       2930.       6327.         8 #>  8 OG-Mcgregor                5112.      2290.       3041.       8550.         6 #>  9 Program-Round1             5498.      1004.       4489.       7215.         6 #> 10 Program-Round2             3763.      3337.       1356.      11839.         8 #>  #> $max_width #> # A tibble: 10 × 6 #>    Geno      max_width_mean max_width_sd max_width_min max_width_max max_width_n #>    <chr>              <dbl>        <dbl>         <dbl>         <dbl>       <int> #>  1 1592-Con…           54.4        19.6           17.4         119.          166 #>  2 1629-Cyl…           78.0        18.9           37.1         117.          107 #>  3 1633-Rou…           61.4        18.0           26.1         112.          358 #>  4 Cylindra            57.8        11.3           38.5          71.3          11 #>  5 F1-1592             78.8        23.2           49.8         107.            5 #>  6 F1-1633             81.1        17.5           53.2         107.            8 #>  7 Mono                92.4        14.5           70.0         112.            8 #>  8 OG-Mcgre…           47.7         7.69          37.4          56.7           6 #>  9 Program-…           86.3         9.55          73.2         103.            6 #> 10 Program-…           58.1        11.2           38.4          71.8           8 #>  #> $width_50 #> # A tibble: 10 × 6 #>    Geno           width_50_mean width_50_sd width_50_min width_50_max width_50_n #>    <chr>                  <dbl>       <dbl>        <dbl>        <dbl>      <int> #>  1 1592-Conicalx…          29.6        14.9         7.31         73.5        166 #>  2 1629-Cylindri…          73.2        18.7        36.3         113.         107 #>  3 1633-RoundxCy…          54.1        16.3        20.5          98.0        358 #>  4 Cylindra                47.6        10.9        33.0          63.2         11 #>  5 F1-1592                 75.5        25.1        42.7         105.           5 #>  6 F1-1633                 74.9        18.2        44.1         103.           8 #>  7 Mono                    90.9        13.4        69.9         107.           8 #>  8 OG-Mcgregor             31.1        11.9        11.5          45.5          6 #>  9 Program-Round1          84.2        10.7        68.8         102.           6 #> 10 Program-Round2          51.7        13.4        24.5          65.8          8 #>  #> $length #> # A tibble: 10 × 6 #>    Geno                     length_mean length_sd length_min length_max length_n #>    <chr>                          <dbl>     <dbl>      <dbl>      <dbl>    <int> #>  1 1592-ConicalxRound-F2          112.      43.8        33.2      245.       166 #>  2 1629-CylindricalxFlat-F2       119.      42.2        38.7      228.       107 #>  3 1633-RoundxCylindrical-…        91.3     33.6        36.2      232.       358 #>  4 Cylindra                       150.      29.9        96.4      202.        11 #>  5 F1-1592                         79.4     15.7        63.5      100.         5 #>  6 F1-1633                        118.      37.4        81.9      175.         8 #>  7 Mono                            63.5      9.68       50.6       76.9        8 #>  8 OG-Mcgregor                    168.      53.8        98.4      252.         6 #>  9 Program-Round1                  83.2      8.02       72.6       94.9        6 #> 10 Program-Round2                  85.5     62.8        56.2      241.         8 #>  #> $length_width_ratio #> # A tibble: 10 × 6 #>    Geno      length_width_ratio_m…¹ length_width_ratio_sd length_width_ratio_min #>    <chr>                      <dbl>                 <dbl>                  <dbl> #>  1 1592-Con…                  2.08                 0.462                    1.09 #>  2 1629-Cyl…                  1.52                 0.407                    0.79 #>  3 1633-Rou…                  1.48                 0.279                    0.97 #>  4 Cylindra                   2.63                 0.456                    1.91 #>  5 F1-1592                    1.04                 0.174                    0.91 #>  6 F1-1633                    1.44                 0.212                    1.19 #>  7 Mono                       0.692                0.0897                   0.59 #>  8 OG-Mcgre…                  3.50                 0.896                    2.17 #>  9 Program-…                  0.975                0.124                    0.83 #> 10 Program-…                  1.44                 0.802                    0.95 #> # ℹ abbreviated name: ¹​length_width_ratio_mean #> # ℹ 2 more variables: length_width_ratio_max <dbl>, length_width_ratio_n <int> #>  #> $shoulder_top #> # A tibble: 10 × 6 #>    Geno      shoulder_top_mean shoulder_top_sd shoulder_top_min shoulder_top_max #>    <chr>                 <dbl>           <dbl>            <dbl>            <dbl> #>  1 1592-Con…              86.7            86.6            0.665            651.  #>  2 1629-Cyl…             185.            104.            22.6              530.  #>  3 1633-Rou…             116.             80.5           10.9              614.  #>  4 Cylindra              141.             68.9           58.2              275.  #>  5 F1-1592               171.            102.            63.0              303.  #>  6 F1-1633               218.            104.            93.5              380.  #>  7 Mono                  116.             48.2           37.5              203.  #>  8 OG-Mcgre…              35.6            33.1            0.886             92.5 #>  9 Program-…             162.             50.9           80.6              219.  #> 10 Program-…              87.9            62.8           29.1              224.  #> # ℹ 1 more variable: shoulder_top_n <int> #>  #> $tip_angle_top #> # A tibble: 10 × 6 #>    Geno  tip_angle_top_mean tip_angle_top_sd tip_angle_top_min tip_angle_top_max #>    <chr>              <dbl>            <dbl>             <dbl>             <dbl> #>  1 1592…               19.1            12.9               0                 60.0 #>  2 1629…               44.1            15.6               2.84              74.4 #>  3 1633…               41.4            12.8               1.89              68.4 #>  4 Cyli…               28.2            16.6               8.52              60.7 #>  5 F1-1…               46.4            25.4               3.40              66.8 #>  6 F1-1…               32.5            16.1               3.66              52.4 #>  7 Mono                69.4             6.94             59.1               77.9 #>  8 OG-M…               19.0             9.91              1.05              29.9 #>  9 Prog…               58.1             6.96             47.0               65.9 #> 10 Prog…               42.8            21.0              11.3               63.6 #> # ℹ 1 more variable: tip_angle_top_n <int>"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno.html","id":"subset","dir":"Articles","previous_headings":"","what":"Subset","title":"Phenotypic Data Part I","text":"interested population 2. data need subset .","code":"# Population 2 Pop2 <- pheno[pheno$Geno %in% c(\"1629-CylindricalxFlat-F2\",                                  \"Cylindra\",                                  \"F1-1629\",                                  \"Mono\"), ]"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno.html","id":"parents-data","dir":"Articles","previous_headings":"Subset","what":"Parents data","title":"Phenotypic Data Part I","text":"can also subset data F2parents. Including parents phenotypic evaluations useful comparison helps interpret rank relative progeny segregating populations. ’s generally good practice include parental data screening F2 individuals , least, collect phenotypic data parents reference.","code":"#--- Subset parents only----  # Subset parents all_parents <- pheno[pheno$Gen %in% c(\"P\"),]  # Subset parents of population 1 parents <- pheno[pheno$Geno %in% c(\"OG-Mcgregor\",                                     \"Program-Round1\"  ),]"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno.html","id":"multiple-populations","dir":"Articles","previous_headings":"Subset","what":"Multiple populations","title":"Phenotypic Data Part I","text":"multiple populations traits combined single dataset, can use code like example compare . case, show data three populations illustrate approach using two traits example.","code":"plots2 <- list()  for (col in response_vars) {   plot <- ggplot(pheno %>% filter(Geno %in% c(\"1592-ConicalxRound-F2\",                                                \"1633-RoundxCylindrical-F2\",                                                \"1629-CylindricalxFlat-F2\")),                   aes(x = Geno,                       y = !!sym(col),                       fill = Geno)) +          geom_violin(alpha = 0.5, color = \"#2C3E50\") +  # Rain (density)     geom_boxplot(width = 0.2, alpha = 0.7, color = \"#2C3E50\", outlier.shape = NA) +  # Cloud (boxplot)     geom_jitter(width = 0.15, alpha = 0.6, size = 1.5, color = \"#A680B8\") +  # Drops (data points)     labs(x = \"Group\", y = col, title = paste0(\"Raincloud Plot of \", col)) +     theme_minimal(base_size = 14) +     theme(       plot.title = element_text(size = 13, face = \"bold\"),       axis.text.x = element_text(size = 12, color = \"#34495E\"),        axis.text.y = element_text(size = 12, color = \"#34495E\"),        axis.title.x = element_text(size = 12.5, face = \"bold\"),        axis.title.y = element_text(size = 12.5, face = \"bold\"),       panel.background = element_rect(fill = \"#FAF3E0\", color = NA), # Light beige background       panel.grid.major = element_line(color = \"#D5DBDB\", size = 0.5),       panel.grid.minor = element_blank(),       legend.position = \"none\"     ) + coord_flip()      plots2[[col]] <- plot }  print(plots2[vars][1:2])   # Run this #> $biomass #>  #> $max_width"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno.html","id":"publication-ready-plots-for-parent-differences","dir":"Articles","previous_headings":"","what":"Publication ready plots for parent differences","title":"Phenotypic Data Part I","text":"previous linkage mapping projects, ’ve found useful highlight differences among parents (see, example, publication: https://doi.org/10.1093/g3journal/jkae041). case parents Cylindra Mono, two table beet varieties , demonstrate create high-quality, publication-ready plot shows differences among parental types. code designed work multiple traits work one variable minor refactoring. show 2 traits example purposes.","code":"# Population 2 response_vars <- vars  # Y-Axis labels  ylab <- c(expression(Biomass ~ (mm ^ 2)),           \"Maximum width (mm)\",           \"Width 50 (mm)\",           \"Length (mm)\",           \"Length to width ratio (mm)\",           expression(\"Shoulder area\" ~ (mm ^ 2)),           \"Tip angle (degrees)\")  # Subset parents of population 2 parents2 <- pheno[pheno$Geno %in% c(\"Mono\",                                     \"Cylindra\"  ),]   plots_pa2 <- list()  # Initialize the list  for (i in seq_along(vars)) {   col <- vars[i]  # Extract column name      plot <- ggplot(parents2,                  aes(x = Geno,                       y = !!sym(col),                       fill = Geno)) +     # Add half-eye distribution     ggdist::stat_halfeye(       adjust = 0.85,       alpha = 0.85,       width = 0.6,       .width = 0,       justification = -0.2,       point_colour = NA     ) +     # Add boxplot     geom_boxplot(       width = 0.15,       alpha = 0.4,        outlier.shape = NA,       show.legend = FALSE     ) +     # Add points     geom_point(       aes(color = factor(Geno)),       size = 1.5,       alpha = 0.5,        position = position_jitter(seed = 1, width = 0.1),       show.legend = FALSE # Remove legend for points     ) +     # Labels and aesthetics     labs(x = \"\",           y = ylab[i], # Correctly indexing ylab          title = \"Population 2\"     ) +     theme_minimal(base_size = 14) +     theme(       plot.title = element_text(size = 13),       axis.text.x = element_text(size = 12, color = \"#34495E\"),        axis.text.y = element_text(size = 12, color = \"#34495E\"),        panel.background = element_rect(fill = \"#FAF3E0\", color = NA), #  background       panel.grid.major = element_line(color = \"#D5DBDB\", size = 0.1),       panel.grid.minor = element_blank(),       legend.position = \"none\"     ) +      coord_flip()      plots_pa2[[col]] <- plot  # Store plot in the list }  # Check stored plots plots_pa2[1:2] # Run this #> $biomass #>  #> $max_width"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno_part_2.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Phenotypic Data Part II","text":"vignette deal properly reproducible way work phenotypic genotypic data format compatible R/qtl, widely used package linkage mapping. main objective article demonstrate use format_qtl_input function. function formats genotype, map, phenotype files QTL analysis R/qtl. allows user specify whether genotype data converted dosage ABH format used . need 3 critical files: genotype file map phenotype file Let’s get really easy use function put together format R/qtl can understand. main advantage using function automates integration map, phenotype, genotype data. need redo phenotypic analysis later, script allows reproducibly update files make process much easier.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno_part_2.html","id":"libraries","dir":"Articles","previous_headings":"","what":"Libraries","title":"Phenotypic Data Part II","text":"","code":"library(geneticMapR) library(stringr) library(dplyr) library(ggdist) library(ggplot2) library(rlang) library(ggpubr) library(readxl)"},{"path":[]},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno_part_2.html","id":"phenotype","dir":"Articles","previous_headings":"Data","what":"Phenotype","title":"Phenotypic Data Part II","text":"continue data previous script. Preview first 7 columns phenotype dataset addition, need meta-data available data repository geneticMapRFiles. file ID contains column VCF_name match ID genotype matrix. phenotype genotype files share individuals names slightly different. ID file, 1001-F2-Alpha-A1, 1002-F2-Alpha-B1, 1003-F2-Alpha-C1). share parto name need make match. Preview ID Meta-data","code":"# Phenotype url1 <- \"https://raw.githubusercontent.com/vegaalfaro/geneticMapRFiles/refs/heads/main/phenotype/phenotypes-binary.csv\"  # Download file if (!file.exists(\"local_copy_phenotypes-binary.csv\")) {   download.file(url1, destfile = \"local_copy_phenotypes-binary.csv\")}  # Read pheno <- read.csv(\"local_copy_phenotypes-binary.csv\")  # Most important variables vars <- names(pheno)[c(9, 10, 16, 22, 23, 24, 26)] response_vars <- vars #make a copy  knitr::kable(head(pheno[, 1:7]), caption = \"Preview of the first 7 columns of the phenotype dataset\") url2 <- \"https://github.com/vegaalfaro/geneticMapRFiles/raw/main/IDs/ID.csv\"  # Download file if (!file.exists(\"local_copy_ID.csv\")) {   download.file(url2, destfile = \"local_copy_ID.csv\")}  # Read ID_Pedigrees <- read.csv(\"local_copy_ID.csv\")  # Make as character ID_Pedigrees$ID <- as.character(ID_Pedigrees$ID)  head(ID_Pedigrees) #>     ID Sample_Name Population Type         VCF_name #> 1 1001     1001-F2       1592   F2 1001-F2-Alpha-A1 #> 2 1002     1002-F2       1592   F2 1002-F2-Alpha-B1 #> 3 1003     1003-F2       1592   F2 1003-F2-Alpha-C1 #> 4 1004     1004-F2       1592   F2 1004-F2-Alpha-D1 #> 5 1005     1005-F2       1592   F2 1005-F2-Alpha-E1 #> 6 1006     1006-F2       1592   F2 1006-F2-Alpha-F1 knitr::kable(head(ID_Pedigrees), caption = \"Preview of the ID Meta-data\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno_part_2.html","id":"genotype-data","dir":"Articles","previous_headings":"Data","what":"Genotype data","title":"Phenotypic Data Part II","text":"’ll load ordered genotype matrix worked previous scripts avaialbe GitHub repository geneticMapRFiles.","code":"url3 <- \"https://github.com/vegaalfaro/geneticMapRFiles/raw/main/R_data/genotype_matrices_hmm_pop2-2025-03-12.RData\"  download.file(url3, destfile = \"local_copy_geno.RData\", mode = \"wb\")  load(\"local_copy_geno.RData\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno_part_2.html","id":"maps","dir":"Articles","previous_headings":"Data","what":"Maps","title":"Phenotypic Data Part II","text":"code loads maps worked saved previous script.","code":"url4 <- \"https://github.com/vegaalfaro/geneticMapRFiles/raw/main/R_data/genetic_maps_pop2-2025-06-06.RData\"  download.file(url4, destfile = \"local_copy_maps.RData\", mode = \"wb\")  load(\"local_copy_maps.RData\")"},{"path":[]},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno_part_2.html","id":"phenotype-1","dir":"Articles","previous_headings":"Prepare data for R/QTL","what":"Phenotype","title":"Phenotypic Data Part II","text":"section filters dataset include F2 individuals, excluding parents F1s. also matches phenotype IDs corresponding VCF IDs integration genotypic data, selects relevant columns required downstream analysis R/qtl. Preview columns phenotypic data Please notice phenotype file Pop2_progeny got glimpse, ID end. ID column really needed R/qtl, fact detects another phenotype trait. phenotype ready. Let’s move map file.","code":"# We subset like we did in the previous script. Pop2 <- pheno[pheno$Geno %in% c(\"1629-CylindricalxFlat-F2\",                                  \"Cylindra\",                                  \"F1-1629\",                                  \"Mono\"), ]  # Keep only F2 Individuals Pop2_progeny <- Pop2[Pop2$Gen == \"F2\",] Pop2_progeny$ID <- as.character(Pop2_progeny$ID) # Declare ID as character  # Add VCF ID (ID that matches the geno file) Pop2_progeny <- Pop2_progeny %>%   left_join(ID_Pedigrees %>% select(ID, VCF_name), by = \"ID\")  # Ensure \"VCF_name\" is included in the selection keep <- c(vars, \"VCF_name\")  # Select only the desired columns and rename VCF_name to ID Pop2_progeny <- Pop2_progeny %>%   ungroup() %>%  # Remove any existing grouping (Annoying dplyr thing)   dplyr::select(all_of(keep)) %>%   rename(ID = VCF_name)  knitr::kable(head(Pop2_progeny), caption = \"Preview of the columns of the phenotypic data\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno_part_2.html","id":"map","dir":"Articles","previous_headings":"Prepare data for R/QTL","what":"Map","title":"Phenotypic Data Part II","text":"use map uses reference genome order. function format_qtl_input requires columns marker, chrom position. ’ll change file slightly accomodate requirements.","code":"# Map map2 <- MAP_Ref_Genome_Order %>%   dplyr::mutate(marker = paste0(chrom, \"_\", position_Mb)) %>%   dplyr::select(marker, chrom, position = position_cM)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/pheno_part_2.html","id":"format-data-with-format_qtl_input","dir":"Articles","previous_headings":"","what":"Format data with format_qtl_input","title":"Phenotypic Data Part II","text":"code uses format_qtl_input convert phenotype, genetic map genotype matrix format can used load data R/qtl. Let’s look data. Preview csv file ready R/qtl look full rqtl.csv file, ’ll notice individuals phenotypic data genotypic data. expected—didn’t meet quality criteria genotyping, duplicates, recorded actually sequenced. problem: format_input_qtl handled assigning NAs, rqtl automatically ignore.","code":"# Example usage  result <- format_qtl_input(geno_genome_order, map2, Pop2_progeny, numeric = TRUE) #> Warning in format_qtl_input(geno_genome_order, map2, Pop2_progeny, numeric = #> TRUE): Warning: Some IDs in pheno do not match column names in geno.  # Save results as csv   write.csv(result, file = \"../data/rqtl.csv\", row.names = FALSE) knitr::kable(head(result[,1:15]), caption = \"Preview of csv file ready for R/qtl\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"QTL analysis using R/qtl and help from geneticMapR","text":"vignette demonstrates complete workflow QTL analysis using R/qtl package custom functions geneticMapR. includes genome scans, permutation testing, composite interval mapping, effect plot generation, estimation percent variance explained (PVE).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load Packages","title":"QTL analysis using R/qtl and help from geneticMapR","text":"","code":"library(qtl) library(tidyverse) library(geneticMapR)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"load-and-prepare-data","dir":"Articles","previous_headings":"","what":"Load and Prepare Data","title":"QTL analysis using R/qtl and help from geneticMapR","text":"","code":"M2 <- read.cross(\"csv\", \".\", \"../data/rqtl.csv\",                 genotypes = c(\"A\", \"H\", \"B\"), alleles = c(\"A\", \"B\"),                 na.strings = \"-\", estimate.map = FALSE) #>  --Read the following data: #>   107  individuals #>   950  markers #>   8  phenotypes #>  --Cross type: f2 M2 <- jittermap(M2) summary(M2) #>     F2 intercross #>  #>     No. individuals:    107  #>  #>     No. phenotypes:     8  #>     Percent phenotyped: 100 100 100 100 100 100 100 100  #>  #>     No. chromosomes:    9  #>         Autosomes:      1 2 3 4 5 6 7 8 9  #>  #>     Total markers:      950  #>     No. markers:        100 79 70 106 99 129 163 144 60  #>     Percent genotyped:  93.5  #>     Genotypes (%):      AA:24.8  AB:54.7  BB:20.5  not BB:0.0  not AA:0.0 names(M2$geno) #> [1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" response_vars <- names(M2$pheno)[-8]  # Remove ID colum"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"calculate-genotype-probabilities-and-visualize-map","dir":"Articles","previous_headings":"","what":"Calculate Genotype Probabilities and Visualize Map","title":"QTL analysis using R/qtl and help from geneticMapR","text":", used ggplot2 version map coverage visualization named plotMap geneticMapR. works scan.one object, data format R/qtl.","code":"M2 <- calc.genoprob(M2, step = 0.25, error.prob = 0.05, map.function = \"kosambi\") plotMap_gg(M2, horizontal = TRUE, color = \"red\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"genetic-map-statistics","dir":"Articles","previous_headings":"Calculate Genotype Probabilities and Visualize Map","what":"Genetic Map Statistics","title":"QTL analysis using R/qtl and help from geneticMapR","text":"Rqtl estimates statistics genetic map can calculated follows: Genetic Map Statistics","code":"# Let's look at the genetic map statistics mapStats2 <- summaryMap(M2) knitr::kable(head(mapStats2), caption = \"Genetic Map Statistics\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"permutation-tests","dir":"Articles","previous_headings":"","what":"Permutation Tests","title":"QTL analysis using R/qtl and help from geneticMapR","text":"identifying significant QTLs, determine LOD (Logarithm Odds) score threshold accounts multiple testing problem across genome. common way permutation test.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"what-is-a-permutation-test","dir":"Articles","previous_headings":"Permutation Tests","what":"What is a permutation test?","title":"QTL analysis using R/qtl and help from geneticMapR","text":"QTL mapping, permutation test used empirically estimate distribution maximum LOD scores null hypothesis QTL. done randomly shuffling phenotype values across individuals recalculating genome scan multiple times. repeating process, generate distribution LOD scores expected chance, allows us establish trait-specific significance thresholds.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"why-do-we-use-it","dir":"Articles","previous_headings":"Permutation Tests","what":"Why do we use it?","title":"QTL analysis using R/qtl and help from geneticMapR","text":"many positions across genome tested association trait, risk false positives increases. permutation test accounts genome-wide multiple testing provides reliable, data-driven threshold identifying significant QTLs.","code":"# number of permutations n_perm <- 1000   # Initialize an empty list to store the permutation results for each trait scanone_results2 <- list()  # Loop through each response variable (phenotypic trait) for (var in response_vars) {      # Run a genome-wide scan using the Haley-Knott regression method with 1000 permutations   # This estimates the LOD threshold for significance for the trait 'var'   perm_result <- scanone(M2, pheno.col = var, method = \"hk\", n.perm = n_perm)      # Summarize the permutation result (returns LOD threshold statistics)   # and store it in the list using the trait name as the key   scanone_results2[[var]] <- summary(perm_result) } #> Doing permutation in batch mode ... #> Doing permutation in batch mode ... #> Doing permutation in batch mode ... #> Doing permutation in batch mode ... #> Doing permutation in batch mode ... #> Doing permutation in batch mode ... #> Doing permutation in batch mode ...  # Assign trait names to the elements of the result list # This ensures that each element can be identified by the corresponding trait name names(scanone_results2) <- response_vars"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"genomewide-qtl-scan","dir":"Articles","previous_headings":"","what":"Genomewide QTL scan","title":"QTL analysis using R/qtl and help from geneticMapR","text":"can start genome scan. Note code set work multiple traits. ’s uses loops. LOD significance thresholds estimated using permutation tests, next step perform genome-wide QTL scans trait detect regions associated phenotypic variation.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"what-are-we-doing-here","dir":"Articles","previous_headings":"Genomewide QTL scan","what":"What are we doing here?","title":"QTL analysis using R/qtl and help from geneticMapR","text":"code chunk , loop trait (stored response_vars) apply scanone() function perform genome-wide scan QTLs using Haley-Knott regression (method = “hk”), standard method interval mapping R/qtl.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"why-this-matters","dir":"Articles","previous_headings":"Genomewide QTL scan","what":"Why this matters?","title":"QTL analysis using R/qtl and help from geneticMapR","text":"QTL scan calculates LOD scores across genome. scores quantify evidence QTL genomic position. Higher LOD values suggest stronger association genotype locus trait measured. made first genome scan! can plot results QTL scan trait. good first approximation can look results continue refine analysis. visualize LOD score profiles identify regions QTLs may located. Please note figures publication ready geneticMapR functions help create better QTL trace plot see articles .","code":"# Initialize an empty list to store genome scan results for each trait scanone_qtl_results2 <- list()  # Loop through each response variable (i.e., phenotype or trait of interest) for (var in response_vars) {      # Perform a genome-wide QTL scan using Haley-Knott regression   # This computes LOD scores across the genome for the given trait   qtl <- scanone(M2, pheno.col = var, method = \"hk\")      # Store the result (a data.frame of LOD scores by chromosome and position) in the list   scanone_qtl_results2[[var]] <- qtl } # Loop over the list of QTL scan results for each trait for (i in seq_along(scanone_qtl_results2)) {      # Plot the LOD score trace for the i-th trait   # The plot shows LOD scores across the genome   plot(scanone_qtl_results2[[i]],         main = paste(names(scanone_qtl_results2)[i], \"Pop2\"))  # Add trait name + \"Pop2\" as the title      # Add a horizontal line representing the 5% significance threshold (LOD cutoff)   # This threshold was previously obtained via permutation test and stored in scanone_results2   abline(h = scanone_results2[[i]][1], lty = \"dotted\")  # Dotted line for visual distinction }"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"composite-interval-mapping-cim","dir":"Articles","previous_headings":"","what":"Composite Interval Mapping (CIM)","title":"QTL analysis using R/qtl and help from geneticMapR","text":"improve QTL detection reduce effects background genetic noise, now perform Composite Interval Mapping (CIM).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"what-is-cim","dir":"Articles","previous_headings":"Composite Interval Mapping (CIM)","what":"What is CIM?","title":"QTL analysis using R/qtl and help from geneticMapR","text":"CIM extension interval mapping improves precision power including background markers (covariates) model. covariates help account genetic variation loci outside interval tested, reducing false positives improving detection closely linked QTLs. CIM helps : Control genetic background, reducing confounding effects Improve resolution detect QTLs Differentiate closely linked QTLs previous QTL trace plots, looks like 4 5 peaks length width ratio, can create look table information. significant signals identified remaining traits.","code":"# Create a lookup table that assigns the number of covariates (marcovars)  # to use for each trait during composite interval mapping lookup_table2 <- data.frame(   var = response_vars,                #Vector of trait names   covar = c(0, 0, 0, 0, 5, 0, 0)      #Corresponding number of covariates for each trait )  # Helper function to retrieve the number of covariates for a given trait get_n_covar <- function(var, lookup_table2) {   if (var %in% lookup_table2$var) {     # If the trait is listed in the lookup table, return its associated covariate number     return(lookup_table2$covar[lookup_table2$var == var])   } else {     # If the trait is not listed, return an error     stop(paste(\"No covariate info for\", var))   } }  # Initialize an empty list to store the CIM results for each trait cim_qtl_results2 <- list()  # Loop over each response variable (trait) for (var in response_vars) {      # Retrieve the number of covariates to use for this trait   n_marcovar <- get_n_covar(var, lookup_table2)      # Perform composite interval mapping using the Haley-Knott regression method   # pheno.col = var: Use the current trait as the phenotype   # n.marcovar: Number of background markers to use as covariates   # window = 10: Exclude markers within 10 cM of the test interval to avoid collinearity   # map.function = \"kosambi\": Use Kosambi mapping function for converting recombination to distance   qtl <- cim(M2, pheno.col = var, method = \"hk\", n.marcovar = n_marcovar,              window = 10, map.function = \"kosambi\")      # Store the CIM result in the list, by trait name   cim_qtl_results2[[var]] <- qtl }"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"permutation-test-for-cim","dir":"Articles","previous_headings":"Composite Interval Mapping (CIM)","what":"Permutation test for CIM","title":"QTL analysis using R/qtl and help from geneticMapR","text":"simple interval mapping, composite interval mapping also requires empirical significance thresholds determine whether QTL statistically significant. achieved permutation testing, simulates null distribution LOD scores.","code":"#Initialize an empty list to store  results  cim_perm_pop2 <- list()  # Loop through each  trait for (var in response_vars) {      # get the no. of covariates (background markers) to include for this trait   n_marcovar <- get_n_covar(var, lookup_table2)      # Perform a permutation test using CIM    #n.perm = 100: Number of permutations (typically 100–1000 adjust based on time/resources)   # - method = \"hk\": Use Haley-Knott regression   # - map.function = \"kosambi\": Use Kosambi map function for genetic distance   #- n.marcovar = n_marcovar: Number of background markers as covariates   # - window = 10: Exclude markers within 10 cM of the test interval   # - error.prob = 0.05: Default genotyping error probability   perm <- cim(M2, pheno.col = var, method = \"hk\", n.perm = 100,               map.function = \"kosambi\", n.marcovar = n_marcovar,               window = 10, error.prob = 0.05)      # Store the summarized permutation results (e.g., LOD thresholds) in the list   cim_perm_pop2[[var]] <- summary(perm) }  # Assign trait names as keys for easy identification names(cim_perm_pop2) <- response_vars"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"plotting-cim","dir":"Articles","previous_headings":"Composite Interval Mapping (CIM)","what":"Plotting CIM","title":"QTL analysis using R/qtl and help from geneticMapR","text":"performing Composite Interval Mapping (CIM) estimating trait-specific significance thresholds permutation testing, visualize LOD score profiles identify significant QTLs.  Please notice plot length--width ratio using CIM different plot previous regular genome scan. peaks seem clearer narrower CIM used.","code":"for (i in seq_along(cim_qtl_results2)) {   plot(cim_qtl_results2[[i]], main = paste(names(cim_qtl_results2)[i], \"Pop2 CIM\"))   abline(h = cim_perm_pop2[[i]][1], lty = \"dotted\") }"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"summary-of-significant-qtls","dir":"Articles","previous_headings":"","what":"Summary of Significant QTLs","title":"QTL analysis using R/qtl and help from geneticMapR","text":"can save results QTLs scan list query later.","code":"results_pop2 <- lapply(seq_along(cim_qtl_results2), function(i) {   summary(cim_qtl_results2[[i]], threshold = cim_perm_pop2[[i]][1]) }) names(results_pop2) <- names(cim_qtl_results2)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"lod-support-interval","dir":"Articles","previous_headings":"","what":"LOD Support Interval","title":"QTL analysis using R/qtl and help from geneticMapR","text":"estimate genomic region likely contain QTL, can calculate LOD support interval. interval defined region around QTL peak LOD score drops specified amount (commonly 1.5 units) maximum. approach helps define confidence intervals QTL positions assists narrowing candidate gene regions. example , use get_LOD_int() function extract 1.5-LOD drop support intervals trait length_width_ratio using cim_qtl_results2 object, genetic map M2, corresponding population results: output, lw_result_pop2, data frame listing start end positions LOD support intervals significant QTL. intervals provide useful bounds downstream analyses, identifying candidate genes comparing results across populations.","code":"lw_result_pop2 <- get_LOD_int(M2, cim_qtl_results2, results_pop2,                               trait = \"length_width_ratio\", drop = 1.5)"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"effect-plots","dir":"Articles","previous_headings":"","what":"Effect Plots","title":"QTL analysis using R/qtl and help from geneticMapR","text":"can visualize allelic effects specific QTL using effect_plot() function. effect plot propose powerful shows distribution, median number individuals category. , load effect estimates generate plot QTL_1 associated length_width_ratio trait:  plot shows mean trait values genotype marker, helping interpret direction magnitude QTL effect. Repeat markers needed workflow makes really easy obtain effect plots QTLs! Notice plot, function effec_plot output phenotypic summary statistics genotype categories whole population individuals!","code":"effects2 <- read.csv(\"../data/rqtl.csv\")[-c(1:2), ]  # Let's Define the marker of interest for QTL_1 marker1 <- lw_result_pop2$QTL_1$usable_marker  # Let's create an effect plot with a default with flipped coords effect_plot(effects2, marker1, trait_name = \"length_width_ratio\",                 trait_label = \"Length-to-width ratio\") #> [[1]] #>  #> [[2]] #> # A tibble: 3 × 6 #>   CHR4_12690811 median   max   min count    sd #>   <fct>          <dbl> <dbl> <dbl> <int> <dbl> #> 1 A               1.88  2.56  1.21    18 0.452 #> 2 H               1.52  2.22  0.79    56 0.344 #> 3 B               1.18  2.1   0.79    26 0.374 #>  #> [[3]] #>   pop_sd pop_mean pop_median pop_max #> 1   0.42     1.52       1.48    2.56 # Let's Define the marker of interest for QTL_1 marker2 <- lw_result_pop2$QTL_2$usable_marker  # Let's create an effect plot with a default with flipped coords effect_plot(effects2, marker2, trait_name = \"length_width_ratio\",                 trait_label = \"Length-to-width ratio\") #> [[1]] #>  #> [[2]] #> # A tibble: 3 × 6 #>   CHR6_8692961 median   max   min count    sd #>   <fct>         <dbl> <dbl> <dbl> <int> <dbl> #> 1 A              1.85  2.56  1.17    25 0.391 #> 2 H              1.46  2.5   0.79    44 0.390 #> 3 B              1.3   2.27  0.79    31 0.366 #>  #> [[3]] #>   pop_sd pop_mean pop_median pop_max #> 1   0.42     1.52       1.48    2.56"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"percent-variance-explained-pve","dir":"Articles","previous_headings":"","what":"Percent Variance Explained (PVE)","title":"QTL analysis using R/qtl and help from geneticMapR","text":"identifying significant QTLs, can quantify much phenotypic variation QTL accounts . typically done calculating Percent Variance Explained using simple linear model.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"but-what-is-pve","dir":"Articles","previous_headings":"Percent Variance Explained (PVE)","what":"But what is PVE?","title":"QTL analysis using R/qtl and help from geneticMapR","text":"PVE represents proportion variation trait can attributed specific marker QTL. helps assess effect size QTL important controlling trait.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"interpretation","dir":"Articles","previous_headings":"Percent Variance Explained (PVE)","what":"Interpretation","title":"QTL analysis using R/qtl and help from geneticMapR","text":"R-squared value linear model indicates proportion variance length_width_ratio explained marker marker1. report PVE, simply multiply “Multiple R-squared” value 100. QTL chromosome 4 shown first effect plot PVE example explains 21.66% phenotypic variance look multiple R-squared.","code":"# CHR4 example # Select the marker name of interest, for example,a significant QTL on chromosome 4 colname <- marker1  # This should be a character string like \"CHR4_123456\"  # Extract the genotype data for this marker from the effects2 dataset effects2$sig_marker1_pop2 <- effects2[[colname]]  # Fit a linear model with the phenotype as the response and marker genotype as the predictor fit_CHR4 <- lm(length_width_ratio ~ 1 + sig_marker1_pop2, data = effects2)  # View the model summary, which includes the R-squared value used to calculate PVE summary(fit_CHR4) #>  #> Call: #> lm(formula = length_width_ratio ~ 1 + sig_marker1_pop2, data = effects2) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.72339 -0.30308 -0.03225  0.23661  0.81692  #>  #> Coefficients: #>                   Estimate Std. Error t value Pr(>|t|)     #> (Intercept)        1.88111    0.08792  21.396  < 2e-16 *** #> sig_marker1_pop2B -0.59803    0.11437  -5.229 9.81e-07 *** #> sig_marker1_pop2H -0.36772    0.10107  -3.638 0.000442 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.373 on 97 degrees of freedom #>   (7 observations deleted due to missingness) #> Multiple R-squared:  0.2201, Adjusted R-squared:  0.204  #> F-statistic: 13.69 on 2 and 97 DF,  p-value: 5.802e-06"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"save-results","dir":"Articles","previous_headings":"","what":"Save Results","title":"QTL analysis using R/qtl and help from geneticMapR","text":"","code":"save(cim_qtl_results2,       cim_perm_pop2,       M2,       effects2,      mapStats2,      scanone_qtl_results2,       scanone_results2,      file = \"../data/plot_trace_pop2.RData\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/articles/qtl_analysis.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"QTL analysis using R/qtl and help from geneticMapR","text":"vignette provides streamlined reproducible QTL mapping workflow using R/qtl custom plotting utilities genticMapR. steps shown allow detection, validation, QTLs efficient manner. Go next article learn better visualizing QTL results using functions geneticMapR.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrey Vega Alfaro. Author, maintainer.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vega Alfaro (2025). geneticMapR: Tools Making Genetic Map Construction Easier. R package version 0.0.0.9000, https://github.com/vegaalfaro/geneticMapR.","code":"@Manual{,   title = {geneticMapR: Tools for Making Genetic Map Construction Easier},   author = {Andrey {Vega Alfaro}},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/vegaalfaro/geneticMapR}, }"},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"geneticmapr-","dir":"","previous_headings":"","what":"Tools for Making Genetic Map Construction Easier","title":"Tools for Making Genetic Map Construction Easier","text":"geneticMapR simplifies construction genetic maps. Built top MapRtools R/qtl reproducible analysis. Optimized F2 diploid plant populations. functions generalized different experimental populations polyploids. geneticMapR designed help reproducible genetic map construction quantitative trait loci (QTL) analysis.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Making Genetic Map Construction Easier","text":"can install development version geneticMapR GitHub :","code":"# Get devtools if needed if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") }  #Install geneticMapR devtools::install_github(\"vegaalfaro/geneticMapR\")  # Load library library(geneticMapR)"},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"learn-geneticmapr","dir":"","previous_headings":"","what":"Learn geneticMapR","title":"Tools for Making Genetic Map Construction Easier","text":"Check Articles tab learn detail construct genetic maps F2 mapping populations. populations development. vignettes (articles) systematically designed teach create genetic maps learn functions along way. geneticMapR documentation also provides examples.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for Making Genetic Map Construction Easier","text":"example shows recode markers neither parent reference genome, common GBS data. Molecular markers (SNPs) must phased accurately trace allele inheritance progeny. recode general function can help :","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"recode-markers","dir":"","previous_headings":"Usage","what":"Recode markers","title":"Tools for Making Genetic Map Construction Easier","text":"","code":"# Load the example dataset data(\"simulated_geno\")  # Check markers previous to recoding print(simulated_geno) #>         Parent1 Parent2 F2_1 F2_2 F2_3 #> Marker1       0       2    0    1    2 #> Marker2       2       0    2    0    1 #> Marker3       0       2    1    2    1 #> Marker4       2       0    2    0    0 #> Marker5       0       2    0    2    1 #> Marker6       2       0    2    0    0  # Recode the markers using the recode() function phased <- geneticMapR::recode(simulated_geno, parent1 = \"Parent1\", parent2 = \"Parent2\")  # Print the output print(phased) #>         Parent1 Parent2 F2_1 F2_2 F2_3 #> Marker1       0       2    0    1    2 #> Marker2       0       2    0    2    1 #> Marker3       0       2    1    2    1 #> Marker4       0       2    0    2    2 #> Marker5       0       2    0    2    1 #> Marker6       0       2    0    2    2"},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"visualization-capabilities","dir":"","previous_headings":"Usage","what":"Visualization capabilities","title":"Tools for Making Genetic Map Construction Easier","text":"function generates QTL trace plot visualize significance scores across chromosomes one traits. highlights QTL peaks overlays customizable vertical lines","code":"library(geneticMapR) data(\"qtl_example\")       plot_qtl_trace(qtl_df = qtl_example$qtl_df,                 thresholds_df = qtl_example$thresholds,                   vline_df = qtl_example$vline,                   use_physical_pos = FALSE,                   x_angle = 0,                 trait_colors = qtl_example$colors,                 trait_labels = qtl_example$labels,                 plot_title = \"Population 1\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Tools for Making Genetic Map Construction Easier","text":"detailed documentation examples, visit geneticMapR","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/index.html","id":"hexlogo","dir":"","previous_headings":"","what":"Hexlogo","title":"Tools for Making Genetic Map Construction Easier","text":"Credit: Adriana Lopez","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/LD_decay_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot LD vs distance — LD_decay_plot","title":"Plot LD vs distance — LD_decay_plot","text":"Plot LD vs distance using asymptotic regression model.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/LD_decay_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot LD vs distance — LD_decay_plot","text":"","code":"LD_decay_plot(   data,   map,   max.pair = 10000,   max.loci = NULL,   position = \"bp\",   r2_threshold = 0.2,   xlim_range = c(0, 20),   show_vline = TRUE,   show_hline = TRUE,   seed = 123 )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/LD_decay_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot LD vs distance — LD_decay_plot","text":"data Genotype matrix (markers columns, individuals rows). Rownames marker names matcho marker column map. map Data frame columns 'chrom', 'marker', 'position' max.pair Maximum number r² pairs model (default: 1e4) max.loci Maximum number markers use per chromosome (default: NULL) position \"bp\" \"Mb\" (default: \"bp\") r2_threshold r² value decay distance calculation (default: 0.2), xlim_range Zoom range x axis, default c(0, 20). Set NULL see entire plot. show_vline show vertical line intersecting x-axis half-decay distance (default, TRUE) show_hline show horizontal line intersecting y-axis selected r² threshold (default, TRUE) seed Optional integer seed make random sampling reproducible. Default 123.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/LD_decay_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot LD vs distance — LD_decay_plot","text":"list containing: plot ggplot2 object points fitted curve (NULL fit fails) half_decay_dist Distance r² reaches specified threshold (NA estimable) model Fitted nls object (NULL fitting failed)","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/LD_decay_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot LD vs distance — LD_decay_plot","text":"asymptotic regression model fit using SSasymp. distance r² reaches specified threshold (e.g., 0.1 0.2) calculated returned. function calculates r² chromosome  follows general logic MapRtools::LD.plot uses function SSasymp model non-linear LD decay. function give quick simple estimate LD. sophisticated LD functions see David Gerard ldfast() processes chromosome separately compute pairwise r² values within chromosomes, combines results across chromosomes single dataset, fits one global LD decay model pooled data. cross-chromosome marker pairs considered. user interested LD per chromosome, provide map data file data pertaining chromosome interest.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/LD_decay_plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot LD vs distance — LD_decay_plot","text":"number rows (number marker pairs) larger max.pair (default 1e4), proceed random sampling.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert VCF Genotype Format to Dosage for Diploids — convert_to_dosage","title":"Convert VCF Genotype Format to Dosage for Diploids — convert_to_dosage","text":"function converts VCF genotype matrix (format \"0/0\", \"0/1\", \"1/1\") allele dosage values (0, 1, 2) representing count alternative allele. Mostly used within package. Check flexible convert_to_dosage_flex works polyploids.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert VCF Genotype Format to Dosage for Diploids — convert_to_dosage","text":"","code":"convert_to_dosage(GT)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert VCF Genotype Format to Dosage for Diploids — convert_to_dosage","text":"GT character matrix entry represents genotype VCF format (\"0/0\", \"0/1\", \"1/1\").","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert VCF Genotype Format to Dosage for Diploids — convert_to_dosage","text":"numeric matrix dimensions GT, value represents dosage alternate allele (0, 1, 2).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert VCF Genotype Format to Dosage for Diploids — convert_to_dosage","text":"Converts alleles numeric values sums compute alternate allele dosage. Retains original row column names input matrix.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert VCF Genotype Format to Dosage for Diploids — convert_to_dosage","text":"","code":"# Example genotype matrix in VCF format vcf_matrix <- matrix(c(\"0/0\", \"0/1\", \"1/1\",                        \"0/1\", \"0/0\", \"1/1\"),                      nrow = 2, ncol = 3,                      dimnames = list(c(\"Marker1\", \"Marker2\"),                                      c(\"Ind1\", \"Ind2\", \"Ind3\")))  # Convert to dosage dosage_matrix <- convert_to_dosage(vcf_matrix) print(dosage_matrix) #>         Ind1 Ind2 Ind3 #> Marker1    0    2    0 #> Marker2    1    1    2"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_advanced.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert VCF Genotype Format to Dosage (Advanced, Polyploid-Compatible) — convert_to_dosage_advanced","title":"Convert VCF Genotype Format to Dosage (Advanced, Polyploid-Compatible) — convert_to_dosage_advanced","text":"Converts matrix genotype calls VCF-style format (e.g., \"0/1\", \"1/1\", \"0/0/1/1\") numeric dosage values. Supports variable ploidy, multi-allelic variants (e.g., \"2\", \"3\"), includes optional outputs ploidy level, usable allele counts, normalized dosage.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_advanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert VCF Genotype Format to Dosage (Advanced, Polyploid-Compatible) — convert_to_dosage_advanced","text":"","code":"convert_to_dosage_advanced(   GT,   alt_alleles = c(\"1\"),   strict_missing = TRUE,   normalize = FALSE )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_advanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert VCF Genotype Format to Dosage (Advanced, Polyploid-Compatible) — convert_to_dosage_advanced","text":"GT character matrix genotypes VCF format (e.g., \"0/1/1/1\", \"1/1/1/1\"). alt_alleles character vector indicating allele values counted alternate (e.g., c(\"1\") c(\"1\", \"2\")). strict_missing Logical. TRUE (default), missing allele (.e., \".\") causes entire dosage value set NA. normalize Logical. TRUE, dosage values normalized ploidy level (.e., scaled 0-1). Default FALSE.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_advanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert VCF Genotype Format to Dosage (Advanced, Polyploid-Compatible) — convert_to_dosage_advanced","text":"list following elements: dosage: Matrix alternate allele dosage values. ploidy: Matrix number alleles per genotype (excluding NAs). usable_alleles: Matrix number non-missing alleles used dosage calculation.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_advanced.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert VCF Genotype Format to Dosage (Advanced, Polyploid-Compatible) — convert_to_dosage_advanced","text":"found ways generalizing function work complex situations previous versions function. function tested rigorously. Contact author issues.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_advanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert VCF Genotype Format to Dosage (Advanced, Polyploid-Compatible) — convert_to_dosage_advanced","text":"","code":"if (FALSE) { # \\dontrun{ vcf <- matrix(c(\"0/0/0/0\", \"1/1/1/1\", \"0/1/1/1\",                 \"1/1/1/1\", NA, \"0/1/./1\"),               nrow = 2, byrow = TRUE,               dimnames = list(c(\"Marker1\", \"Marker2\"),                               c(\"Ind1\", \"Ind2\", \"Ind3\")))  convert_to_dosage_advanced(vcf, alt_alleles = c(\"1\")) convert_to_dosage_advanced(vcf, alt_alleles = c(\"1\"), strict_missing = FALSE, normalize = TRUE)    set.seed(123)  # for reproducibility  # Function to generate one genotype (VCF-style) generate_genotype <- function(ploidy = 4, missing_rate = 0.05) {   alleles <- sample(c(0, 1, 2, \".\"), size = ploidy,   replace = TRUE,   prob = c(0.40, 0.40, 0.10, missing_rate)) paste(alleles, collapse = \"/\") }  # Parameters n_markers <- 100 n_individuals <- 10 ploidy <- 4  # tetraploid  genotype_matrix <- matrix(   data = replicate(n_markers * n_individuals, generate_genotype(ploidy = ploidy)),   nrow = n_markers,   ncol = n_individuals,   dimnames = list(     paste0(\"Marker\", seq_len(n_markers)),     paste0(\"Ind\", seq_len(n_individuals))   ) )  # Preview head(genotype_matrix)   result <- convert_to_dosage_advanced(genotype_matrix,                                      alt_alleles = c(\"1\", \"2\"),                                      strict_missing = TRUE,                                      normalize = FALSE)  # View dosage matrix head(result$dosage)  # View ploidy matrix head(result$ploidy)  # View number of usable alleles head(result$usable_alleles)  } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_flex.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert VCF Genotype Format to Dosage (Supports Polyploids and Missing Alleles) — convert_to_dosage_flex","title":"Convert VCF Genotype Format to Dosage (Supports Polyploids and Missing Alleles) — convert_to_dosage_flex","text":"Converts VCF genotype matrix (GT format e.g., \"0/0\", poplyplids \"0/0/1/1\") numeric dosage values representing count alternate alleles. Works ploidy (tested haploid hexaploid) allows control missing alleles (\".\") handled.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_flex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert VCF Genotype Format to Dosage (Supports Polyploids and Missing Alleles) — convert_to_dosage_flex","text":"","code":"convert_to_dosage_flex(GT, strict_missing = TRUE)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_flex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert VCF Genotype Format to Dosage (Supports Polyploids and Missing Alleles) — convert_to_dosage_flex","text":"GT character matrix genotypes VCF format (e.g., \"0/1/1/1\", \"1/1/1/1\"). strict_missing Logical. TRUE (default), missing allele (e.g., \".\") causes entire genotype set NA. FALSE, missing alleles ignored dosage calculated available alleles.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_flex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert VCF Genotype Format to Dosage (Supports Polyploids and Missing Alleles) — convert_to_dosage_flex","text":"numeric matrix dimensions names GT, value dosage alternate allele (assumed \"1\").","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_flex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert VCF Genotype Format to Dosage (Supports Polyploids and Missing Alleles) — convert_to_dosage_flex","text":"function flexible ploidy level — simply counts many \"1\" alleles exist genotype. Alleles split using either / |, phased unphased VCF data supported. Missing alleles (\".\") handled based strict_missing argument: TRUE: allele missing genotype, entire dosage returned NA. FALSE: Missing alleles ignored dosage calculated known alleles.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/convert_to_dosage_flex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert VCF Genotype Format to Dosage (Supports Polyploids and Missing Alleles) — convert_to_dosage_flex","text":"","code":"poly_vcf <- matrix(c(\"0/0/0/0\", \"1/1/1/1\", \"0/1/1/1\",                      \"1/1/1/1\", NA, \"0/1/./1\"),                    nrow = 2, byrow = TRUE,                    dimnames = list(c(\"Marker1\", \"Marker2\"),                                    c(\"Ind1\", \"Ind2\", \"Ind3\")))  # Strict handling: missing allele causes full NA convert_to_dosage_flex(poly_vcf, strict_missing = TRUE)   # Set whole cell to NA if \".\" present #>         Ind1 Ind2 Ind3 #> Marker1    0    4    3 #> Marker2    4   NA   NA  # Permissive handling: ignore missing and sum known alleles convert_to_dosage_flex(poly_vcf, strict_missing = FALSE)  # Ignore \".\" and sum what’s there #>         Ind1 Ind2 Ind3 #> Marker1    0    4    3 #> Marker2    4   NA    2"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/drop_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop Parents and F1 Individuals from a Data Frame — drop_parents","title":"Drop Parents and F1 Individuals from a Data Frame — drop_parents","text":"helper function removes specified parental F1 columns genotype dataset.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/drop_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop Parents and F1 Individuals from a Data Frame — drop_parents","text":"","code":"drop_parents(y, parent1 = \"P1\", parent2 = \"P2\", F1 = NULL)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/drop_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop Parents and F1 Individuals from a Data Frame — drop_parents","text":"y data frame individuals (including parents F1s) columns. parent1 Character. name first parent column removed. Default \"P1\". parent2 Character. name second parent column removed. Default \"P2\". F1 (Optional) Character. name F1 hybrid column removed. Default NULL.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/drop_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop Parents and F1 Individuals from a Data Frame — drop_parents","text":"data frame specified parent F1 columns removed.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/drop_parents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop Parents and F1 Individuals from a Data Frame — drop_parents","text":"y must coercible data frame. Checks specified columns exist attempting drop . removes columns present data frame. Preserves columns structure. multiple F1s present can declared using c() function","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/drop_parents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop Parents and F1 Individuals from a Data Frame — drop_parents","text":"","code":"# Example dataset geno_data <- data.frame(   Marker1 = c(0, 1, 2),   P1 = c(0, 0, 0),   P2 = c(2, 2, 2),   F1 = c(1, 1, 1),   Ind1 = c(0, 1, 2),   Ind2 = c(2, 0, 1) )  # Drop parents P1 and P2 filtered_data <- drop_parents(geno_data) print(filtered_data) #>   Marker1 F1 Ind1 Ind2 #> 1       0  1    0    2 #> 2       1  1    1    0 #> 3       2  1    2    1  # Drop parents and F1 filtered_data_f1 <- drop_parents(geno_data, F1 = \"F1\") print(filtered_data_f1) #>   Marker1 Ind1 Ind2 #> 1       0    0    2 #> 2       1    1    0 #> 3       2    2    1  # Example dataset2 geno_data2 <- data.frame(   Marker1 = c(0, 1, 2),   P1 = c(0, 0, 0),   P2 = c(2, 2, 2),   F1a = c(1, 1, 1),   F1b = c(1, 1, 1),   Ind1 = c(0, 1, 2),   Ind2 = c(2, 0, 1) )   # Drop parents and multiple F1s filtered_data_f1 <- drop_parents(geno_data, F1 = c(\"F1a\", \"F1b\")) print(filtered_data_f1) #>   Marker1 F1 Ind1 Ind2 #> 1       0  1    0    2 #> 2       1  1    1    0 #> 3       2  1    2    1"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/effect_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Powerful Effect Plots — effect_plot","title":"Powerful Effect Plots — effect_plot","text":"function generates powerful effect plots show relationship genotype classes marker (QTL) given trait. Works polyploids function computes summary statistics genotype class overlays plot. Optionally, can flip coordinate axes. Shows distributions measures spread individuals simply boxplot.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/effect_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Powerful Effect Plots — effect_plot","text":"","code":"effect_plot(   effects_df,   marker_name,   trait_name,   genotype_levels = c(\"A\", \"H\", \"B\"),   flip = TRUE,   trait_label = NULL )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/effect_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Powerful Effect Plots — effect_plot","text":"effects_df data frame containing least columns marker trait interest. work output format_qtl_inputwith modifications (first two rows removed). marker_name character string specifying name marker column effects_df. trait_name character string specifying name trait column effects_df. genotype_levels character vector indicating levels (genotype categories) marker. Default c(\"\", \"H\", \"B\"). flip Logical; TRUE, plot displayed flipped coordinates (horizontal layout). Default TRUE. trait_label Optional character string use y-axis label. NULL, trait name used.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/effect_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Powerful Effect Plots — effect_plot","text":"list three elements: [[1]] ggplot2 object showing distribution trait values genotype given marker. [[2]] data frame summary statistics (median, max, min, count, standard deviation) genotype. [[3]] data frame population-level summary statistics (mean, median, sd, max) trait.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/effect_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Powerful Effect Plots — effect_plot","text":"function performs following steps: Checks presence specified columns. Calculates summary statistics genotype. Constructs half-eye plot boxplot overlays annotations. uses ggplot2 plotting ggdist half-eye visualization.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/effect_plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Powerful Effect Plots — effect_plot","text":"half-eye visualization inspired work Cedric Scherer","code":""},{"path":[]},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Genotyping Error Rate — estimate_error","title":"Estimate Genotyping Error Rate — estimate_error","text":"function calculates genotyping error rate comparing original genotype matrix HMM-processed genotype matrix. error rate defined proportion genotype mismatches, ignoring missing values. Designed estimate error rate haplotype_reconstruction.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Genotyping Error Rate — estimate_error","text":"","code":"estimate_error(original_geno, processed_geno)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Genotyping Error Rate — estimate_error","text":"original_geno numeric genotype matrix : Rows represent genetic markers. Columns represent individuals. Values expected 0, 1, 2, NA missing data. processed_geno numeric genotype matrix dimensions original_geno, containing genotypes processed. Likely output haplotype_reconstruction. estimated error rate used haplotype_reconstruction accurate estimate ","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Genotyping Error Rate — estimate_error","text":"numeric value representing estimated genotyping error rate.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Genotyping Error Rate — estimate_error","text":"","code":"if (FALSE) { # \\dontrun{ # Example genotype matrices original <- matrix(c(0, 1, 2, NA, 1, 2, 0, 1, 2, 2, NA, 1),                    nrow = 4, ncol = 3) processed <- matrix(c(0, 1, 1, NA, 1, 2, 0, 2, 2, 2, NA, 1),                     nrow = 4, ncol = 3)  # Estimate genotyping error error_rate <- estimate_error(original, processed) print(error_rate) } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Genetic Map Positions — estimate_map","title":"Estimate Genetic Map Positions — estimate_map","text":"Calculates genetic map positions single chromosome using recombination frequency (RF) LOD scores genotype matrix. output standardized compatibility Marey plots.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Genetic Map Positions — estimate_map","text":"","code":"estimate_map(geno_matrix, model = \"Kosambi\", n_point = 20, pop.type = \"F2\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Genetic Map Positions — estimate_map","text":"geno_matrix genotype matrix (markers rows, individuals columns) one chromosome linkage group. model Character. Mapping function use: \"Kosambi\" (default) \"Haldane\". n_point Integer. n.point value interpolation estimating genetic positions. Default 20. pop.type Character. Population type: \"DH\", \"BC\", \"F2\" (default), \"S1\", \"RIL.self\", \"RIL.sib\".","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Genetic Map Positions — estimate_map","text":"data frame columns: chrom: Chromosome identifier position_Mb: Physical position megabases position_cM: Genetic distance centimorgans (estimated)","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Genetic Map Positions — estimate_map","text":"function uses MapRtools::MLEL() MapRtools::genetic_map() estimating genetic positions. output ready used plot_marey().","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/estimate_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Genetic Map Positions — estimate_map","text":"","code":"if (FALSE) { # \\dontrun{ map_chr1 <- estimate_map(geno_matrix = chr1_geno_matrix, n_point = 20) plot_marey(map_chr1, chrom = \"CHR1\") } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/extract_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Physical Map from Chromosome and Position from Row Names — extract_map","title":"Create a Physical Map from Chromosome and Position from Row Names — extract_map","text":"function extracts chromosome position information row names genotype matrix. row names expected follow format components (example chromosome, position) separated symbol (e.g., \"_\", \"-\", \".\"). user can specify part row name corresponds chromosome position using chrom_index pos_index, can customize delimiter using split_symbol.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/extract_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Physical Map from Chromosome and Position from Row Names — extract_map","text":"","code":"extract_map(   genotype_matrix,   chrom_index = 1,   pos_index = 2,   markers = FALSE,   split_symbol = \"_\" )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/extract_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Physical Map from Chromosome and Position from Row Names — extract_map","text":"genotype_matrix matrix : Rows correspond genetic markers. Row names contain marker identifiers multiple components separated delimiter (e.g., \"A_1_200\", \"B-2-300\", \"C.3.400\"). Columns correspond individuals (used function part input structure). chrom_index Integer. index chromosome identifier split row name. Default 1 (first element). pos_index Integer. index position identifier split row name. Default 2 (second element). markers Logical. TRUE,  includes original marker names input output data frame. Default FALSE. split_symbol Character. delimiter used split row names. Default \"_\". Can changed \"-\", \".\", valid delimiters.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/extract_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Physical Map from Chromosome and Position from Row Names — extract_map","text":"data frame columns: \"chrom\": Chromosome identifier extracted row names. \"position\": Numeric genomic position extracted row names. \"marker\" (optional): Marker names (markers = TRUE).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/extract_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Physical Map from Chromosome and Position from Row Names — extract_map","text":"Row names split using specified split_symbol extract chromosome position. user defines components extract using chrom_index pos_index. Ensures position column numeric. markers = TRUE, includes marker names output.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/extract_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Physical Map from Chromosome and Position from Row Names — extract_map","text":"","code":"if (FALSE) { # \\dontrun{ # Example genotype matrix with different delimiters geno_matrix <- matrix(nrow = 3, ncol = 2) rownames(geno_matrix) <- c(\"A_1_200\", \"B_2_300\", \"C_3_400\")  # Default delimiter \"_\" extract_map(geno_matrix)  # Using \"-\" as delimiter rownames(geno_matrix) <- c(\"A-1-200\", \"B-2-300\", \"C-3-400\") extract_map(geno_matrix, chrom_index = 1, pos_index = 3, split_symbol = \"-\") } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Genotype Matrix by Allele Frequency — filter_geno_by_freq","title":"Filter Genotype Matrix by Allele Frequency — filter_geno_by_freq","text":"Filters genotype matrix applying constraints maximum minimum genotype frequency per marker, well heterozygous frequency. filtering based allele frequency calculations using freq() function internally.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Genotype Matrix by Allele Frequency — filter_geno_by_freq","text":"","code":"filter_geno_by_freq(   geno_matrix,   max_geno_freq = NULL,   het_freq_range = NULL,   min_geno_freq = NULL,   input_format = \"numeric\" )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Genotype Matrix by Allele Frequency — filter_geno_by_freq","text":"geno_matrix numeric genotype matrix data frame : Rows represent genetic markers. Columns represent individuals. Values either 0, 1, 2 (numeric format) \"\", \"H\", \"B\" (genotype format). max_geno_freq Numeric. provided, removes markers frequent genotype exceeds threshold. het_freq_range Numeric vector length 2. provided, retains markers heterozygosity frequency within specified range (c(min, max)). min_geno_freq Numeric. provided, removes markers least frequent genotype falls threshold. input_format Character. Specifies whether genotype matrix \"numeric\" (0, 1, 2) \"genotype\" (\"\", \"H\", \"B\") format. Default \"numeric\".","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Genotype Matrix by Allele Frequency — filter_geno_by_freq","text":"filtered genotype matrix markers meet specified frequency criteria.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Genotype Matrix by Allele Frequency — filter_geno_by_freq","text":"Computes genotype frequencies using freq() function. Retains markers meet specified frequency constraints. filtering parameters (max_geno_freq, het_freq_range, min_geno_freq) NULL, function returns original matrix.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Genotype Matrix by Allele Frequency — filter_geno_by_freq","text":"","code":"# Example genotype matrix geno_data <- matrix(sample(0:2, 30, replace = TRUE),                     nrow = 10, ncol = 3,                     dimnames = list(paste0(\"Marker\", 1:10), paste0(\"Ind\", 1:3)))  # Filter markers with max genotype frequency < 0.95, heterozygosity between 0.1 and 0.8, # and minimum genotype frequency >= 0.05 filtered_data <- filter_geno_by_freq(geno_data, max_geno_freq = 0.95,                                      het_freq_range = c(0.1, 0.80), min_geno_freq = 0.05)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq_poly.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","title":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","text":"Filters polyploid genotype matrix based dosage frequencies across markers. Allows users define dosages count heterozygous apply constraints maximum/ minimum genotype frequencies heterozygous frequency ranges.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq_poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","text":"","code":"filter_geno_by_freq_poly(   geno_matrix,   max_geno_freq = NULL,   het_freq_range = NULL,   min_geno_freq = NULL,   het_dosages = c(1, 2, 3) )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq_poly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","text":"geno_matrix numeric genotype matrix data frame : Rows markers Columns individuals Values dosage values (e.g., 0 4 tetraploids) max_geno_freq Numeric. provided, removes markers frequent dosage exceeds value. het_freq_range Numeric vector length 2. Keeps markers heterozygosity frequency within range. min_geno_freq Numeric. provided, removes markers least frequent dosage falls value. het_dosages Integer vector dosage values treat \"heterozygous\" (e.g., c(1, 2, 3)).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq_poly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","text":"filtered genotype matrix containing markers meet criteria.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq_poly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","text":"Designed polyploid dosage matrices (raw genotype strings). Computes dosage frequencies per marker (row-wise). het_dosages used define heterozygosity generalizable way. diploids, simple: 0 = homozygous reference (e.g., \"AA\") 1 = heterozygous (e.g., \"AB\") 2 = homozygous alternate (e.g., \"BB\") \"1\" always heterozygous state. polyploids (e.g., tetraploids, hexaploids), can intermediate states. example, tetraploid: 0 = \"AAAA\" → homozygous ref 1 = \"AAAB\" 2 = \"AABB\" 3 = \"ABBB\" 4 = \"BBBB\" → homozygous alt","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq_poly.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","text":"function tested rigorously please contact author issues.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_freq_poly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Genotype Matrix by Dosage Frequency (Polyploid-Compatible) — filter_geno_by_freq_poly","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(123) test_geno <- matrix(sample(0:4, 1000, replace = TRUE), nrow = 100, ncol = 10) rownames(test_geno) <- paste0(\"Marker\", 1:100) colnames(test_geno) <- paste0(\"Ind\", 1:10)  # Filter markers with max dosage freq < 0.7 and heterozygote freq between 0.2 and 0.8 filtered <- filter_geno_by_freq_poly(   test_geno,   max_geno_freq = 0.7,   het_freq_range = c(0.2, 0.8),   min_geno_freq = 0.05,   het_dosages = c(1, 2, 3) )  dim(filtered)  # Number of markers retained } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Genotype Matrix Based on Parental Genotype — filter_geno_by_parents","title":"Filter Genotype Matrix Based on Parental Genotype — filter_geno_by_parents","text":"filter_geno_by_parents filters genotype matrix retain homozygous polymorphic markers two specified parents. removes markers meet homozygous polymorphism criteria (P1 = 0 & P2 = 2 P1 = 2 & P2 = 0).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Genotype Matrix Based on Parental Genotype — filter_geno_by_parents","text":"","code":"filter_geno_by_parents(geno, parent1, parent2)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Genotype Matrix Based on Parental Genotype — filter_geno_by_parents","text":"geno genotype matrix data frame markers rows individuals columns. Must coercible data frame. parent1 Character. name column representing first parent. parent2 Character. name column representing second parent.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Genotype Matrix Based on Parental Genotype — filter_geno_by_parents","text":"filtered data frame containing markers homozygous polymorphic two parents.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_parents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Genotype Matrix Based on Parental Genotype — filter_geno_by_parents","text":"Retains markers parent1 0 parent2 2 (× B) parent1 2 parent2 0 (B × ). See methods section Braun et al. 2017  info marker types. Plant Genome Vol. 10 . 3.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_geno_by_parents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Genotype Matrix Based on Parental Genotype — filter_geno_by_parents","text":"","code":"# Example genotype matrix geno_data <- data.frame(   Marker1 = c(0, 1, 2, 0, 2),   Marker2 = c(2, 0, 2, 1, 0),   Parent1 = c(0, 2, 2, 0, 2),   Parent2 = c(2, 0, 0, 2, 0) )  # Filter markers based on parents filtered_geno <- filter_geno_by_parents(geno_data, \"Parent1\", \"Parent2\") print(filtered_geno) #>   Marker1 Marker2 Parent1 Parent2 #> 1       0       2       0       2 #> 2       1       0       2       0 #> 3       2       2       2       0 #> 4       0       1       0       2 #> 5       2       0       2       0"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_missing_geno.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Markers or Individuals Based on Missing Genotype Data — filter_missing_geno","title":"Filter Markers or Individuals Based on Missing Genotype Data — filter_missing_geno","text":"helper function helps filter genotype matrix removing markers individuals exceed specified threshold. returns summary removed markers individuals filtered genotype matrix along missing data proportions.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_missing_geno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Markers or Individuals Based on Missing Genotype Data — filter_missing_geno","text":"","code":"filter_missing_geno(   geno_matrix,   threshold = 0.1,   filter_by = c(\"markers\", \"individuals\") )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_missing_geno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Markers or Individuals Based on Missing Genotype Data — filter_missing_geno","text":"geno_matrix numeric matrix : Rows represent genetic markers. Columns represent individuals. NA values indicate missing genotype data. threshold Numeric. maximum proportion missing data allowed marker individual removed. Default 0.10 (10% missing data). filter_by Character. Specifies whether filter \"markers\" (rows) \"individuals\" (columns). Must either \"markers\" \"individuals\". Default \"markers\".","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_missing_geno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Markers or Individuals Based on Missing Genotype Data — filter_missing_geno","text":"list following objects: \"filtered_geno\": genotype matrix filtering. \"pct_missing\": named numeric vector containing missing data proportions remaining markers individuals. \"removed_individuals\": log removed individuals (filter_by = \"individuals\"). \"removed_markers\": log removed markers (filter_by = \"markers\").","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_missing_geno.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Markers or Individuals Based on Missing Genotype Data — filter_missing_geno","text":"Ensures output retains matrix structure. Prints summary message showing many markers individuals removed.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/filter_missing_geno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Markers or Individuals Based on Missing Genotype Data — filter_missing_geno","text":"","code":"# Example genotype matrix with missing values geno_data <- matrix(c(0, 1, NA, 2, 0, 1, NA, 2, NA, NA, 0, 1),                     nrow = 4, ncol = 3,                     dimnames = list(c(\"Marker1\", \"Marker2\", \"Marker3\", \"Marker4\"),                                     c(\"Ind1\", \"Ind2\", \"Ind3\")))  # Filter markers with more than 10% missing data result_markers <- filter_missing_geno(geno_data, threshold = 0.10, filter_by = \"markers\") #> 3 markers removed (Threshold: 0.1) print(result_markers$filtered_geno) #>         Ind1 Ind2 Ind3 #> Marker4    2    2    1  # Filter individuals with more than 10% missing data result_individuals <- filter_missing_geno(geno_data, threshold = 0.10, filter_by = \"individuals\") #> 3 individuals removed (Threshold: 0.1) print(result_individuals$filtered_geno) #>         #> Marker1 #> Marker2 #> Marker3 #> Marker4  # Example use # result <- filter_missing_geno(geno_data, threshold = 0.10, filter_by = \"individuals\")  # Access output # filtered_geno <- result$filtered_geno # missing_values <- result$missing_vector # removed <- result$removed"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/format_qtl_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Input Data for R/qtl package — format_qtl_input","title":"Format Input Data for R/qtl package — format_qtl_input","text":"function part heart package. format_qtl_input formats genotype, map, phenotype data QTL analysis R/qtl. allows user specify whether genotype data converted dosage ABH format used .","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/format_qtl_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Input Data for R/qtl package — format_qtl_input","text":"","code":"format_qtl_input(geno, map, pheno, numeric = TRUE)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/format_qtl_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Input Data for R/qtl package — format_qtl_input","text":"geno dataframe containing genotype data markers rows individuals columns. map dataframe containing genetic map columns: marker, chrom, position. pheno dataframe containing phenotype data ID column corresponding individual/sample names. numeric logical value (TRUE FALSE) indicating whether convert dosages R/qtl ABH format (default = TRUE).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/format_qtl_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Input Data for R/qtl package — format_qtl_input","text":"dataframe combining genotype, map, phenotype data R/qtl format  ready read.cross saving csv.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/format_qtl_input.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Format Input Data for R/qtl package — format_qtl_input","text":"Formats input data read.cross function R/qtl.","code":""},{"path":[]},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/format_qtl_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Input Data for R/qtl package — format_qtl_input","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage:  result <- format_qtl_input(geno2, map2, pheno2, numeric = TRUE)  # Write as CSV write.csv(result, file = \"formatted_qtl_data.csv\", row.names = FALSE)  # Read into a cross object (R/qtl) library(qtl) cross_data <- read.cross(format = \"csv\",                          file = \"formatted_qtl_data.csv\",                          genotypes = c(\"A\", \"H\", \"B\"),                          estimate.map = FALSE) } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Between Character (A, H, B) and Numeric dosage (0, 1, 2) Formats — formater","title":"Convert Between Character (A, H, B) and Numeric dosage (0, 1, 2) Formats — formater","text":"function converts genotype data character (\"\", \"H\", \"B\") numeric (0, 1, 2) formats. conversion direction controlled numeric_output argument.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Between Character (A, H, B) and Numeric dosage (0, 1, 2) Formats — formater","text":"","code":"formater(geno, numeric_output = TRUE)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Between Character (A, H, B) and Numeric dosage (0, 1, 2) Formats — formater","text":"geno data frame containing genotype data, values either \"\", \"H\", \"B\" 0, 1, 2. function assumes dataset consists entirely genotypic numeric values. numeric_output Logical. TRUE, converts \"\" → 0, \"H\" → 1, \"B\" → 2. FALSE, converts 0 → \"\", 1 → \"H\", 2 → \"B\". Default TRUE.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Between Character (A, H, B) and Numeric dosage (0, 1, 2) Formats — formater","text":"data frame structure geno, values converted based numeric_output parameter.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Between Character (A, H, B) and Numeric dosage (0, 1, 2) Formats — formater","text":"Preserves NA values conversion. Unexpected values (anything \"\", \"H\", \"B\", 0, 1, 2) converted NA.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Between Character (A, H, B) and Numeric dosage (0, 1, 2) Formats — formater","text":"","code":"# Example genotype data in character format geno_char <- data.frame(   Marker1 = c(\"A\", \"H\", \"B\"),   Marker2 = c(\"B\", \"A\", \"H\") )  # Convert character to numeric format geno_numeric <- formater(geno_char, numeric_output = TRUE) print(geno_numeric) #>   Marker1 Marker2 #> 1       0       2 #> 2       1       0 #> 3       2       1  # Convert numeric format back to character format geno_char_reversed <- formater(geno_numeric, numeric_output = FALSE) print(geno_char_reversed) #>   Marker1 Marker2 #> 1       A       B #> 2       H       A #> 3       B       H"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater_flex.html","id":null,"dir":"Reference","previous_headings":"","what":"Flexible Genotype Format Converter (Supports Polyploid Dosage) — formater_flex","title":"Flexible Genotype Format Converter (Supports Polyploid Dosage) — formater_flex","text":"Converts genotype data character string formats (e.g., \"AABB\", \"ABBB\") numeric dosage values (e.g., 0, 1, 2, 3) based user-defined reference alternative alleles. function designed handle diploid polyploid genotypes interpreting number occurrences alternative allele. especially useful genotype encodings represent dosage via string repetition (e.g., \"AAAB\" → 1 alt allele), reconstruct genotype strings numeric dosage values (e.g., 0 → \"AAAA\").","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater_flex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flexible Genotype Format Converter (Supports Polyploid Dosage) — formater_flex","text":"","code":"formater_flex(   geno,   to_numeric = TRUE,   ref_allele = \"A\",   alt_allele = \"B\",   ploidy = 2 )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater_flex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flexible Genotype Format Converter (Supports Polyploid Dosage) — formater_flex","text":"geno data frame containing genotype values. Values must either character strings representing genotypes (e.g., \"AAAA\", \"AAAB\", \"BBBB\"), numeric dosage values (e.g., 0 ploidy). to_numeric Logical. TRUE, converts character genotypes numeric dosage counting number alt_allele occurrences. FALSE, reconstructs genotype strings numeric dosage values using specified ref_allele alt_allele. ref_allele Character. reference allele. used define \"zero dosage\" baseline reconstructing character genotypes numeric dosage (e.g., \"\" \"AAAB\"). alt_allele Character. alternative allele. Dosage computed count allele genotype string (e.g., \"B\" \"AAAB\" → dosage = 1). ploidy Integer. Ploidy level organism. used to_numeric = FALSE determine many reference alternative alleles paste together reconstructing genotype strings.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater_flex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flexible Genotype Format Converter (Supports Polyploid Dosage) — formater_flex","text":"data frame structure geno, genotypes converted according to_numeric setting.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater_flex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flexible Genotype Format Converter (Supports Polyploid Dosage) — formater_flex","text":"to_numeric = TRUE, values geno must character strings, function count number occurrences alt_allele using stringr::str_count(). Missing values (NA) preserved. to_numeric = FALSE, values geno must numeric dosages 0 ploidy, inclusive. function reconstruct character genotype strings repeating ref_allele alt_allele appropriate number times. example, ploidy = 4, dosage 2 becomes \"AABB\". Values outside expected range (e.g., dosage > ploidy unknown characters) converted NA.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/formater_flex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flexible Genotype Format Converter (Supports Polyploid Dosage) — formater_flex","text":"","code":"# Example 1: Character to numeric (tetraploid) if (FALSE) { # \\dontrun{ geno <- data.frame(   Marker1 = c(\"AAAA\", \"AAAB\", \"AABB\", \"ABBB\", \"BBBB\"),   Marker2 = c(\"AAAB\", \"AABB\", \"ABBB\", \"BBBB\", NA) ) formater_flex(geno, to_numeric = TRUE, ref_allele = \"A\", alt_allele = \"B\") } # } # Example 2: Numeric to character (tetraploid)  if (FALSE) { # \\dontrun{ dosage <- data.frame(   Marker1 = c(0, 1, 2, 3, 4),   Marker2 = c(1, 2, 3, 4, NA) ) formater_flex(dosage, to_numeric = FALSE, ref_allele = \"A\", alt_allele = \"B\", ploidy = 4) } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Genotype Frequency Per Individual or Marker — freq","title":"Calculate Genotype Frequency Per Individual or Marker — freq","text":"freq calculates relative frequency genotype classes (usually \"\", \"H\", \"B\" \"0\", \"1\", \"2\") individual marker genotype matrix. function transposes matrix process individuals markers needed, computes relative frequency genotype, fills missing genotype categories frequent genotype. Proportions calculated based non-missing values. Results may biased missing data high. Use filter_missing_geno previously data high proportion missingness.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Genotype Frequency Per Individual or Marker — freq","text":"","code":"freq(x, input_format = \"numeric\", by = \"markers\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Genotype Frequency Per Individual or Marker — freq","text":"x genotype matrix markers rows individuals columns. input_format Character. Specifies genotype format. Options: \"numeric\" (default): Uses 0, 1, 2 genotype categories. \"genotype\": Uses \"\", \"H\", \"B\" genotype categories. Character. Specifies whether calculate genotype frequencies \"markers\" (rows) \"individuals\" (columns). Default \"markers\".","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Genotype Frequency Per Individual or Marker — freq","text":"data frame rows correspond markers individuals, columns correspond genotype categories. Values represent relative genotype frequencies, calculated based non-missing values.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Genotype Frequency Per Individual or Marker — freq","text":"","code":"# Example genotype matrix (numeric format) geno_matrix <- matrix(c(0,1,2,1,0,2,1,2,0,1,1,1,2,0,2),                       nrow = 5, ncol = 3,                       dimnames = list(c(\"M1\", \"M2\", \"M3\", \"M4\", \"M5\"),                                       c(\"Ind1\", \"Ind2\", \"Ind3\")))  # Compute genotype frequency by markers freq(geno_matrix, input_format = \"numeric\", by = \"markers\") #>            0         1         2 #> M1 0.3333333 0.3333333 0.3333333 #> M2 0.0000000 1.0000000 0.0000000 #> M3 0.0000000 0.0000000 1.0000000 #> M4 0.6666667 0.3333333 0.0000000 #> M5 0.3333333 0.3333333 0.3333333  # Compute genotype frequency by individuals freq(geno_matrix, input_format = \"numeric\", by = \"individuals\") #>        0   1   2 #> Ind1 0.4 0.4 0.2 #> Ind2 0.2 0.4 0.4 #> Ind3 0.2 0.4 0.4"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/frequency_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Histogram of Genotype Frequencies — frequency_plot","title":"Generate a Histogram of Genotype Frequencies — frequency_plot","text":"function creates histogram genotype frequencies genotype category (e.g., \"0\", \"1\", \"2\") based frequency data frame. function also returns processed long-format data attribute. work data , H, B format. Use formater change dosage using frequency_plot.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/frequency_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Histogram of Genotype Frequencies — frequency_plot","text":"","code":"frequency_plot(freq_df)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/frequency_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Histogram of Genotype Frequencies — frequency_plot","text":"freq_df Usually output freq. data frame rows represent markers individuals, columns represent genotype categories frequencies.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/frequency_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Histogram of Genotype Frequencies — frequency_plot","text":"ggplot2 histogram visualizing distribution genotype frequencies. processed long-format data attached attribute (attr(output, \"data\")).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/frequency_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Histogram of Genotype Frequencies — frequency_plot","text":"Converts input data frame long format using pivot_longer(). Ensures correct ordering genotype categories. Generates faceted histogram panel represents genotype category. Stores generated plot processed data returns plot default.","code":""},{"path":[]},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/frequency_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Histogram of Genotype Frequencies — frequency_plot","text":"","code":"# Example frequency data frame freq_data <- data.frame(   `0` = c(0.2, 0.3, 0.4),   `1` = c(0.5, 0.4, 0.4),   `2` = c(0.3, 0.3, 0.2),   row.names = c(\"Marker1\", \"Marker2\", \"Marker3\") )  # Generate the frequency histogram p <- frequency_plot(freq_data) print(p)  # Display the plot #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Access the processed long-format data attr(p, \"data\") #> # A tibble: 9 × 3 #>   Marker  Dosage Frequency #>   <chr>   <fct>      <dbl> #> 1 Marker1 NA           0.2 #> 2 Marker1 NA           0.5 #> 3 Marker1 NA           0.3 #> 4 Marker2 NA           0.3 #> 5 Marker2 NA           0.4 #> 6 Marker2 NA           0.3 #> 7 Marker3 NA           0.4 #> 8 Marker3 NA           0.4 #> 9 Marker3 NA           0.2"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/get_LOD_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Get LOD Support Intervals for QTL Peaks (Single or Multiple Traits) — get_LOD_int","title":"Get LOD Support Intervals for QTL Peaks (Single or Multiple Traits) — get_LOD_int","text":"Computes LOD support intervals detected QTLs scanone cim.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/get_LOD_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get LOD Support Intervals for QTL Peaks (Single or Multiple Traits) — get_LOD_int","text":"","code":"get_LOD_int(cross_obj, model_obj, results_obj, trait = NULL, drop = 1.5)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/get_LOD_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get LOD Support Intervals for QTL Peaks (Single or Multiple Traits) — get_LOD_int","text":"cross_obj cross object qtl package. Usually output read.cross calc.genoprob. model_obj Either scanone/CIM object (class \"scanone\") named list objects. Usuall output cim scanone qtl. results_obj Either data frame QTL results (\"chr\" \"pos\") named list data frames. trait Optional. Name trait analyze. Required model_obj results_obj lists (.e., working multiple traits). drop Numeric. LOD drop define support interval (default = 1.5).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/get_LOD_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get LOD Support Intervals for QTL Peaks (Single or Multiple Traits) — get_LOD_int","text":"named list QTL interval summaries, flanking markers, peak marker (pseudo marker physical marker), usable marker (closest physical marker peak pseudo marker).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/get_LOD_int.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get LOD Support Intervals for QTL Peaks (Single or Multiple Traits) — get_LOD_int","text":"Works either single model qtl results list models results multiple traits.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/get_LOD_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get LOD Support Intervals for QTL Peaks (Single or Multiple Traits) — get_LOD_int","text":"","code":"if (FALSE) { # \\dontrun{ # Multiple traits: # For the length-width trait lw_result_pop1 <- get_LOD_int(   cross_obj = M1,   model_obj = cim_qtl_results1,   results_obj = results_pop1,   trait = \"length_width_ratio\",   drop = 1.5 )  # Single traits: mod <- cim_qtl_results1[[\"length_width_ratio\"]] res <- results_pop1[[\"length_width_ratio\"]]  single <- get_LOD_int(   cross_obj = M1,   model_obj = mod,   results_obj = res ) } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/haplotype_reconstruction.html","id":null,"dir":"Reference","previous_headings":"","what":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","title":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","text":"function performs haplotype reconstruction using Hidden Markov Model (HMM). applies Viterbi algorithm infer likely sequence true genotypic states, accounting genotyping errors missing data.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/haplotype_reconstruction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","text":"","code":"haplotype_reconstruction(geno_matrix, error_rate = 0.05, r = 0.01)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/haplotype_reconstruction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","text":"geno_matrix numeric genotype matrix : Rows represent genetic markers. Columns represent progeny (individuals). Values expected 0, 1, 2, NA missing data. error_rate Numeric. assumed genotyping error rate. Default 0.05 (5% error rate). r Numeric. recombination rate used transition probability matrix (T.mat). Default 0.01. user can use MLEL function MapRtools get estimate recombination frequency adjacent argument set TRUE result <- MLEL(geno = geno_matrix, pop.type = \"f2\", LOD = FALSE, adjacent = TRUE) case geno_matrix one chromosome. r estimated mean(result$value, na.rm = TRUE)","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/haplotype_reconstruction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","text":"genotype matrix inferred haplotypes based HMM correction.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/haplotype_reconstruction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","text":"Estimates missing data rate input genotype matrix. Initializes HMM using: Three hidden states (\"0\", \"1\", \"2\"). Four observable symbols (\"0\", \"1\", \"2\", \"NA\" missing data). Transition probabilities generated via T.mat(r = r), using user-defined recombination rate. Emission probabilities computed using E.mat(error = error_rate, missing = missing).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/haplotype_reconstruction.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","text":"Works F2 populations experimental crosses. Based 615 Genetic Mapping Class notes Prof. Jeffrey Endelman. Spring 2021.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/haplotype_reconstruction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"F2 diploid population Haplotype Reconstruction — haplotype_reconstruction","text":"","code":"if (FALSE) { # \\dontrun{ # Example genotype matrix with missing values geno_data <- matrix(c(0, 1, NA, 2, 0, 1, NA, 2, NA, NA, 0, 1),                     nrow = 4, ncol = 3,                     dimnames = list(c(\"Marker1\", \"Marker2\", \"Marker3\", \"Marker4\"),                                     c(\"Ind1\", \"Ind2\", \"Ind3\")))  # Perform haplotype reconstruction with default parameters reconstructed_geno <- haplotype_reconstruction(geno_data) print(reconstructed_geno)  # Perform haplotype reconstruction with a modified recombination rate reconstructed_geno_custom_r <- haplotype_reconstruction(geno_data, error_rate = 0.05, r = 0.02) print(reconstructed_geno_custom_r) } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/load_or_install_cran.html","id":null,"dir":"Reference","previous_headings":"","what":"Load or Install a CRAN Package — load_or_install_cran","title":"Load or Install a CRAN Package — load_or_install_cran","text":"function checks specified package installed. package installed, installs CRAN, loads R session.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/load_or_install_cran.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load or Install a CRAN Package — load_or_install_cran","text":"","code":"load_or_install_cran(pkg)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/load_or_install_cran.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load or Install a CRAN Package — load_or_install_cran","text":"pkg character string specifying name package loaded installed.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/load_or_install_cran.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load or Install a CRAN Package — load_or_install_cran","text":"function return value. called side effect loading installing package.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/load_or_install_cran.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load or Install a CRAN Package — load_or_install_cran","text":"function first checks package available current session using requireNamespace. package installed, installs using install.packages loads using library.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/load_or_install_cran.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load or Install a CRAN Package — load_or_install_cran","text":"","code":"if (FALSE) { # \\dontrun{ load_or_install_cran(\"ggplot2\") load_or_install_cran(\"dplyr\") } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/load_or_install_github.html","id":null,"dir":"Reference","previous_headings":"","what":"Load or Install a GitHub Package — load_or_install_github","title":"Load or Install a GitHub Package — load_or_install_github","text":"function checks specified package installed. package installed, installs package GitHub using remotes package, loads R session.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/load_or_install_github.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load or Install a GitHub Package — load_or_install_github","text":"","code":"load_or_install_github(pkg, repo)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/load_or_install_github.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load or Install a GitHub Package — load_or_install_github","text":"pkg character string specifying name package loaded installed. repo character string specifying GitHub repository form \"user/repo\" install package.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/load_or_install_github.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load or Install a GitHub Package — load_or_install_github","text":"function return value. called side effect loading installing package.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/load_or_install_github.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load or Install a GitHub Package — load_or_install_github","text":"function first checks package available current session using requireNamespace. package installed, installs specified GitHub repository using remotes::install_github, loads package using library.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/load_or_install_github.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load or Install a GitHub Package — load_or_install_github","text":"","code":"if (FALSE) { # \\dontrun{ load_or_install_github(\"geneticMapR\", \"vegaalfaro/geneticMapR\") load_or_install_github(\"dplyr\", \"tidyverse/dplyr\") } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/melt_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert (Melt) Genotype Frequency Data to Long Format — melt_freq","title":"Convert (Melt) Genotype Frequency Data to Long Format — melt_freq","text":"Transforms genotype frequency data frame wide format (genotype categories columns) long format, making easier use ggplot2 tidyverse functions. Works well freq data visualization.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/melt_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert (Melt) Genotype Frequency Data to Long Format — melt_freq","text":"","code":"melt_freq(freq_df)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/melt_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert (Melt) Genotype Frequency Data to Long Format — melt_freq","text":"freq_df Usually output freq. data frame rows represent markers individuals,  columns represent genotype categories frequencies.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/melt_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert (Melt) Genotype Frequency Data to Long Format — melt_freq","text":"data frame long format three columns: \"Marker\": marker individual ID. \"Dosage\": genotype category. \"Frequency\": relative frequency genotype category.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/melt_freq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert (Melt) Genotype Frequency Data to Long Format — melt_freq","text":"Uses tibble::rownames_to_column() preserve marker individual names. Reshapes data using pivot_longer() tidyverse. Ideal visualization ggplot2 data analysis genotype frequencies marker individual.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/melt_freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert (Melt) Genotype Frequency Data to Long Format — melt_freq","text":"","code":"# Example frequency data frame freq_data <- data.frame(   `0` = c(0.2, 0.3, 0.4),   `1` = c(0.5, 0.4, 0.4),   `2` = c(0.3, 0.3, 0.2),   row.names = c(\"Marker1\", \"Marker2\", \"Marker3\") )  # Convert to long format melt_freq(freq_data) #> # A tibble: 9 × 3 #>   Marker  Dosage Frequency #>   <chr>   <chr>      <dbl> #> 1 Marker1 X0           0.2 #> 2 Marker1 X1           0.5 #> 3 Marker1 X2           0.3 #> 4 Marker2 X0           0.3 #> 5 Marker2 X1           0.4 #> 6 Marker2 X2           0.3 #> 7 Marker3 X0           0.4 #> 8 Marker3 X1           0.4 #> 9 Marker3 X2           0.2"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/order_and_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize Marker Order — order_and_plot","title":"Optimize Marker Order — order_and_plot","text":"order_and_plot optimizes marker order (trimmed) genotype matrix using recombination frequency (RF) matrices. performs multiple iterations marker ordering, selects best order based smallest Sum Adjusted Recombination Fractions (SARF), generates visualizations marker order. function uses MLEL() order_markers() Professor Jeffrey Endelman's MapRtools streamlines process. workflow easier user dealing multiple chromosomes. MapRtools.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/order_and_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize Marker Order — order_and_plot","text":"","code":"order_and_plot(   trimmed_geno,   pop.type = \"F2\",   CHR = NULL,   n.iter = 6,   prop = NULL )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/order_and_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize Marker Order — order_and_plot","text":"trimmed_geno genotype matrix : Rows represent markers. Columns represent individuals. output trim_LG genotype matrix. pop.type Character. population type used ordering markers. Default \"F2\". order_and_plot work following \"DH\",\"BC\",\"F2\",\"S1\",\"RIL.self\",\"RIL.sib\". Based MapRtools::MLEL() CHR Character (optional). chromosome identifier labeling plots. n.iter Integer. number iterations marker ordering. Default 6. prop Numeric. proportion individuals include genotype plot. Must 0 1. Default 0.20 (20% individuals). individuals included visualization quality drops.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/order_and_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize Marker Order — order_and_plot","text":"list containing: \"original_geno\": original genotype matrix. \"ordered_geno\": optimized genotype matrix markers reordered. \"order_plot\": ggplot2 object displaying original vs. optimized marker order. \"haplotype_plot\": ggplot2 object showing genotype haplotype plot.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/order_and_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimize Marker Order — order_and_plot","text":"Computes RF matrix using MLEL(), orders markers iteratively. Runs order_markers() n.iter times selects order smallest SARF. order_markers() Order markers solving traveling salesperson problem. Plots original vs. optimized marker order. Generates genotype haplotype plot subset individuals (prop). CHR provided, adds chromosome label plots.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/order_and_plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Optimize Marker Order — order_and_plot","text":"function refined assistance ChatGPT improve clarity, efficiency, visualization formatting.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plotMap_gg.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Genetic Map Using ggplot2 in R/qtl data environment — plotMap_gg","title":"Plot Genetic Map Using ggplot2 in R/qtl data environment — plotMap_gg","text":"function generates genetic linkage map visualization using ggplot2. plots chromosomes vertical horizontal lines displays markers colored segments along chromosome using data structure built R/qtl. Replaces plotMap uses base R.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plotMap_gg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Genetic Map Using ggplot2 in R/qtl data environment — plotMap_gg","text":"","code":"plotMap_gg(map, horizontal = FALSE, color = NULL)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plotMap_gg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Genetic Map Using ggplot2 in R/qtl data environment — plotMap_gg","text":"map cross object representing genetic map. output R/qtl's read.cross(), jittermap() calc.genoprob() cross object, function extracts map using pull.map(). horizontal Logical. TRUE, map plotted chromosomes arranged horizontally. Default FALSE (vertical layout). color Character. color marker segments. Default \"red\" NULL.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plotMap_gg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Genetic Map Using ggplot2 in R/qtl data environment — plotMap_gg","text":"ggplot2 object displaying genetic map.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plotMap_gg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Genetic Map Using ggplot2 in R/qtl data environment — plotMap_gg","text":"","code":"# Default plot (vertical) # plotMap_gg(example_map)  # Horizontal plot with custom color # plotMap_gg(example_map, horizontal = TRUE, color = \"blue\")"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_cover.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Genome-wide Coverage — plot_cover","title":"Plot Genome-wide Coverage — plot_cover","text":"Generates genome-wide coverage plot, displaying positions markers across chromosomes. customized version plot_cover MapRtools allows additional aesthetic modifications.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_cover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Genome-wide Coverage — plot_cover","text":"","code":"plot_cover(map, limits = NULL, customize = TRUE)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_cover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Genome-wide Coverage — plot_cover","text":"map data frame two columns: \"chrom\": Chromosome identifier (e.g., \"CHR1\", \"CHR2\", ...\"). \"position\": genomic position markers (base pairs). limits (Optional) data frame specifying maximum position chromosome. NULL (default), function computes chromosome limits map. customize Logical. TRUE, applies additional visual customizations. Default TRUE.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_cover.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Genome-wide Coverage — plot_cover","text":"ggplot2 object representing genome-wide coverage.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_cover.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Genome-wide Coverage — plot_cover","text":"Converts genomic positions base pairs megabases (Mb). limits provided, function calculates maximum position chromosome map. Orders chromosomes positions correctly visualization. Uses geom_segment() generate chromosome-wide coverage plot. customize = TRUE, applies minimalistic theme enhanced visualization.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_cover.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot Genome-wide Coverage — plot_cover","text":"Inspired functions Professor Jeffrey Endelman's MapRtools","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_cover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Genome-wide Coverage — plot_cover","text":"","code":"# Example dataset map_data <- data.frame(   chrom = c(\"CHR1\", \"CHR1\", \"CHR2\", \"CHR2\", \"CHR3\"),   position = c(500000, 1200000, 800000, 1600000, 2000000) )  # Basic coverage plot plot_cover(map_data)   # Coverage plot with custom aesthetics plot_cover(map_data, customize = TRUE)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_coverage_annotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Coverage Map with Candidate Gene Annotations — plot_coverage_annotate","title":"Plot Coverage Map with Candidate Gene Annotations — plot_coverage_annotate","text":"Visualizes chromosome positions, QTLs, gene interest annotations multi-chromosome physical map. Useful displaying genomic regions interest, highlighting genetic features QTLs candidate genes protein families.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_coverage_annotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Coverage Map with Candidate Gene Annotations — plot_coverage_annotate","text":"","code":"plot_coverage_annotate(   map,   limits = NULL,   qtls = NULL,   qtls2 = NULL,   prot1 = NULL,   prot2 = NULL,   prot3 = NULL,   labels = NULL,   protein_colors = NULL,   qtl_labels = c(\"QTLs Full Panel\", \"QTLs Table Beet Only\"),   qtl_colors = c(\"#1E90FF\", \"#D95F02\"),   show_labels = TRUE )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_coverage_annotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Coverage Map with Candidate Gene Annotations — plot_coverage_annotate","text":"map data frame least two columns: chrom (chromosome ID) position (genomic coordinate base pairs). forms base map. limits Optional data frame chromosome end positions. NULL, limits computed automatically. qtls Optional data frame QTLs. contain chrom, position, optionally trait. qtls2 Optional second QTL set (e.g., another population). format qtls. prot1 First protein/gene annotation data frame. contain chrom, position, name. prot2 Second protein/gene annotation data frame. format prot1. prot3 Third protein/gene annotation data frame. format prot1. labels Optional vector labels (length 1–3) protein layers (e.g., c(\"OFP\", \"IQD\", \"TRM\")). protein_colors Optional vector fill colors proteins, matching order labels. qtl_labels Character vector length 2 defining legend labels qtls qtls2. qtl_colors Character vector length 2 defining fill colors used two QTL types. show_labels Logical; whether display text labels QTL traits protein names (default: TRUE).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_coverage_annotate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Coverage Map with Candidate Gene Annotations — plot_coverage_annotate","text":"ggplot object showing annotated chromosome map.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_coverage_annotate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Coverage Map with Candidate Gene Annotations — plot_coverage_annotate","text":"","code":"# Simulated example set.seed(123)  # Create basic map for 3 chromosomes example_map <- data.frame(   chrom = rep(paste0(\"CHR\", 1:3), each = 100),   position = rep(seq(1e6, 100e6, length.out = 100), 3) )  # QTL sets example_qtls <- data.frame(   chrom = sample(paste0(\"CHR\", 1:3), 10, replace = TRUE),   position = runif(5, min = 1e6, max = 100e6),   trait = paste(\"Trait\", 1:10) ) example_qtls2 <- data.frame(   chrom = sample(paste0(\"CHR\", 1:3), 6, replace = TRUE),   position = runif(3, min = 1e6, max = 100e6),   trait = paste(\"AltTrait\", 1:6) )  # Protein annotations ofp_data <- data.frame(   chrom = sample(paste0(\"CHR\", 1:3), 5, replace = TRUE),   position = runif(5, 1e6, 100e6),   name = paste(\"OFP\", 1:5) )  iqd_data <- data.frame(   chrom = sample(paste0(\"CHR\", 1:3), 4, replace = TRUE),   position = runif(4, 1e6, 100e6),   name = paste(\"IQD\", 1:4) )  trm_data <- data.frame(   chrom = sample(paste0(\"CHR\", 1:3), 3, replace = TRUE),   position = runif(3, 1e6, 100e6),   name = paste(\"TRM\", 1:3) )  # Plot annotated coverage map plot_coverage_annotate(   map = example_map,   qtls = example_qtls,   qtls2 = example_qtls2,   prot1 = ofp_data,   prot2 = iqd_data,   prot3 = trm_data,   labels = c(\"OFP\", \"IQD\", \"TRM\"),   qtl_labels = c(\"QTL Set 1\", \"QTL Set 2\"),   qtl_colors = c(\"steelblue\", \"darkorange\"),   show_labels = TRUE )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_genotype_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Histogram of Genotypic Values — plot_genotype_histogram","title":"Plot a Histogram of Genotypic Values — plot_genotype_histogram","text":"Generates histogram genotypic values (0, 1, 2) genotype matrix shows distribution genotypic classes.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_genotype_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Histogram of Genotypic Values — plot_genotype_histogram","text":"","code":"plot_genotype_histogram(ans)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_genotype_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Histogram of Genotypic Values — plot_genotype_histogram","text":"ans genotype matrix data frame : Rows correspond markers. Columns correspond individuals. Values numeric genotypes (0, 1, 2).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_genotype_histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Histogram of Genotypic Values — plot_genotype_histogram","text":"ggplot2 histogram object.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_genotype_histogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Histogram of Genotypic Values — plot_genotype_histogram","text":"","code":"# Example genotype matrix geno_matrix <- matrix(   sample(0:2, 30, replace = TRUE),   nrow = 10, ncol = 3,   dimnames = list(paste0(\"Marker\", 1:10), paste0(\"Ind\", 1:3)) )  # Generate and display the histogram hist_plot <- plot_genotype_histogram(geno_matrix) print(hist_plot)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_marey.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Marey Plot for one Chromosome — plot_marey","title":"Generate a Marey Plot for one Chromosome — plot_marey","text":"function creates Marey plot, visualizes relationship physical position (megabases) genetic distance (centimorgans) single chromosome.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_marey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Marey Plot for one Chromosome — plot_marey","text":"","code":"plot_marey(map, chrom)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_marey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Marey Plot for one Chromosome — plot_marey","text":"map data frame containing marker mapping information least following columns: \"position_Mb\": Physical position markers (base pairs). \"position_cM\": Genetic distance centimorgans (cM). chrom Character numeric. chromosome identifier displayed plot title.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_marey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Marey Plot for one Chromosome — plot_marey","text":"ggplot2 scatter plot showing Marey plot.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_marey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Marey Plot for one Chromosome — plot_marey","text":"","code":"if (FALSE) { # \\dontrun{ # Example map data example_map <- data.frame(   position = c(1000000, 5000000, 10000000, 20000000, 30000000),   p20 = c(0, 5, 10, 20, 30) )  # Generate Marey plot for Chromosome 1 plot_marey(example_map, chrom = 1) } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_qtl_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a line plot showing QTL traces (LOD scores) across chromosomes for one or more traits. Supports customization of visual appearance and annotations such as significance thresholds and vertical lines. — plot_qtl_trace","title":"Generates a line plot showing QTL traces (LOD scores) across chromosomes for one or more traits. Supports customization of visual appearance and annotations such as significance thresholds and vertical lines. — plot_qtl_trace","text":"Generates line plot showing QTL traces (LOD scores) across chromosomes one traits. Supports customization visual appearance annotations significance thresholds vertical lines.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_qtl_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a line plot showing QTL traces (LOD scores) across chromosomes for one or more traits. Supports customization of visual appearance and annotations such as significance thresholds and vertical lines. — plot_qtl_trace","text":"","code":"plot_qtl_trace(   qtl_df,   thresholds_df,   vline_df = NULL,   use_physical_pos = FALSE,   x_angle = 0,   trait_colors = NULL,   trait_labels = NULL,   x_label = \"Position (cM)\",   y_label = \"LOD\",   plot_title = NULL,   show_legend = TRUE,   facet_nrow = 1 )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_qtl_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a line plot showing QTL traces (LOD scores) across chromosomes for one or more traits. Supports customization of visual appearance and annotations such as significance thresholds and vertical lines. — plot_qtl_trace","text":"qtl_df data frame containing QTL mapping results. Must include columns: pos (genetic position cM), lod (LOD score), response_var (trait name), chr (chromosome). Optional phys.pos (physical position Mb). thresholds_df data frame LOD score thresholds per trait. Must include columns: chr, hline, response_var. vline_df Optional. data frame specifying positions vertical lines. Must include chr vline columns. Can also include label column text annotation vertical line. use_physical_pos Logical. TRUE, use physical position (phys.pos) x-axis. FALSE (default), use genetic position (pos). x_angle Integer. Angle x-axis text labels (default 0). trait_colors Optional. named vector colors trait. NULL (default), colors automatically assigned. trait_labels Optional. named vector human-readable trait labels (can include expressions) use legend. x_label Character. Label x-axis (default \"Position (cM)\"). y_label Character. Label y-axis (default \"LOD\"). plot_title Optional. Title plot (default NULL). show_legend Logical. Whether display legend (defaults TRUE). facet_nrow Integer. Number rows facet layout (defaults 1).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_qtl_trace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a line plot showing QTL traces (LOD scores) across chromosomes for one or more traits. Supports customization of visual appearance and annotations such as significance thresholds and vertical lines. — plot_qtl_trace","text":"ggplot object displaying QTL traces per trait chromosome, optional custom styling.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_reconstructed_haplo.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Haplotype Reconstruction Results Before and After HMM — plot_reconstructed_haplo","title":"Plot Haplotype Reconstruction Results Before and After HMM — plot_reconstructed_haplo","text":"plot_reconstructed_haplo visualizes genotype data HMM-based haplotype reconstruction specified set individuals. uses MapRtools::plot_geno() visualization appends informative titles based chromosome name.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_reconstructed_haplo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Haplotype Reconstruction Results Before and After HMM — plot_reconstructed_haplo","text":"","code":"plot_reconstructed_haplo(original, processed, individuals = 1:50)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_reconstructed_haplo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Haplotype Reconstruction Results Before and After HMM — plot_reconstructed_haplo","text":"original genotype matrix haplotype reconstruction. Rows represent markers, columns represent individuals. processed genotype matrix HMM-based haplotype reconstruction. must dimensions original. individuals numeric vector specifying indices individuals (columns) plot. Default 1:50. values must within column range input matrices.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_reconstructed_haplo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Haplotype Reconstruction Results Before and After HMM — plot_reconstructed_haplo","text":"list two ggplot objects: p1 Genotype plot HMM, titled chromosome name \"HMM\". p2 Genotype plot HMM, titled chromosome name \"HMM\".","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_reconstructed_haplo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Haplotype Reconstruction Results Before and After HMM — plot_reconstructed_haplo","text":"function uses extract_map() geneticMapR infer chromosome name original genotype matrix, used annotate plots. matrices expected compatible MapRtools::plot_geno().","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/plot_reconstructed_haplo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Haplotype Reconstruction Results Before and After HMM — plot_reconstructed_haplo","text":"","code":"if (FALSE) { # \\dontrun{ original_geno <- example_original processed_geno <- example_processed plots <- plot_reconstructed_haplo(original = original_geno,                                   processed = processed_geno,                                   individuals = 1:30) plots$p1  # View plot before HMM plots$p2  # View plot after HMM } # }"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/qtl_example.html","id":null,"dir":"Reference","previous_headings":"","what":"QTL Dataset Example — qtl_example","title":"QTL Dataset Example — qtl_example","text":"list containing QTL LOD scores, thresholds, vline (annotation) data demonstrating functions geneticMapR. also include colors character vector labels publication ready plots.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/qtl_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTL Dataset Example — qtl_example","text":"","code":"qtl_example"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/qtl_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"QTL Dataset Example — qtl_example","text":"list elements: qtl_df scanone data.frame class object containing LOD scores loci map 7 trauts thresholds scanone dara.frame class object containing significant thresholds variable vline data frame information plot annotation colors vector custom colors plot customization labes vector publication ready labels plot customization","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/qtl_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"QTL Dataset Example — qtl_example","text":"author's QTL analysis using R/qtl Table beet shape mapping population (F2).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/recode_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Phase Genotype Marker Data Based on Parental References — recode_markers","title":"Phase Genotype Marker Data Based on Parental References — recode_markers","text":"recode_markers heart package. powerful function phases genotype marker data based two parental references (parent1 parent2). phases markers according parental allele inheritance. Optionally, can code phased markers numeric (0, 1, 2) character (\"\", \"B\", \"H\") formats. Numeric coding recommended downstream analyses.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/recode_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phase Genotype Marker Data Based on Parental References — recode_markers","text":"","code":"recode_markers(   geno,   parent1,   parent2,   numeric_output = TRUE,   handle_het_markers = FALSE,   het_marker_types = NULL )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/recode_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Phase Genotype Marker Data Based on Parental References — recode_markers","text":"geno genotype matrix data frame markers rows individuals columns. parent1 Character. name column representing first parent. parent2 Character. name column representing second parent. numeric_output Logical. TRUE, converts phased markers numeric dosage values (= 0, H = 1, B = 2). Default TRUE. handle_het_markers Logical. TRUE, allows heterozygous parent markers included. Default FALSE. het_marker_types Character vector. Specifies heterozygous markers keep handle_het_markers = TRUE. Options include \"AxH\", \"HxB\", \"HxA\", \"BxH\". Default NULL, meaning homozygous markers kept. See details.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/recode_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Phase Genotype Marker Data Based on Parental References — recode_markers","text":"data frame containing phased genotype markers : \"0\" represents alleles inherited parent1. \"2\" represents alleles inherited parent2. \"1\" represents heterozygous alleles. numeric_output = FALSE,   0, 2, 1, replaced \"\", \"B\", \"H\" respectively. numeric_output = TRUE recommended.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/recode_markers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Phase Genotype Marker Data Based on Parental References — recode_markers","text":"Drops markers either parent NA. Removes non-polymorphic markers (markers parents genotype). handle_het_markers = FALSE, retains homozygous marker dosages follows: (P1 = 0 & P2 = 2 P1 = 2 & P2 = 0) handle_het_markers = TRUE, allows heterozygous markers kept. Ensures parent1 always 0 parent2 always 2 standardization. Returns numeric matrix numeric_output = TRUE, otherwise returns phased \"\", \"B\", \"H\" values. details heterozygous F2 marker types (\"AxH\", \"HxB\", \"HxA\", \"BxH\") Braun et al. (2017).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/recode_markers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Phase Genotype Marker Data Based on Parental References — recode_markers","text":"","code":"# Example genotype data geno_data <- data.frame(   Marker1 = c(0, 1, 2, 0, 2),   Marker2 = c(2, 0, 2, 1, 0),   Parent1 = c(0, 2, 2, 0, 2),   Parent2 = c(2, 0, 0, 2, 0) )  # recode_markers genotype markers (default: numeric output) phased_geno <- recode_markers(geno_data, \"Parent1\", \"Parent2\") print(phased_geno) #>   Marker1 Marker2 Parent1 Parent2 #> 1       0       2       0       2 #> 2       1       2       0       2 #> 3       0       0       0       2 #> 4       0       1       0       2 #> 5       0       2       0       2  # Recode genotype markers with heterozygous marker handling phased_geno_het <- recode_markers(geno_data, \"Parent1\", \"Parent2\",                           handle_het_markers = TRUE,                           het_marker_types = c(\"AxH\", \"HxB\")) print(phased_geno_het) #>   Marker1 Marker2 Parent1 Parent2 #> 1       0       2       0       2 #> 2       1       2       0       2 #> 3       0       0       0       2 #> 4       0       1       0       2 #> 5       0       2       0       2"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/rename_geno_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Parents, F1, and F2 Individuals in a Genotype Matrix — rename_geno_matrix","title":"Rename Parents, F1, and F2 Individuals in a Genotype Matrix — rename_geno_matrix","text":"function standardizes column names genotype matrix renaming parental genotypes (P1, P2), F1 individuals (F1.1, F1.2, ...), F2 individuals (F2.1, F2.2, ...). renaming helps reduce name size exchange consistent labeling system dendrogram visualization constrains","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/rename_geno_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename Parents, F1, and F2 Individuals in a Genotype Matrix — rename_geno_matrix","text":"","code":"rename_geno_matrix(geno, parent1, parent2, f1)"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/rename_geno_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename Parents, F1, and F2 Individuals in a Genotype Matrix — rename_geno_matrix","text":"geno genotype matrix data frame : Rows represent genetic markers. Columns represent individuals (parents, F1, F2). parent1 Character. column name corresponding first parent. parent2 Character. column name corresponding second parent. f1 Character vector. column names corresponding F1 individuals.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/rename_geno_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename Parents, F1, and F2 Individuals in a Genotype Matrix — rename_geno_matrix","text":"genotype matrix updated column names: \"P1\" parent1. \"P2\" parent2. \"F1.1\", \"F1.2\", ... F1 individuals. \"F2.1\", \"F2.2\", ... individuals.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/rename_geno_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename Parents, F1, and F2 Individuals in a Genotype Matrix — rename_geno_matrix","text":"","code":"# Example genotype matrix geno_matrix <- matrix(sample(0:2, 30, replace = TRUE),                       nrow = 5, ncol = 6,                       dimnames = list(                         paste0(\"Marker\", 1:5),                         c(\"ParentA-Plate1-WellAH\", \"ParentB-Plate2-WellAJ\",                         \"F1abc\", \"F1bcd\", \"Ind1\", \"Ind2\")                       ))  # Rename genotype matrix renamed_geno <- rename_geno_matrix(geno_matrix,                                     parent1 = \"ParentA\",                                     parent2 = \"ParentB\",                                     f1 = c(\"F1abc\", \"F1bcd\"))  # Print renamed genotype matrix print(colnames(renamed_geno)) #> [1] \"F2.1\" \"F2.2\" \"F1.1\" \"F1.2\" \"F2.3\" \"F2.4\""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simple_effect_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Effect Plot — simple_effect_plot","title":"Simple Effect Plot — simple_effect_plot","text":"Generates clean simple effect plot. Shows relationship genotype classes marker trait. Optionally includes annotation medians sample sizes, allows flipping axes. Works polyploids.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simple_effect_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Effect Plot — simple_effect_plot","text":"","code":"simple_effect_plot(   effects_df,   marker_name,   trait_name,   genotype_levels = c(\"A\", \"H\", \"B\"),   annotate = TRUE,   flip = FALSE,   trait_label = NULL )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simple_effect_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Effect Plot — simple_effect_plot","text":"effects_df data frame containing least columns marker genotypes trait values. Usually output format_qtl_inputwith modifications (first two rows removed). marker_name character string specifying name marker column effects_df. trait_name character string specifying name trait column effects_df. genotype_levels character vector indicating expected genotype categories (factor levels). Default c(\"\", \"H\", \"B\"). annotate Logical; TRUE, plot includes annotations median values sample sizes per genotype. Default TRUE. flip Logical; TRUE, coordinates plot flipped (horizontal layout). Default FALSE. trait_label Optional character string use y-axis label. NULL, trait name used.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simple_effect_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Effect Plot — simple_effect_plot","text":"ggplot2 object displaying distribution trait values across genotype classes (alleles) specified marker.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simple_effect_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple Effect Plot — simple_effect_plot","text":"function performs following: Verifies presence marker trait columns input data frame. Removes rows missing genotype data. Converts marker column factor specified genotype levels. Creates boxplot optional annotations median values counts. Optionally flips plot horizontally.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simple_effect_plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simple Effect Plot — simple_effect_plot","text":"Inspired  Fig. 2  Caraza-Harter & Endelman","code":""},{"path":[]},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simulated_geno.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Simple Genotype Matrix Dataset — simulated_geno","title":"Simulated Simple Genotype Matrix Dataset — simulated_geno","text":"dataset contains sample genotype matrix demonstration geneticMapR functions.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simulated_geno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Simple Genotype Matrix Dataset — simulated_geno","text":"","code":"simulated_geno"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simulated_geno.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Simple Genotype Matrix Dataset — simulated_geno","text":"data frame 6 rows 5 variables: Parent1 Parent1 genotype dosage ALT allele (numeric) Parent2 Parent2 genotype dosage ALT allele (numeric) F2_1 Progeny genotype dosage ALT allele (numeric) F2_2 Genotype F2 individual 2 F2_3 Genotype F2 individual 3","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/simulated_geno.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated Simple Genotype Matrix Dataset — simulated_geno","text":"Simulated data internal use.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/trim_LG.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim Linkage Groups Based on LOD Thresholds — trim_LG","title":"Trim Linkage Groups Based on LOD Thresholds — trim_LG","text":"trim_LG interactive scripted function helps user filter markers within specified chromosome based linkage group (LG) assignment using LOD score thresholds. user can interactively choose LOD thresholds provide via arguments, visualize haplotype frequency filtering, remove outliers.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/trim_LG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim Linkage Groups Based on LOD Thresholds — trim_LG","text":"","code":"trim_LG(   chromosome,   map,   geno,   pop_type = \"F2\",   drop_outliers = TRUE,   n_cores = NULL,   interactive = TRUE,   initial_LOD = NULL,   end_LOD = NULL,   step_LOD = NULL,   selected_thresh = NULL )"},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/trim_LG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim Linkage Groups Based on LOD Thresholds — trim_LG","text":"chromosome Character. chromosome ID processed. map data frame least columns \"marker\", \"chrom\", \"position\". geno genotype matrix (rows = markers, columns = individuals). Preferably binned. pop_type Character. Population type LOD estimation. Default \"F2\". drop_outliers Logical. Whether remove outliers based haplotype frequency. Default TRUE. n_cores Integer. Number cores use. NULL, uses maximum available minus one. interactive Logical. TRUE, asks user LOD thresholds. FALSE, requires threshold arguments. initial_LOD Numeric. Initial LOD value (required interactive = FALSE). end_LOD Numeric. Final LOD value (required interactive = FALSE). step_LOD Numeric. Step size LOD sequence (required interactive = FALSE). selected_thresh Numeric. Final LOD threshold use (required interactive = FALSE).","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/trim_LG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim Linkage Groups Based on LOD Thresholds — trim_LG","text":"list filtered genotypes, final map, plots, LOD settings.","code":""},{"path":"https://vegaalfaro.github.io/geneticMapR/reference/trim_LG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trim Linkage Groups Based on LOD Thresholds — trim_LG","text":"Inspired functions Professor Jeffrey B. Endelman’s MapRtools.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://vegaalfaro.github.io/geneticMapR/news/index.html","id":"bug-fixes-development-version","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"geneticMapR (development version)","text":"Initial GitHub submission.","code":""}]
